cscope 15 $HOME/github/organicmaps               0000122859
	@defines.hpp

1 #¥agm®
⁄˚


5 
	#DATA_FILE_EXTENSION
 ".mwm"

	)

6 
	#DATA_FILE_EXTENSION_TMP
 ".mwm.tmp"

	)

7 
	#DIFF_FILE_EXTENSION
 ".mwmdiff"

	)

8 
	#DIFF_APPLYING_FILE_EXTENSION
 ".diff.≠∂yög"

	)

9 
	#FONT_FILE_EXTENSION
 ".âf"

	)

10 
	#OSM2FEATURE_FILE_EXTENSION
 ".osm2·"

	)

11 
	#EXTENSION_TMP
 ".tmp"

	)

12 
	#RAW_GEOM_FILE_EXTENSION
 ".øwgeom"

	)

13 
	#OSM_DATA_FILE_EXTENSION
 ".osm"

	)

14 
	#ARCHIVE_TRACKS_FILE_EXTENSION
 ".åack"

	)

15 
	#ARCHIVE_TRACKS_ZIPPED_FILE_EXTENSION
 ".åack.zù"

	)

16 
	#STATS_EXTENSION
 ".°©s"

	)

18 
	#NODES_FILE
 "nodes.d©"

	)

19 
	#WAYS_FILE
 "ways.d©"

	)

20 
	#RELATIONS_FILE
 "ªœti⁄s.d©"

	)

21 
	#TOWNS_FILE
 "towns.csv"

	)

22 
	#OFFSET_EXT
 ".offs"

	)

23 
	#ID2REL_EXT
 ".id2ªl"

	)

25 
	#CENTERS_FILE_TAG
 "˚¡îs"

	)

26 
	#FEATURES_FILE_TAG
 "„©uªs"

	)

27 
	#GEOMETRY_FILE_TAG
 "geom"

	)

28 
	#TRIANGLE_FILE_TAG
 "åg"

	)

29 
	#INDEX_FILE_TAG
 "idx"

	)

30 
	#SEARCH_INDEX_FILE_TAG
 "sdx"

	)

31 
	#SEARCH_ADDRESS_FILE_TAG
 "addr"

	)

32 
	#POSTCODE_POINTS_FILE_TAG
 "po°code_poöts"

	)

33 
	#POSTCODES_FILE_TAG
 "po°codes"

	)

34 
	#CITIES_BOUNDARIES_FILE_TAG
 "côõs_bound¨õs"

	)

35 
	#FEATURE_TO_OSM_FILE_TAG
 "„©uª_to_osm"

	)

36 
	#HEADER_FILE_TAG
 "hódî"

	)

37 
	#VERSION_FILE_TAG
 "vîsi⁄"

	)

38 
	#METADATA_FILE_TAG
 "mëa"

	)

39 
	#ALTITUDES_FILE_TAG
 "Ætôudes"

	)

40 
	#ROAD_ACCESS_FILE_TAG
 "rﬂdac˚ss"

	)

41 
	#RESTRICTIONS_FILE_TAG
 "ª°ri˘i⁄s"

	)

42 
	#ROUTING_FILE_TAG
 "routög"

	)

43 
	#CROSS_MWM_FILE_TAG
 "¸oss_mwm"

	)

44 
	#FEATURE_OFFSETS_FILE_TAG
 "offs"

	)

45 
	#SEARCH_RANKS_FILE_TAG
 "ønks"

	)

46 
	#POPULARITY_RANKS_FILE_TAG
 "p›uœrôy"

	)

47 
	#REGION_INFO_FILE_TAG
 "rgnöfo"

	)

48 
	#METALINES_FILE_TAG
 "mëÆöes"

	)

49 
	#CAMERAS_INFO_FILE_TAG
 "•ìdˇms"

	)

50 
	#ISOLINES_INFO_FILE_TAG
 "isﬁöes_öfo"

	)

51 
	#TRAFFIC_KEYS_FILE_TAG
 "åaffic"

	)

52 
	#TRANSIT_CROSS_MWM_FILE_TAG
 "å™sô_¸oss_mwm"

	)

53 
	#TRANSIT_FILE_TAG
 "å™sô"

	)

54 
	#CITY_ROADS_FILE_TAG
 "côy_rﬂds"

	)

55 
	#DESCRIPTIONS_FILE_TAG
 "des¸ùti⁄s"

	)

56 
	#MAXSPEEDS_FILE_TAG
 "max•ìds"

	)

57 
	#ROUTING_WORLD_FILE_TAG
 "routög_w‹ld"

	)

59 
	#READY_FILE_EXTENSION
 ".ªady"

	)

60 
	#RESUME_FILE_EXTENSION
 ".ªsume"

	)

61 
	#DOWNLOADING_FILE_EXTENSION
 ".dow∆ﬂdög"

	)

62 
	#TRANSIT_FILE_EXTENSION
 ".å™sô.js⁄"

	)

64 
	#GEOM_INDEX_TMP_EXT
 ".geomidx.tmp"

	)

66 
	#COUNTRIES_FILE
 "cou¡rõs.txt"

	)

67 
	#SERVER_DATAVERSION_FILE
 "d©a_vîsi⁄.js⁄"

	)

68 
	#COUNTRIES_ROOT
 "Cou¡rõs"

	)

70 
	#COUNTRIES_META_FILE
 "cou¡rõs_mëa.txt"

	)

71 
	#LEAP_SPEEDS_FILE
 "À≠_•ìds.js⁄"

	)

73 
	#WORLD_FILE_NAME
 "W‹ld"

	)

74 
	#WORLD_COASTS_FILE_NAME
 "W‹ldCﬂ°s"

	)

76 
	#SETTINGS_FILE_NAME
 "£âögs.öi"

	)

77 
	#MARKETING_SETTINGS_FILE_NAME
 "m¨këög_£âögs.öi"

	)

79 
	#SEARCH_CATEGORIES_FILE_NAME
 "ˇãg‹õs.txt"

	)

80 
	#SEARCH_CUISINE_CATEGORIES_FILE_NAME
 "ˇãg‹õs_cuisöes.txt"

	)

81 
	#SEARCH_BRAND_CATEGORIES_FILE_NAME
 "ˇãg‹õs_bønds.txt"

	)

83 
	#PACKED_POLYGONS_INFO_TAG
 "öfo"

	)

84 
	#PACKED_POLYGONS_FILE
 "∑cked_pﬁyg⁄s.bö"

	)

86 
	#GPS_TRACK_FILENAME
 "gps_åack.d©"

	)

87 
	#RESTRICTIONS_FILENAME
 "ª°ri˘i⁄s.csv"

	)

88 
	#ROAD_ACCESS_FILENAME
 "rﬂd_ac˚ss.csv"

	)

89 
	#ROAD_ACCESS_CONDITIONAL_EXT
 ".ac˚ss_c⁄dôi⁄Æ"

	)

91 
	#MINI_ROUNDABOUT_ROADS_EXTENSION
 ".möi_roundabouts_rﬂds_ids"

	)

92 
	#METALINES_FILENAME
 "mëÆöes.bö"

	)

93 
	#CAMERAS_TO_WAYS_FILENAME
 "ˇmîas_to_ways.bö"

	)

94 
	#MINI_ROUNDABOUTS_FILENAME
 "möi_roundabouts.bö"

	)

95 
	#MAXSPEEDS_FILENAME
 "max•ìds.csv"

	)

96 
	#BOUNDARY_POSTCODE_TMP_FILENAME
 "bound¨y_po°code" 
DATA_FILE_EXTENSION_TMP


	)

97 
	#CITIES_AREAS_TMP_FILENAME
 "côõs_¨ós" 
DATA_FILE_EXTENSION_TMP


	)

98 
	#ROUTING_CITY_BOUNDARIES_TMP_FILENAME
 "routög_côy_bound¨õs" 
DATA_FILE_EXTENSION_TMP


	)

99 
	#ROUTING_CITY_BOUNDARIES_DUMP_FILENAME
 "routög_côy_bound¨õs.bö"

	)

100 
	#CROSS_MWM_OSM_WAYS_DIR
 "¸oss_mwm_osm_ways"

	)

101 
	#TEMP_ADDR_FILENAME
 "ãm∑ddr"

	)

103 
	#TRAFFIC_FILE_EXTENSION
 ".åaffic"

	)

105 
	#SKIPPED_ELEMENTS_FILE
 "skù≥d_ñemíts.js⁄"

	)

107 
	#REPLACED_TAGS_FILE
 "ª∂a˚d_ègs.txt"

	)

108 
	#MIXED_TAGS_FILE
 "mixed_ègs.txt"

	)

109 
	#MIXED_NODES_FILE
 "mixed_nodes.txt"

	)

111 
	#LOCALIZATION_DESCRIPTION_SUFFIX
 " Des¸ùti⁄"

	)

113 
	#BUILDING_PARTS_MAPPING_FILE
 "buûdög_∑πs_m≠pög.bö"

	)

	@omim_config.h

1 #¥agm®
⁄˚


	@precompiled_headers.hpp

1 #¥agm®
⁄˚


3 
	~"ã°ög/ã°ög.hµ
"

5 
	~"∂©f‹m/∂©f‹m.hµ
"

7 
	~"geomëry/poöt2d.hµ
"

9 
	~"ba£/as£π.hµ
"

10 
	~"ba£/loggög.hµ
"

11 
	~"ba£/ma¸os.hµ
"

12 
	~"ba£/°l_hñ≥rs.hµ
"

13 
	~"ba£/°rög_utûs.hµ
"

15 
	~<Æg‹ôhm
>

16 
	~<c°döt
>

17 
	~<fun˘i⁄Æ
>

18 
	~<m≠
>

19 
	~<mem‹y
>

20 
	~<s°ªam
>

21 
	~<°rög
>

22 
	~<utûôy
>

23 
	~<ve˘‹
>

	@private.h

1 #¥agm®
⁄˚


3 
	#OSM_CONSUMER_KEY
 "zz16eUusTr4TcVhoKQrgOJaRzZAeI2ktbVx6e3yn"

	)

4 
	#OSM_CONSUMER_SECRET
 "7g4XæhFkiOG1I3Zpqh8ajo94P9cNNXaU2YCMgL7"

	)

5 
	#MWM_GEOLOCATION_SERVER
 ""

	)

6 
	#METASERVER_URL
 "hâps://mëa.om≠s.≠p/m≠s"

	)

7 
	#DIFF_LIST_URL
 ""

	)

8 
	#DEFAULT_URLS_JSON
 "[ \"hâps://cdn.‹g™icm≠s.≠p/\" ]"

	)

9 
	#DEFAULT_CONNECTION_CHECK_IP
 "140.82.121.4"

10 
	#TRAFFIC_DATA_BASE_URL
 ""

	)

11 
	#USER_BINDING_PKCS12
 ""

	)

12 
	#USER_BINDING_PKCS12_PASSWORD
 ""

	)

	@private_default.h

1 #¥agm®
⁄˚


3 
	#OSM_CONSUMER_KEY
 "zz16eUusTr4TcVhoKQrgOJaRzZAeI2ktbVx6e3yn"

	)

4 
	#OSM_CONSUMER_SECRET
 "7g4XæhFkiOG1I3Zpqh8ajo94P9cNNXaU2YCMgL7"

	)

5 
	#MWM_GEOLOCATION_SERVER
 ""

	)

6 
	#METASERVER_URL
 "hâps://mëa.om≠s.≠p/m≠s"

	)

7 
	#DIFF_LIST_URL
 ""

	)

8 
	#DEFAULT_URLS_JSON
 "[ \"hâps://cdn.‹g™icm≠s.≠p/\" ]"

	)

9 
	#DEFAULT_CONNECTION_CHECK_IP
 "140.82.121.4"

10 
	#TRAFFIC_DATA_BASE_URL
 ""

	)

11 
	#USER_BINDING_PKCS12
 ""

	)

12 
	#USER_BINDING_PKCS12_PASSWORD
 ""

	)

	@base/assert.hpp

1 #¥agm®
⁄˚


3 
	~"ba£/ba£.hµ
"

4 
	~"ba£/öã∫Æ/mesßge.hµ
"

5 
	~"ba£/§c_poöt.hµ
"

7 
	~<ˇs£π
>

8 
	~<c°dlib
>

9 
	~<°rög
>

11 
«me•a˚
 
	gba£


15 
usög
 
	gAs£πFaûedFn
 = 
boﬁ
 (*)(
SrcPoöt
 c⁄° &, 
	g°d
::
°rög
 const &);

16 
As£πFaûedFn
 
OnAs£πFaûed
;

19 
As£πFaûedFn
 
SëAs£πFun˘i⁄
(As£πFaûedF¿
‚
);

22 #ifde‡
DEBUG


23 
	#ASSERT_CRASH
(Ë
	`as£π
(
Ál£
)

	)

25 
	#ASSERT_CRASH
(Ë
°d
::
	`ab‹t
()

	)

28 
	#ASSERT_FAIL
(
msg
) \

29 i‡(::
ba£
::
	`OnAs£πFaûed
(
	`SRC
(), 
msg
)) \

30 
	`ASSERT_CRASH
();

	)

33 
	#CHECK
(
X
, 
msg
) do { if (X) {} { \

34 
	`ASSERT_FAIL
(::
ba£
::
	`Mesßge
("CHECK("#X")", ::ba£::
Mesßge
 
msg
));} } 
Ál£
)

	)

36 
	#CHECK_EQUAL
(
X
, 
Y
, 
msg
) do { if ((X) == (Y)) {} { \

37 
	`ASSERT_FAIL
(::
ba£
::
	`Mesßge
("CHECK("#X" == "#Y")", \

38 ::
ba£
::
	`Mesßge
(
X
, 
Y
), \

39 ::
ba£
::
Mesßge
 
msg
));} } 
Ál£
)

	)

41 
	#CHECK_NOT_EQUAL
(
X
, 
Y
, 
msg
) do { if ((X) != (Y)) {} { \

42 
	`ASSERT_FAIL
(::
ba£
::
	`Mesßge
("CHECK("#X" != "#Y")", \

43 ::
ba£
::
	`Mesßge
(
X
, 
Y
), \

44 ::
ba£
::
Mesßge
 
msg
));} } 
Ál£
)

	)

46 
	#CHECK_LESS
(
X
, 
Y
, 
msg
) do { if ((X) < (Y)) {} { \

47 
	`ASSERT_FAIL
(::
ba£
::
	`Mesßge
("CHECK("#X" < "#Y")", \

48 ::
ba£
::
	`Mesßge
(
X
, 
Y
), \

49 ::
ba£
::
Mesßge
 
msg
));} } 
Ál£
)

	)

51 
	#CHECK_LESS_OR_EQUAL
(
X
, 
Y
, 
msg
) do { if ((X) <= (Y)) {} { \

52 
	`ASSERT_FAIL
(::
ba£
::
	`Mesßge
("CHECK("#X" <= "#Y")", \

53 ::
ba£
::
	`Mesßge
(
X
, 
Y
), \

54 ::
ba£
::
Mesßge
 
msg
));} } 
Ál£
)

	)

56 
	#CHECK_GREATER
(
X
, 
Y
, 
msg
) do { if ((X) > (Y)) {} { \

57 
	`ASSERT_FAIL
(::
ba£
::
	`Mesßge
("CHECK("#X" > "#Y")", \

58 ::
ba£
::
	`Mesßge
(
X
, 
Y
), \

59 ::
ba£
::
Mesßge
 
msg
));} } 
Ál£
)

	)

61 
	#CHECK_GREATER_OR_EQUAL
(
X
, 
Y
, 
msg
) do { if ((X) >= (Y)) {} { \

62 
	`ASSERT_FAIL
(::
ba£
::
	`Mesßge
("CHECK("#X" >= "#Y")", \

63 ::
ba£
::
	`Mesßge
(
X
, 
Y
), \

64 ::
ba£
::
Mesßge
 
msg
));} } 
Ál£
)

	)

66 
	#CHECK_OR_CALL
(
Áû
, 
ˇŒ
, 
X
, 
msg
) do { if (X) {} { \

67 i‡(
Áû
) {\

68 
	`ASSERT_FAIL
(::
ba£
::
	`Mesßge
(::base::Message("CHECK("#X")"), \

69 ::
ba£
::
Mesßge
 
msg
)); \

71 
	`ˇŒ
(); \

72 } } } 
Ál£
)

	)

74 #ifde‡
DEBUG


75 
	#ASSERT
(
X
, 
msg
Ë
	`CHECK
(X, msg)

	)

76 
	#VERIFY
(
X
, 
msg
Ë
	`CHECK
(X, msg)

	)

77 
	#ASSERT_EQUAL
(
X
, 
Y
, 
msg
Ë
	`CHECK_EQUAL
(X, Y, msg)

	)

78 
	#ASSERT_NOT_EQUAL
(
X
, 
Y
, 
msg
Ë
	`CHECK_NOT_EQUAL
(X, Y, msg)

	)

79 
	#ASSERT_LESS
(
X
, 
Y
, 
msg
Ë
	`CHECK_LESS
(X, Y, msg)

	)

80 
	#ASSERT_LESS_OR_EQUAL
(
X
, 
Y
, 
msg
Ë
	`CHECK_LESS_OR_EQUAL
(X, Y, msg)

	)

81 
	#ASSERT_GREATER
(
X
, 
Y
, 
msg
Ë
	`CHECK_GREATER
(X, Y, msg)

	)

82 
	#ASSERT_GREATER_OR_EQUAL
(
X
, 
Y
, 
msg
Ë
	`CHECK_GREATER_OR_EQUAL
(X, Y, msg)

	)

84 
	#ASSERT
(
X
, 
msg
)

	)

85 
	#VERIFY
(
X
, 
msg
Ë()(X)

	)

86 
	#ASSERT_EQUAL
(
X
, 
Y
, 
msg
)

	)

87 
	#ASSERT_NOT_EQUAL
(
X
, 
Y
, 
msg
)

	)

88 
	#ASSERT_LESS
(
X
, 
Y
, 
msg
)

	)

89 
	#ASSERT_LESS_OR_EQUAL
(
X
, 
Y
, 
msg
)

	)

90 
	#ASSERT_GREATER
(
X
, 
Y
, 
msg
)

	)

91 
	#ASSERT_GREATER_OR_EQUAL
(
X
, 
Y
, 
msg
)

	)

96 
	#UNREACHABLE
() \

99 
	`CHECK
(
Ál£
, ("Unreachable statement.")); \

100 
°d
::
	`ab‹t
(); \

101 } 
Ál£
)

	)

	@base/logging.hpp

1 #¥agm®
⁄˚


3 
	~"ba£/ba£.hµ
"

4 
	~"ba£/öã∫Æ/mesßge.hµ
"

5 
	~"ba£/§c_poöt.hµ
"

6 
	~"ba£/thªad.hµ
"

7 
	~"ba£/timî.hµ
"

9 
	~<¨øy
>

10 
	~<©omic
>

11 
	~<m≠
>

12 
	~<°rög
>

14 
«me•a˚
 
	gba£


16 
	eLogLevñ


18 
	gLDEBUG
,

19 
	gLINFO
,

20 
	gLWARNING
,

21 
	gLERROR
,

22 
	gLCRITICAL
,

24 
	gNUM_LOG_LEVELS


27 ˛as†
	cLogHñ≥r


29 
	gpublic
:

30 
LogHñ≥r
 & 
In°™˚
();

32 
LogHñ≥r
();

34 
GëThªadID
();

35 
WrôePrﬁog
(
°d
::
o°ªam
 & 
s
, 
LogLevñ
 
Àvñ
);

37 
	g¥iv©e
:

38 
m_thªadsCou¡
;

39 
	g°d
::
m≠
<
thªads
::
ThªadID
, > 
	gm_thªadID
;

41 
	gba£
::
Timî
 
m_timî
;

43 
	g°d
::
¨øy
<c⁄° *, 
	gNUM_LOG_LEVELS
> 
	gm_«mes
;

44 
	g°d
::
¨øy
<
size_t
, 
	gNUM_LOG_LEVELS
> 
	gm_Àns
;

47 
	g°d
::
°rög
 
ToSåög
(
LogLevñ
 
Àvñ
);

48 
boﬁ
 
FromSåög
(
°d
::
°rög
 c⁄° & 
s
, 
LogLevñ
 & 
Àvñ
);

49 
	g°d
::
¨øy
<c⁄° *, 
	gNUM_LOG_LEVELS
> c⁄° & 
GëLogLevñNames
();

51 
usög
 
	gAtomicLogLevñ
 = 
°d
::
©omic
<
LogLevñ
>;

52 
usög
 
	gLogMesßgeFn
 = (*)(
LogLevñ
 
Àvñ
, 
SrcPoöt
 c⁄° &, 
°d
::
°rög
 const &);

54 
LogLevñ
 
	`GëDeÁu…LogLevñ
();

55 
LogLevñ
 
	`GëDeÁu…LogAb‹tLevñ
();

57 
LogMesßgeFn
 
LogMesßge
;

58 
AtomicLogLevñ
 
g_LogLevñ
;

59 
AtomicLogLevñ
 
g_LogAb‹tLevñ
;

62 
LogMesßgeFn
 
	`SëLogMesßgeFn
(LogMesßgeF¿
‚
);

64 
	`LogMesßgeDeÁu…
(
LogLevñ
 
Àvñ
, 
SrcPoöt
 c⁄° & 
§cPoöt
, 
°d
::
°rög
 c⁄° & 
msg
);

65 
	`LogMesßgeTe°s
(
LogLevñ
 
Àvñ
, 
SrcPoöt
 c⁄° & 
§cPoöt
, 
°d
::
°rög
 c⁄° & 
msg
);

76 
	sSc›edLogLevñCh™gî


78 
ex∂icô
 
	`Sc›edLogLevñCh™gî
(
LogLevñ
 
ãmp‹¨yLogLevñ
 = 
LERROR
Ë{ 
g_LogLevñ
 =ÅemporaryLogLevel; }

80 ~
	`Sc›edLogLevñCh™gî
(Ë{ 
g_LogLevñ
 = 
m_ﬁd
; }

82 
LogLevñ
 
m_ﬁd
 = 
g_LogLevñ
;

83 
	}
};

85 
	sSc›edLogAb‹tLevñCh™gî


87 
ex∂icô
 
Sc›edLogAb‹tLevñCh™gî
(
LogLevñ
 
ãmp‹¨yLogAb‹tLevñ
 = 
LCRITICAL
)

89 
g_LogAb‹tLevñ
 = 
ãmp‹¨yLogAb‹tLevñ
;

92 ~
Sc›edLogAb‹tLevñCh™gî
(Ë{ 
	gg_LogAb‹tLevñ
 = 
m_ﬁd
; }

94 
LogLevñ
 
	gm_ﬁd
 = 
g_LogAb‹tLevñ
;

98 
	gusög
 ::
ba£
::
LDEBUG
;

99 
	gusög
 ::
ba£
::
LINFO
;

100 
	gusög
 ::
ba£
::
LWARNING
;

101 
	gusög
 ::
ba£
::
LERROR
;

102 
	gusög
 ::
ba£
::
LCRITICAL
;

103 
	gusög
 ::
ba£
::
NUM_LOG_LEVELS
;

107 
	#LOG
(
Àvñ
, 
msg
) \

110 i‡((
Àvñ
Ë>::
ba£
::
g_LogLevñ
) \

111 ::
ba£
::
	`LogMesßge
(
Àvñ
, 
	`SRC
(), ::ba£::
Mesßge
 
msg
); \

112 } 
Ál£
)

	)

115 
	#LOG_SHORT
(
Àvñ
, 
msg
) \

118 i‡((
Àvñ
Ë>::
ba£
::
g_LogLevñ
) \

119 ::
ba£
::
	`LogMesßge
(
Àvñ
, ba£::
	`SrcPoöt
(), ::ba£::
Mesßge
 
msg
); \

120 } 
Ál£
)

	)

123 
	#LOG_FORCE
(
Àvñ
, 
msg
) \

126 ::
ba£
::
	`LogMesßge
(
Àvñ
, 
	`SRC
(), ::ba£::
Mesßge
 
msg
); \

127 } 
Ál£
) \

128 

	)

130 
	#CLOG
(
Àvñ
, 
X
, 
msg
) \

133 i‡(!(
X
)) \

134 
	`LOG
(
Àvñ
, (
	`SRC
(), "CLOG(" #X ")", ::
ba£
::
Mesßge
 
msg
)); \

135 } 
Ál£
)

	)

	@base/macros.hpp

1 #¥agm®
⁄˚


3 
	~"ba£/as£π.hµ
"

4 
	~"ba£/ba£.hµ
"

6 
«me•a˚
 
	gba£


8 
«me•a˚
 
	gim∂


11 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gN
> (&
AºaySize
(
T
(&)[
N
]))[N];

16 
	#ARRAY_SIZE
(
X
Ë(::
ba£
::
im∂
::
	`AºaySize
(X))

	)

18 
	#DISALLOW_COPY
(
˛assName
) \

19 
	`˛assName
(
˛assName
 c⁄° &Ë
dñëe
; \

20 
˛assName
 & 
›î©‹
=(˛assNamêc⁄° &Ë
dñëe


	)

23 
	#DISALLOW_MOVE
(
˛assName
) \

24 
	`˛assName
(
˛assName
 &&Ë
dñëe
; \

25 
˛assName
 & 
›î©‹
=(˛assNamê&&Ë
dñëe


	)

27 
	#DISALLOW_COPY_AND_MOVE
(
˛assName
) \

28 
	`DISALLOW_COPY
(
˛assName
); \

29 
	`DISALLOW_MOVE
(
˛assName
)

	)

33 
	#TO_STRING_IMPL
(
x
Ë#x

	)

34 
	#TO_STRING
(
x
Ë
	`TO_STRING_IMPL
(x)

	)

36 
	#UNUSED_VALUE
(
x
Ë
°©ic_ˇ°
<>(x)

	)

38 
«me•a˚
 
	gba£


40 
«me•a˚
 
	gim∂


42 
	gãm∂©e
 <
ty≥«me
 
	gT
>

43 
ölöe
 
F‹˚U£VÆue
(
T
 c⁄° & 
t
)

45 vﬁ©ûê
T
 
	gdummy
 = 
t
;

46 
UNUSED_VALUE
(
dummy
);

52 
	#FORCE_USE_VALUE
(
x
Ë::
ba£
::
im∂
::
	`F‹˚U£VÆue
(x)

	)

54 #ifde‡
__GNUC__


56 
	#PREDICT
(
x
, 
¥edi˘i⁄
Ë
	`__buûtö_ex≥˘
(
°©ic_ˇ°
<>(x), sètic_ˇ°<>’ªdi˘i⁄))

	)

57 
	#PREDICT_TRUE
(
x
Ë
	`__buûtö_ex≥˘
(x, 1)

	)

58 
	#PREDICT_FALSE
(
x
Ë
	`__buûtö_ex≥˘
(x, 0)

	)

60 
	#PREDICT
(
x
, 
¥edi˘i⁄
Ë(x)

	)

61 
	#PREDICT_TRUE
(
x
Ë(x)

	)

62 
	#PREDICT_FALSE
(
x
Ë(x)

	)

65 
	#UINT16_FROM_UINT8
(
hi
, 
lo
Ë((
°©ic_ˇ°
<
uöt16_t
>(hiË<< 8Ë|Üo)

	)

66 
	#UINT32_FROM_UINT16
(
hi
, 
lo
Ë((
°©ic_ˇ°
<
uöt32_t
>(hiË<< 16Ë|Üo)

	)

67 
	#UINT64_FROM_UINT32
(
hi
, 
lo
Ë((
°©ic_ˇ°
<
uöt64_t
>(hiË<< 32Ë|Üo)

	)

69 
	#UINT32_FROM_UINT8
(
u3
, 
u2
, 
u1
, 
u0
) \

70 
	`UINT32_FROM_UINT16
(
	`UINT16_FROM_UINT8
(
u3
, 
u2
), UINT16_FROM_UINT8(
u1
, 
u0
))

	)

71 
	#UINT64_FROM_UINT8
(
u7
, 
u6
, 
u5
, 
u4
, 
u3
, 
u2
, 
u1
, 
u0
) \

72 
	`UINT64_FROM_UINT32
(
	`UINT32_FROM_UINT8
(
u7
, 
u6
, 
u5
, 
u4
), UINT32_FROM_UINT8(
u3
, 
u2
, 
u1
, 
u0
))

	)

74 
	#UINT16_LO
(
x
Ë(
°©ic_ˇ°
<
uöt8_t
>(x & 0xFF))

	)

75 
	#UINT16_HI
(
x
Ë(
°©ic_ˇ°
<
uöt8_t
>(x >> 8))

	)

76 
	#UINT32_LO
(
x
Ë(
°©ic_ˇ°
<
uöt16_t
>(x & 0xFFFF))

	)

77 
	#UINT32_HI
(
x
Ë(
°©ic_ˇ°
<
uöt16_t
>(x >> 16))

	)

78 
	#UINT64_LO
(
x
Ë(
°©ic_ˇ°
<
uöt32_t
>(x & 0xFFFFFFFF))

	)

79 
	#UINT64_HI
(
x
Ë(
°©ic_ˇ°
<
uöt32_t
>(x >> 32))

	)

81 
	#NOTIMPLEMENTED
(Ë
	`ASSERT
(
Ál£
, ("Fun˘i⁄", 
__func__
, "i†nŸ im∂emíãd!"))

	)

	@base/stl_helpers.hpp

1 #¥agm®
⁄˚


3 
	~<Æg‹ôhm
>

4 
	~<c°döt
>

5 
	~<fun˘i⁄Æ
>

6 
	~<öôülizî_li°
>

7 
	~<ôî©‹
>

8 
	~<mem‹y
>

9 
	~<tu∂e
>

10 
	~<ty≥_åaôs
>

11 
	~<utûôy
>

12 
	~<ve˘‹
>

14 
«me•a˚
 
	gba£


16 
usög
 
	gSåögIL
 = 
°d
::
öôülizî_li°
<const *>;

18 
«me•a˚
 
	gim∂


23 
	gãm∂©e
 <
boﬁ
 
	gisFõld
, 
ty≥«me
 
	gT
,Åy≥«mê
	gC
>

24 
	gLess
;

26 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gC
>

27 
	gLess
<
	gåue
, 
	gT
, 
	gC
>

29 
ex∂icô
 
Less
(
T
 
C
::* 
p
Ë: 
m_p
(p) {}

31 
boﬁ
 
›î©‹
()(
C
 c⁄° & 
lhs
, C c⁄° & 
	grhs
Ëc⁄° {  
	glhs
.*
	gm_p
 <Ñhs.*m_p; }

33 
boﬁ
 
›î©‹
()(
C
 c⁄° * c⁄° 
	glhs
, C c⁄° * c⁄° 
	grhs
) const

35  
	glhs
->*
	gm_p
 < 
	grhs
->*m_p;

38 
T
 
	gC
::* 
m_p
;

41 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gC
>

42 
	gLess
<
	gÁl£
, 
	gT
, 
	gC
>

44 
ex∂icô
 
Less
(
T
 (
C
::*
p
)(Ëc⁄°Ë: 
m_p
(p) {}

46 
boﬁ
 
›î©‹
()(
C
 c⁄° & 
lhs
, C c⁄° & 
	grhs
Ëc⁄° {  (
	glhs
.*
	gm_p
)() < (rhs.*m_p)(); }

48 
boﬁ
 
›î©‹
()(
C
 c⁄° * c⁄° 
	glhs
, C c⁄° * c⁄° 
	grhs
) const

50  (
	glhs
->*
	gm_p
)(Ë< (
	grhs
->*m_p)();

53 
T
 (
C
::*
m_p
)() const;

56 
	gãm∂©e
 <
boﬁ
 
	gisFõld
, 
ty≥«me
 
	gT
,Åy≥«mê
	gC
>

57 
	gEquÆs
;

59 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gC
>

60 
	gEquÆs
<
	gåue
, 
	gT
, 
	gC
>

62 
ex∂icô
 
EquÆs
(
T
 
C
::* 
p
Ë: 
m_p
(p) {}

64 
boﬁ
 
›î©‹
()(
C
 c⁄° & 
lhs
, C c⁄° & 
	grhs
Ëc⁄° {  
	glhs
.*
	gm_p
 =
rhs
.*
m_p
; }

66 
boﬁ
 
›î©‹
()(
C
 c⁄° * c⁄° 
	glhs
, C c⁄° * c⁄° 
	grhs
) const

68  
	glhs
->*
	gm_p
 =
rhs
->*
m_p
;

71 
T
 
	gC
::* 
m_p
;

74 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gC
>

75 
	gEquÆs
<
	gÁl£
, 
	gT
, 
	gC
>

77 
ex∂icô
 
EquÆs
(
T
 (
C
::*
p
)(Ëc⁄°Ë: 
m_p
(p) {}

79 
boﬁ
 
›î©‹
()(
C
 c⁄° & 
lhs
, C c⁄° & 
	grhs
Ëc⁄° {  (
	glhs
.*
	gm_p
)(Ë=(
rhs
.*
m_p
)(); }

81 
boﬁ
 
›î©‹
()(
C
 c⁄° * c⁄° 
	glhs
, C c⁄° * c⁄° 
	grhs
) const

83  (
	glhs
->*
	gm_p
)(Ë=(
rhs
->*
m_p
)();

86 
T
 (
C
::*
m_p
)() const;

89 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gDñë‹
>

90 ˛as†
	cDñëeR™geFun˘‹


92 
	gpublic
:

93 
DñëeR™geFun˘‹
(
C⁄èöî
 & 
c⁄t
, 
Dñë‹
 c⁄° & 
dñë‹
Ë: 
m_c⁄t
(c⁄t), 
m_dñë‹
(deletor)

97 
›î©‹
()()

99 
f‹_óch
(
m_c⁄t
.
begö
(), m_c⁄t.
íd
(), 
m_dñë‹
);

100 
	gm_c⁄t
.
˛ór
();

103 
	g¥iv©e
:

104 
C⁄èöî
 & 
m_c⁄t
;

105 
Dñë‹
 
	gm_dñë‹
;

110 
	gãm∂©e
 <
ty≥«me
 
	gC⁄t
>

111 
	$S‹tUnique
(
C⁄t
 & 
c
)

113 
°d
::
	`s‹t
(
c
.
	`begö
(), c.
	`íd
());

114 
c
.
	`îa£
(
°d
::
	`unique
(c.
	`begö
(), c.
	`íd
()), c.end());

115 
	}
}

119 
	gãm∂©e
 <
ty≥«me
 
	gC⁄t
,Åy≥«mê
	gLess
,Åy≥«mê
	gEquÆs
>

120 
	$S‹tUnique
(
C⁄t
 & 
c
, 
Less
 && 
Àss
, 
EquÆs
 && 
equÆs
)

122 
°d
::
	`s‹t
(
c
.
	`begö
(), c.
	`íd
(), std::
	`ªf
(
Àss
));

123 
c
.
	`îa£
(
°d
::
	`unique
(c.
	`begö
(), c.
	`íd
(), std::
	`ªf
(
equÆs
)), c.end());

124 
	}
}

126 
	gãm∂©e
 <
ty≥«me
 
	gC⁄t
,Åy≥«mê
	gFn
>

127 
	$Eø£If
(
C⁄t
 & 
c
, 
Fn
 && 
‚
)

129 
c
.
	`îa£
(
°d
::
	`ªmove_if
(c.
	`begö
(), c.
	`íd
(), std::
	`ªf
(
‚
)), c.end());

130 
	}
}

132 
	gãm∂©e
 <
ty≥«me
 
	gC⁄t
,Åy≥«mê
	gFn
>

133 
boﬁ
 
	$AŒOf
(
C⁄t
 c⁄° & 
c
, 
Fn
 && 
‚
)

135  
°d
::
	`Æl_of
(°d::
	`cbegö
(
c
), std::
	`˚nd
(c), std::
	`ªf
(
‚
));

136 
	}
}

138 
	gãm∂©e
 <
ty≥«me
 
	gC⁄t
,Åy≥«mê
	gFn
>

139 
boﬁ
 
	$AnyOf
(
C⁄t
 c⁄° & 
c
, 
Fn
 && 
‚
)

141  
°d
::
	`™y_of
(°d::
	`cbegö
(
c
), std::
	`˚nd
(c), std::
	`ªf
(
‚
));

142 
	}
}

144 
	gãm∂©e
 <
ty≥«me
 
	gC⁄t
,Åy≥«mê
	gOutIt
,Åy≥«mê
	gFn
>

145 
	$de˛ty≥
◊utoË
	$Tønsf‹m
(
C⁄t
 c⁄° & 
c
, 
OutIt
 
ô
, 
Fn
 && 
‚
)

147  
°d
::
	`å™sf‹m
(°d::
	`cbegö
(
c
), std::
	`˚nd
(c), 
ô
, std::
	`ªf
(
‚
));

148 
	}
}

150 
	gãm∂©e
 <
ty≥«me
 
	gC⁄t
,Åy≥«mê
	gFn
>

151 
	$de˛ty≥
◊utoË
	$FödIf
(
C⁄t
 c⁄° & 
c
, 
Fn
 && 
‚
)

153  
°d
::
	`föd_if
(°d::
	`cbegö
(
c
), std::
	`˚nd
(c), std::
	`ªf
(
‚
));

154 
	}
}

157 
	gãm∂©e
 <
ty≥«me
 
	gC⁄t
,Åy≥«mê
	gT
>

158 
boﬁ
 
	$IsExi°
(
C⁄t
 c⁄° & 
c
, 
T
 c⁄° & 
t
)

160 autÿc⁄° 
íd
 = 
°d
::
	`˚nd
(
c
);

161  
°d
::
	`föd
(°d::
	`cbegö
(
c
), 
íd
, 
t
) !=Énd;

162 
	}
}

169 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gC
>

170 
	gim∂
::
Less
<
åue
, 
	gT
, 
	gC
> 
	$LessBy
(
T
 
C
::* 
p
)

172  
im∂
::
Less
<
åue
, 
T
, 
C
>(
p
);

173 
	}
}

175 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gC
>

176 
	gim∂
::
Less
<
Ál£
, 
	gT
, 
	gC
> 
LessBy
(
	$T
 (
C
::*
p
)() const)

178  
im∂
::
Less
<
Ál£
, 
T
, 
C
>(
p
);

179 
	}
}

181 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gC
>

182 
	gim∂
::
EquÆs
<
åue
, 
	gT
, 
	gC
> 
	$EquÆsBy
(
T
 
C
::* 
p
)

184  
im∂
::
EquÆs
<
åue
, 
T
, 
C
>(
p
);

185 
	}
}

187 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gC
>

188 
	gim∂
::
EquÆs
<
Ál£
, 
	gT
, 
	gC
> 
EquÆsBy
(
	$T
 (
C
::*
p
)() const)

190  
im∂
::
EquÆs
<
Ál£
, 
T
, 
C
>(
p
);

191 
	}
}

193 
	gãm∂©e
 <
ty≥«me
 
	gT
>

194 
	g°d
::
undîlyög_ty≥_t
<
T
> 
c⁄°ex¥
 
	$Undîlyög
(
T
 
vÆue
)

196  
°©ic_ˇ°
<
°d
::
undîlyög_ty≥_t
<
T
>>(
vÆue
);

197 
	}
}

201 
	gãm∂©e
 <
ty≥«me
 
	gFn
>

202 ˛as†
	cIgn‹eFú°Argumít


204 
	gpublic
:

205 
ãm∂©e
 <
ty≥«me
 
Gn
>

206 
ex∂icô
 
Ign‹eFú°Argumít
(
Gn
 && 
gn
Ë: 
m_‚
(
°d
::
f‹w¨d
<Gn>(gn)) {}

208 
ãm∂©e
 <
ty≥«me
 
Arg
, 
	gty≥«me
... 
	gArgs
>

209 
	g°d
::
ªsu…_of_t
<
Fn
(
Args
 &&...)> 
›î©‹
()(
Arg
 &&, 
	gArgs
 &&... 
	g¨gs
)

211  
m_‚
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

214 
	g¥iv©e
:

215 
Fn
 
m_‚
;

218 
	gãm∂©e
 <
ty≥«me
 
	gFn
>

219 
	gIgn‹eFú°Argumít
<
	gFn
> 
	$MakeIgn‹eFú°Argumít
(
Fn
 && 
‚
)

221  
Ign‹eFú°Argumít
<
Fn
>(
°d
::
f‹w¨d
<Fn>(
‚
));

222 
	}
}

224 
	gãm∂©e
 <
size_t
 
	gI
 = 0, 
ty≥«me
 
	gFn
, 
	gty≥«me
... 
	gTp
>

225 
	g°d
::
íabÀ_if_t
<
I
 =...(
Tp
), >

226 
f‹_óch_ö_tu∂e
(
°d
::
tu∂e
<
Tp
...> &, 
Fn
 &&)

230 
	gãm∂©e
 <
size_t
 
	gI
 = 0, 
ty≥«me
 
	gFn
, 
	gty≥«me
... 
	gTp
>

231 
	g°d
::
íabÀ_if_t
<
I
 !...(
Tp
), >

232 
f‹_óch_ö_tu∂e
(
°d
::
tu∂e
<
Tp
...> & 
t
, 
Fn
 && 
‚
)

234 
‚
(
I
, 
°d
::
gë
<I>(
t
));

235 
	gf‹_óch_ö_tu∂e
<
	gI
 + 1, 
	gFn
, 
	gTp
...>(
	gt
, 
	g°d
::
f‹w¨d
<
Fn
>(
‚
));

238 
	gãm∂©e
 <
size_t
 
	gI
 = 0, 
ty≥«me
 
	gFn
, 
	gty≥«me
... 
	gTp
>

239 
	g°d
::
íabÀ_if_t
<
I
 =...(
Tp
), >

240 
f‹_óch_ö_tu∂e_c⁄°
(
°d
::
tu∂e
<
Tp
...> c⁄° &, 
Fn
 &&)

244 
	gãm∂©e
 <
size_t
 
	gI
 = 0, 
ty≥«me
 
	gFn
, 
	gty≥«me
... 
	gTp
>

245 
	g°d
::
íabÀ_if_t
<
I
 !...(
Tp
), >

246 
f‹_óch_ö_tu∂e_c⁄°
(
°d
::
tu∂e
<
Tp
...> c⁄° & 
t
, 
Fn
 && 
‚
)

248 
‚
(
I
, 
°d
::
gë
<I>(
t
));

249 
	gf‹_óch_ö_tu∂e_c⁄°
<
	gI
 + 1, 
	gFn
, 
	gTp
...>(
	gt
, 
	g°d
::
f‹w¨d
<
Fn
>(
‚
));

252 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

253 ˛as†
	cBackIn£πFun˘‹


255 
	gpublic
:

256 
ex∂icô
 
BackIn£πFun˘‹
(
C⁄èöî
 & 
c⁄èöî
Ë: 
m_C⁄èöî
(container) {}

257 
ãm∂©e
 <
˛ass
 
T
> 
›î©‹
()(T && 
t
Ëc⁄° { 
m_C⁄èöî
.
push_back
(
°d
::
f‹w¨d
<T>(t)); }

259 
	g¥iv©e
:

260 
C⁄èöî
 & 
m_C⁄èöî
;

263 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

264 
	gBackIn£πFun˘‹
<
	gC⁄èöî
> 
	$MakeBackIn£πFun˘‹
(
C⁄èöî
 & 
c⁄èöî
)

266  
BackIn£πFun˘‹
<
C⁄èöî
>(
c⁄èöî
);

267 
	}
}

269 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

270 ˛as†
	cIn£πFun˘‹


272 
	gpublic
:

273 
ex∂icô
 
In£πFun˘‹
(
C⁄èöî
 & 
c⁄èöî
Ë: 
m_C⁄èöî
(container) {}

274 
›î©‹
()(
ty≥«me
 
C⁄èöî
::
vÆue_ty≥
 c⁄° & 
t
) const

276 
m_C⁄èöî
.
ö£π
(
íd
(m_C⁄èöî), 
t
);

279 
	g¥iv©e
:

280 
C⁄èöî
 & 
m_C⁄èöî
;

283 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

284 
	gIn£πFun˘‹
<
	gC⁄èöî
> 
	$MakeIn£πFun˘‹
(
C⁄èöî
 & 
c⁄èöî
)

286  
In£πFun˘‹
<
C⁄èöî
>(
c⁄èöî
);

287 
	}
}

289 
	gãm∂©e
 <
ty≥«me
 
	gIãr
,Åy≥«mê
	gCom∑ª
>

290 
boﬁ
 
	$IsS‹ãdAndUnique
(
Iãr
 
beg
, Iã∏
íd
, 
Com∑ª
 
comp
)

292 i‡(
beg
 =
íd
)

293  
åue
;

294 
Iãr
 
¥ev
 = 
beg
;

295 ++
beg
; beg !
íd
; ++beg, ++
¥ev
)

297 i‡(!
	`comp
(*
¥ev
, *
beg
))

298  
Ál£
;

300  
åue
;

301 
	}
}

303 
	gãm∂©e
 <
ty≥«me
 
	gIãr
,Åy≥«mê
	gCom∑ª
>

304 
Iãr
 
	$RemoveIfKìpVÆid
(
Iãr
 
beg
, Iã∏
íd
, 
Com∑ª
 
comp
)

306 
beg
 !
íd
)

308 i‡(
	`comp
(*
beg
))

310 
beg
 !--
íd
)

312 i‡(!
	`comp
(*
íd
))

314 
°d
::
	`sw≠
(*
beg
, *
íd
);

315 ++
beg
;

321 ++
beg
;

324  
íd
;

325 
	}
}

327 
	gãm∂©e
 <
ty≥«me
 
	gIãr
>

328 
boﬁ
 
	$IsS‹ãdAndUnique
(
Iãr
 
beg
, Iã∏
íd
)

330  
	`IsS‹ãdAndUnique
(
beg
, 
íd
, 
°d
::
Àss
<
ty≥«me
 std::
ôî©‹_åaôs
<
Iãr
>::
vÆue_ty≥
>());

331 
	}
}

334 
	gãm∂©e
 <
ty≥«me
 
	gIãr1
,Åy≥«mê
	gIãr2
>

335 
boﬁ
 
	$In˛udes
(
Iãr1
 
fú°1
, Iãr1 
œ°1
, 
Iãr2
 
fú°2
, Iãr2 
œ°2
)

337 
	`as£π
(
°d
::
	`is_s‹ãd
(
fú°1
, 
œ°1
));

338 
	`as£π
(
°d
::
	`is_s‹ãd
(
fú°2
, 
œ°2
));

340 ; 
fú°2
 !
œ°2
; ++
fú°1
)

342 i‡(
fú°1
 =
œ°1
 || *
fú°2
 < *first1)

343  
Ál£
;

344 i‡(!(*
fú°1
 < *
fú°2
))

345 ++
fú°2
;

347  
åue
;

348 
	}
}

350 
	sDñëeFun˘‹


352 
	gãm∂©e
 <
ty≥«me
 
	gT
>

353 
›î©‹
()(
T
 c⁄° * 
	gp
) const

355 
dñëe
 
	gp
;

359 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gDñë‹
>

360 
	gim∂
::
DñëeR™geFun˘‹
<
C⁄èöî
, 
	gDñë‹
> 
	$GëR™geDñë‹
(
C⁄èöî
 & 
c⁄t
,

361 
Dñë‹
 c⁄° & 
dñë‹
)

363  
im∂
::
DñëeR™geFun˘‹
<
C⁄èöî
, 
Dñë‹
>(
c⁄t
, 
dñë‹
);

364 
	}
}

366 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gDñë‹
>

367 
	$DñëeR™ge
(
C⁄èöî
 & 
c⁄t
, 
Dñë‹
 c⁄° & 
dñë‹
)

369 ()
	`GëR™geDñë‹
(
c⁄t
, 
dñë‹
)();

370 
	}
}

372 
	sIdFun˘‹


374 
	gãm∂©e
 <
ty≥«me
 
	gT
>

375 
T
 
›î©‹
()(T c⁄° & 
	gx
) const

377  
	gx
;

381 
	gãm∂©e
 <
ty≥«me
 
	gT
>

382 
	sEquÆFun˘‹


384 
T
 c⁄° & 
	gm_t
;

385 
ex∂icô
 
EquÆFun˘‹
(
T
 c⁄° & 
t
Ë: 
m_t
(t) {}

386 
boﬁ
 
›î©‹
()(
T
 c⁄° & 
t
Ëc⁄° {  (à=
m_t
); }

389 
	gãm∂©e
 <
ty≥«me
 
	gIãr
>

390 
Iãr
 
	$NextIãrInCy˛e
(
Iãr
 
ô
, Iã∏
beg
, Iã∏
íd
)

392 i‡(++
ô
 =
íd
)

393  
beg
;

394  
ô
;

395 
	}
}

397 
	gãm∂©e
 <
ty≥«me
 
	gIãr
>

398 
Iãr
 
	$PªvIãrInCy˛e
(
Iãr
 
ô
, Iã∏
beg
, Iã∏
íd
)

400 i‡(
ô
 =
beg
)

401 
ô
 = 
íd
;

402  --
ô
;

403 
	}
}

405 
	gãm∂©e
 <
ty≥«me
 
	gIãr1
,Åy≥«mê
	gIãr2
,Åy≥«mê
	gIn£πIãr
>

406 
	$AccumuœãI¡îvÆs1Wôh2
(
Iãr1
 
b1
, Iãr1 
e1
, 
Iãr2
 
b2
, Iãr2 
e2
, 
In£πIãr
 
ªs
)

408 
usög
 
T
 = 
ty≥«me
 
°d
::
ôî©‹_åaôs
<
Iãr1
>::
vÆue_ty≥
;

410 
T
 
¥ev
;

411 
boﬁ
 
vÆidPªv
 = 
Ál£
;

413 
b1
 !
e1
 || 
b2
 !
e2
)

416 i‡(
vÆidPªv
)

419 i‡(
b1
 !
e1
 && b1->
fú°
 < 
¥ev
.
£c⁄d
)

422 i‡(
¥ev
.
£c⁄d
 < 
b1
->second)

423 
¥ev
.
£c⁄d
 = 
b1
->second;

424 ++
b1
;

429 i‡(
b2
 !
e2
 && b2->
fú°
 < 
¥ev
.
£c⁄d
)

432 i‡(
¥ev
.
fú°
 < 
b2
->
£c⁄d
)

435 i‡(
b2
->
fú°
 < 
¥ev
.first)

436 
¥ev
.
fú°
 = 
b2
->first;

437 i‡(
¥ev
.
£c⁄d
 < 
b2
->second)

438 
¥ev
.
£c⁄d
 = 
b2
->second;

441 ++
b2
;

446 *
ªs
++ = 
¥ev
;

447 
vÆidPªv
 = 
Ál£
;

450 i‡(
b1
 !
e1
)

453 
¥ev
 = *
b1
++;

454 
vÆidPªv
 = 
åue
;

463 i‡(
vÆidPªv
)

464 *
ªs
++ = 
¥ev
;

465 
	}
}

467 
	sEnumCœssHash


469 
	gãm∂©e
<
ty≥«me
 
	gT
, 
	g°d
::
íabÀ_if_t
<
°d
::
is_íum
<
T
>::
vÆue
> * = 
nuŒ±r
>

470 
size_t
 
›î©‹
()(
T
 c⁄° & 
t
Ëc⁄° 
n€x˚±


472  
°©ic_ˇ°
<
size_t
>(
t
);

476 
	sRërõveFú°


478 
	gãm∂©e
 <
ty≥«me
 
	gT
>

479 
ty≥«me
 
	gT
::
fú°_ty≥
 c⁄° & 
›î©‹
()(
T
 c⁄° & 
∑ú
) const

481  
∑ú
.
fú°
;

485 
	sRërõveSec⁄d


487 
	gãm∂©e
 <
ty≥«me
 
	gT
>

488 
ty≥«me
 
	gT
::
£c⁄d_ty≥
 c⁄° & 
›î©‹
()(
T
 c⁄° & 
∑ú
) const

490  
∑ú
.
£c⁄d
;

	@base/string_utils.hpp

1 #¥agm®
⁄˚


3 
	~"ba£/buf„r_ve˘‹.hµ
"

4 
	~"ba£/checked_ˇ°.hµ
"

5 
	~"ba£/°l_hñ≥rs.hµ
"

7 
	~<Æg‹ôhm
>

8 
	~<ch¨c⁄v
>

9 
	~<˚ºno
>

10 
	~<c°döt
>

11 
	~<c°dlib
>

12 
	~<ôî©‹
>

13 
	~<limôs
>

14 
	~<ªgex
>

15 
	~<s°ªam
>

16 
	~<°rög
>

17 
	~<°rög_võw
>

18 
	~<ty≥_åaôs
>

20 
	~"3∑πy/utf˝p/sour˚/utf8/unchecked.h
"

23 
«me•a˚
 
	g°rögs


25 
usög
 
	gUniCh¨
 = 
uöt32_t
;

29 
˛ass
 
	gUniSåög
 : 
public
 
buf„r_ve˘‹
<
UniCh¨
, 32>

31 
usög
 
	gBa£T
 = 
buf„r_ve˘‹
<
UniCh¨
, 32>;

33 
	gpublic
:

34 
usög
 
vÆue_ty≥
 = 
UniCh¨
;

36 
UniSåög
() {}

37 
ex∂icô
 
UniSåög
(
size_t
 
n
Ë: 
Ba£T
(n) {}

38 
UniSåög
(
size_t
 
n
, 
UniCh¨
 
c
Ë{ 
ªsize
(n, c); }

40 
	gãm∂©e
 <
ty≥«me
 
	gIãr
>

41 
UniSåög
(
Iãr
 
b
, Iã∏
e
Ë: 
Ba£T
(b,É)

45 
boﬁ
 
IsEquÆAscii
(c⁄° * 
s
) const;

47 
	gUniSåög
 & 
	g›î©‹
+=(
UniSåög
 c⁄° & 
rhs
)

49 
≠≥nd
(
rhs
);

50  *
	gthis
;

53 
UniSåög
 
	g›î©‹
+(UniSåög c⁄° & 
	grhs
) const

55 
UniSåög
 
ªsu…
(*
this
);

56 
	gªsu…
 +
rhs
;

57  
	gªsu…
;

60 
	gãm∂©e
 <
˛ass
 
	gIãr
>

61 
Rïœ˚
(
ôî©‹
 
fú°
, iãøt‹ 
œ°
, 
Iãr
 
fú°2
, Iã∏
œ°2
)

63 autÿ
	gô
 = 
fú°
;

64 autÿ
	gô2
 = 
fú°2
;

65 ; 
	gô
 < 
	gœ°
 && 
	gô2
 < 
	gœ°2
; ++it, ++it2)

66 *
	gô
 = *
ô2
;

68 i‡(
	gô
 =
œ°
 && 
ô2
 =
œ°2
)

71 i‡(
	gô
 =
œ°
)

73 
ö£π
(
ô
, 
ô2
, 
œ°2
);

77 
îa£
(
ô
, 
œ°
);

84 
MakeLowîCa£I≈œ˚
(
UniSåög
 & 
s
);

85 
UniSåög
 
MakeLowîCa£
(UniSåög 
s
);

90 
N‹mÆizeI≈œ˚
(
UniSåög
 & 
s
);

92 
UniSåög
 
N‹mÆize
(UniSåög 
s
);

93 
	g°d
::
°rög
 
N‹mÆize
(
°d
::°rög c⁄° & 
s
);

96 
N‹mÆizeDigôs
(
°d
::
°rög
 & 
utf8
);

97 
N‹mÆizeDigôs
(
UniSåög
 & 
us
);

103 
size_t
 
Cou¡N‹mLowîSymbﬁs
(
UniSåög
 c⁄° & 
s
, UniSåög c⁄° & 
lowSå
);

105 
AsciiToLowî
(
°d
::
°rög
 & 
s
);

110 
Trim
(
°d
::
°rög
 & 
s
);

111 
Trim
(
°d
::
°rög_võw
 & 
sv
);

113 
Trim
(
°d
::
°rög
 & 
s
, std::
°rög_võw
 
™yOf
);

119 
boﬁ
 
Rïœ˚Fú°
(
°d
::
°rög
 & 
°r
, std::°rög c⁄° & 
‰om
, std::°rög c⁄° & 
to
);

121 
boﬁ
 
Rïœ˚La°
(
°d
::
°rög
 & 
°r
, std::°rög c⁄° & 
‰om
, std::°rög c⁄° & 
to
);

123 
MakeLowîCa£I≈œ˚
(
°d
::
°rög
 & 
s
);

124 
	g°d
::
°rög
 
MakeLowîCa£
(
°d
::°rög 
s
);

125 
boﬁ
 
EquÆNoCa£
(
°d
::
°rög
 c⁄° & 
s1
, std::°rög c⁄° & 
s2
);

127 
UniSåög
 
MakeUniSåög
(
°d
::
°rög_võw
 
utf8s
);

128 
	g°d
::
°rög
 
ToUtf8
(
UniSåög
 c⁄° & 
s
);

129 
boﬁ
 
IsASCIISåög
(
°d
::
°rög_võw
 
sv
);

130 
boﬁ
 
IsASCIIDigô
(
UniCh¨
 
c
);

131 
	gãm∂©e
 <
˛ass
 
	gSåögT
> 
boﬁ
 
IsASCIINumîic
(
SåögT
 c⁄° & 
°r
)

133  !
	g°d
::
em±y
(
°r
Ë&& 
°d
::
Æl_of
(°d::
begö
(°r), std::
íd
(°r), &
IsASCIIDigô
);

135 
ölöe
 
boﬁ
 
IsASCIINumîic
(c⁄° * 
s
Ë{  IsASCIINumîic(
°d
::
°rög_võw
(s)); }

136 
boﬁ
 
IsASCIIS∑˚
(
UniCh¨
 
c
);

137 
boﬁ
 
IsASCIIL©ö
(
UniCh¨
 
c
);

139 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
UniSåög
 c⁄° & 
s
Ë{  
ToUtf8
(s); }

141 
	gãm∂©e
 <
ty≥«me
 
	gDñimFn
,Åy≥«mê
	gIãr
> cœs†
	cTokíizeIãøt‹Ba£


143 
	gpublic
:

144 
usög
 
dif„ªn˚_ty≥
 = 
°d
::
±rdiff_t
;

145 
usög
 
	gôî©‹_ˇãg‹y
 = 
°d
::
öput_ôî©‹_èg
;

149 c⁄° * 
ToCh¨På
(c⁄° * 
p
Ëc⁄° {  
	gp
; }

150 
	gãm∂©e
 <
˛ass
 
	gT
>áutÿ
ToCh¨På
(
T
 c⁄° & 
i
Ëc⁄° {  ToCh¨På(i.
ba£
()); }

153 
	gãm∂©e
 <
ty≥«me
 
	gDñimFn
,Åy≥«mê
	gIãr
, 
boﬁ
 
	gKìpEm±yTokís
 = 
Ál£
>

154 
˛ass
 
TokíizeIãøt‹
 : 
public
 
TokíizeIãøt‹Ba£
<
DñimFn
, 
	gIãr
>

156 
	gpublic
:

157 
ãm∂©e
 <
˛ass
 
InIãrT
> 
TokíizeIãøt‹
(InIãrT 
beg
, InIãrT 
íd
, 
DñimFn
 c⁄° & 
dñimFn
)

158 : 
m_°¨t
(
beg
), 
m_íd
(beg), 
m_föish
(
íd
), 
m_dñimFn
(
dñimFn
)

160 
Move
();

163 
	g°d
::
°rög_võw
 
›î©‹
*() const

165 
ASSERT
(
m_°¨t
 !
m_föish
, ("Dereferencing ofÉmpty iterator."));

167 autÿc⁄° 
	gba£I
 = 
this
->
ToCh¨På
(
m_°¨t
);

168  
	g°d
::
°rög_võw
(
ba£I
, 
°d
::
di°™˚
(ba£I, 
this
->
ToCh¨På
(
m_íd
)));

171 
UniSåög
 
GëUniSåög
() const

173 
ASSERT
(
m_°¨t
 !
m_föish
, ("Dereferencing ofÉmpty iterator."));

174  
UniSåög
(
m_°¨t
, 
m_íd
);

177 
›î©‹
 
boﬁ
(Ëc⁄° {  
	gm_°¨t
 !
m_föish
; }

179 
	gTokíizeIãøt‹
 & 
	g›î©‹
++()

181 
Move
();

182  *
	gthis
;

185 
boﬁ
 
	g›î©‹
==(
TokíizeIãøt‹
 c⁄° & 
rhs
) const

187 i‡(!*
this
 && !
rhs
)

188  
åue
;

189 i‡(*
	gthis
 && 
	grhs
)

190  
	gm_°¨t
 =
rhs
.
m_°¨t
 && 
m_íd
 =rhs.m_íd && 
m_föish
 ==Ñhs.m_finish;

191  
	gÁl£
;

194 
boﬁ
 
	g›î©‹
!=(
TokíizeIãøt‹
 c⁄° & 
rhs
Ëc⁄° {  !(*
this
 ==Ñhs); }

196 
	g¥iv©e
:

197 
Move
()

199 
m_°¨t
 = 
m_íd
;

200 
	gm_°¨t
 !
m_föish
 && 
m_dñimFn
(*
m_°¨t
))

201 ++
m_°¨t
;

203 
	gm_íd
 = 
m_°¨t
;

204 
	gm_íd
 !
m_föish
 && !
m_dñimFn
(*
m_íd
))

205 ++
m_íd
;

217 
Iãr
 
	gm_°¨t
;

218 
Iãr
 
	gm_íd
;

221 
Iãr
 
	gm_föish
;

223 
DñimFn
 
	gm_dñimFn
;

227 
	gãm∂©e
 <
ty≥«me
 
	gDñimFn
,Åy≥«mê
	gIãr
>

228 
˛ass
 
	gTokíizeIãøt‹
<
	gDñimFn
, 
	gIãr
, 
	gåue
 > : 
public
 
TokíizeIãøt‹Ba£
<
DñimFn
, Iter>

230 
	gpublic
:

231 
ãm∂©e
 <
˛ass
 
InIãrT
> 
TokíizeIãøt‹
(InIãrT 
beg
, InIãrT 
íd
, 
DñimFn
 c⁄° & 
dñimFn
)

232 : 
m_°¨t
(
beg
), 
m_íd
(beg), 
m_föish
(
íd
), 
m_dñimFn
(
dñimFn
), 
m_föished
(
Ál£
)

234 
	gm_íd
 !
m_föish
 && !
m_dñimFn
(*
m_íd
))

235 ++
m_íd
;

238 
	g°d
::
°rög_võw
 
›î©‹
*() const

240 
ASSERT
(!
m_föished
, ("Dereferencing ofÉmpty iterator."));

242 autÿc⁄° 
	gba£I
 = 
this
->
ToCh¨På
(
m_°¨t
);

243  
	g°d
::
°rög_võw
(
ba£I
, 
°d
::
di°™˚
(ba£I, 
this
->
ToCh¨På
(
m_íd
)));

246 
›î©‹
 
boﬁ
(Ëc⁄° {  !
	gm_föished
; }

248 
	gTokíizeIãøt‹
 & 
	g›î©‹
++()

250 
Move
();

251  *
	gthis
;

254 
boﬁ
 
	g›î©‹
==(
TokíizeIãøt‹
 c⁄° & 
rhs
) const

256 i‡(!*
this
 && !
rhs
)

257  
åue
;

258 i‡(*
	gthis
 && 
	grhs
)

260  
	gm_°¨t
 =
rhs
.
m_°¨t
 && 
m_íd
 =rhs.m_íd && 
m_föish
 ==Ñhs.m_finish &&

261 
m_föished
 =
rhs
.m_finished;

263  
	gÁl£
;

266 
boﬁ
 
	g›î©‹
!=(
TokíizeIãøt‹
 c⁄° & 
rhs
Ëc⁄° {  !(*
this
 ==Ñhs); }

268 
	g¥iv©e
:

269 
Move
()

271 i‡(
m_íd
 =
m_föish
)

273 
ASSERT
(!
m_föished
, ());

274 
	gm_°¨t
 = 
m_íd
 = 
m_föish
;

275 
	gm_föished
 = 
åue
;

279 
	gm_°¨t
 = 
m_íd
;

280 ++
	gm_°¨t
;

282 
	gm_íd
 = 
m_°¨t
;

283 
	gm_íd
 !
m_föish
 && !
m_dñimFn
(*
m_íd
))

284 ++
m_íd
;

296 
Iãr
 
	gm_°¨t
;

297 
Iãr
 
	gm_íd
;

300 
Iãr
 
	gm_föish
;

302 
DñimFn
 
	gm_dñimFn
;

305 
boﬁ
 
	gm_föished
;

308 ˛as†
	cSim∂eDñimôî


310 
UniSåög
 
	gm_dñims
;

312 
	gpublic
:

313 
Sim∂eDñimôî
(c⁄° * 
dñims
);

314 
Sim∂eDñimôî
(
dñim
);

317 
boﬁ
 
›î©‹
()(
UniCh¨
 
	gc
) const;

320 
	gãm∂©e
 <
˛ass
 
	gSåögT
> cœs†
	gSim∂eTokíizî
 : 
public


321 
TokíizeIãøt‹
<
Sim∂eDñimôî
, ::
utf8
::
unchecked
::
ôî©‹
<
ty≥«me
 
SåögT
::
c⁄°_ôî©‹
>, 
	gÁl£
 >

323 
usög
 
	gBa£T
 = 
TokíizeIãøt‹
<
Sim∂eDñimôî
, ::
utf8
::
unchecked
::
ôî©‹
<
ty≥«me
 
SåögT
::
c⁄°_ôî©‹
>, 
	gÁl£
 >;

324 
	gpublic
:

325 
Sim∂eTokíizî
(
SåögT
 c⁄° & 
°r
, 
Sim∂eDñimôî
 c⁄° & 
dñims
)

326 : 
Ba£T
(
°r
.
begö
(), så.
íd
(), 
dñims
)

331 
	gãm∂©e
 <
ty≥«me
 
	gTFun˘‹
>

332 
	$Tokíize
(
°d
::
°rög_võw
 
°r
, c⁄° * 
dñims
, 
TFun˘‹
 && 
f
)

334 
Sim∂eTokíizî
 
	`ôî
(
°r
, 
dñims
);

335 
ôî
)

337 
	`f
(*
ôî
);

338 ++
ôî
;

340 
	}
}

343 
	gãm∂©e
 <
˛ass
 
	gResu…T
 = 
°d
::
°rög_võw
>

344 
°d
::
ve˘‹
<
Resu…T
> 
	$Tokíize
(
°d
::
°rög_võw
 
°r
, c⁄° * 
dñims
)

346 
°d
::
ve˘‹
<
Resu…T
> 
c
;

347 
	`Tokíize
(
°r
, 
dñims
, [&
c
](
°d
::
°rög_võw
 
v
Ë{ c.
	`push_back
(
	`Resu…T
(v)); });

348  
c
;

349 
	}
}

353 
P¨£CSVRow
(
°d
::
°rög
 c⁄° & 
s
, c⁄° 
dñimôî
, std::
ve˘‹
<°d::°rög> & 
èrgë
);

356 
UniCh¨
 
La°UniCh¨
(
°d
::
°rög
 c⁄° & 
s
);

360 
«me•a˚
 
	göã∫Æ


362 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 = 
°d
::
íabÀ_if_t
<°d::
is_sig√d
<
T
>::
vÆue
 &&

363 (
T
) < ()>>

364 
I¡C⁄vîãr
(c⁄° * 
°¨t
, ** 
°›
, 
ba£
)

366  
	g°d
::
°πﬁ
(
°¨t
, 
°›
, 
ba£
);

369 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 = 
°d
::
íabÀ_if_t
<°d::
is_unsig√d
<
T
>::
vÆue
 &&

370 (
T
) < ()>>

371 
I¡C⁄vîãr
(c⁄° * 
°¨t
, ** 
°›
, 
ba£
)

373  
	g°d
::
°πoul
(
°¨t
, 
°›
, 
ba£
);

376 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 = 
°d
::
íabÀ_if_t
<°d::
is_sig√d
<
T
>::
vÆue
 &&

377 (
T
) == ()>>

378 
I¡C⁄vîãr
(c⁄° * 
°¨t
, ** 
°›
, 
ba£
)

380 #ifde‡
OMIM_OS_WINDOWS_NATIVE


381  
_°πoi64
(
°¨t
, &
°›
, 
ba£
);

383  
	g°d
::
°πﬁl
(
°¨t
, 
°›
, 
ba£
);

387 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 = 
°d
::
íabÀ_if_t
<°d::
is_unsig√d
<
T
>::
vÆue
 &&

388 (
T
) == ()>>

389 
I¡C⁄vîãr
(c⁄° * 
°¨t
, ** 
°›
, 
ba£
)

391 #ifde‡
OMIM_OS_WINDOWS_NATIVE


392  
_°πoui64
(
°¨t
, &
°›
, 
ba£
);

394  
	g°d
::
°πouŒ
(
°¨t
, 
°›
, 
ba£
);

398 
	gãm∂©e
 <
ty≥«me
 
	gT
,

399 
	gty≥«me
 = 
°d
::
íabÀ_if_t
<°d::
is_öãgøl
<
T
>::
vÆue
>>

400 
boﬁ
 
ToI¡egî
(c⁄° * 
°¨t
, 
T
 & 
ªsu…
, 
ba£
 = 10)

402 * 
°›
;

403 
	gî∫o
 = 0;

405 autÿc⁄° 
	gv
 = 
I¡C⁄vîãr
<
T
>(
°¨t
, &
	g°›
, 
	gba£
);

407 i‡(
	gî∫o
 =
EINVAL
 || 
î∫o
 =
ERANGE
 || *
°›
 !0 || 
°¨t
 == stop ||

408 !
ba£
::
IsCa°VÆid
<
T
>(
v
))

410 
î∫o
 = 0;

411  
	gÁl£
;

414 
	gªsu…
 = 
°©ic_ˇ°
<
T
>(
v
);

415  
	gåue
;

419 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_öt
(c⁄° * 
s
, & 
i
, 
ba£
 = 10)

421  
öã∫Æ
::
	`ToI¡egî
(
s
, 
i
, 
ba£
);

422 
	}
}

424 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_uöt
(c⁄° * 
s
, & 
i
, 
ba£
 = 10)

426  
öã∫Æ
::
	`ToI¡egî
(
s
, 
i
, 
ba£
);

427 
	}
}

438 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_uöt64
(c⁄° * 
s
, 
uöt64_t
 & 
i
, 
ba£
 = 10)

440  
öã∫Æ
::
	`ToI¡egî
(
s
, 
i
, 
ba£
);

441 
	}
}

443 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_öt64
(c⁄° * 
s
, 
öt64_t
 & 
i
)

445  
öã∫Æ
::
	`ToI¡egî
(
s
, 
i
);

446 
	}
}

454 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_uöt32
(c⁄° * 
s
, 
uöt32_t
 & 
i
, 
ba£
 = 10)

456  
öã∫Æ
::
	`ToI¡egî
(
s
, 
i
, 
ba£
);

457 
	}
}

459 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_öt32
(c⁄° * 
s
, 
öt32_t
 & 
i
)

461  
öã∫Æ
::
	`ToI¡egî
(
s
, 
i
);

462 
	}
}

464 [[
nodisˇrd
]] 
boﬁ
 
to_size_t
(c⁄° * 
s
, 
size_t
 & 
i
, 
ba£
 = 10);

466 [[
nodisˇrd
]] 
boﬁ
 
to_Êﬂt
(c⁄° * 
s
, & 
f
);

467 [[
nodisˇrd
]] 
boﬁ
 
to_doubÀ
(c⁄° * 
s
, & 
d
);

468 [[
nodisˇrd
]] 
boﬁ
 
is_föôe
(
d
);

470 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_öt
(
°d
::
°rög
 c⁄° & 
s
, & 
i
, 
ba£
 = 10)

472  
	`to_öt
(
s
.
	`c_°r
(), 
i
, 
ba£
);

473 
	}
}

474 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_uöt
(
°d
::
°rög
 c⁄° & 
s
, & 
i
, 
ba£
 = 10)

476  
	`to_uöt
(
s
.
	`c_°r
(), 
i
, 
ba£
);

477 
	}
}

481 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_uöt64
(
°d
::
°rög
 c⁄° & 
s
, 
uöt64_t
 & 
i
, 
ba£
 = 10)

483  
	`to_uöt64
(
s
.
	`c_°r
(), 
i
, 
ba£
);

484 
	}
}

485 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_öt64
(
°d
::
°rög
 c⁄° & 
s
, 
öt64_t
 & 
i
)

487  
	`to_öt64
(
s
.
	`c_°r
(), 
i
);

488 
	}
}

489 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_uöt32
(
°d
::
°rög
 c⁄° & 
s
, 
uöt32_t
 & 
i
, 
ba£
 = 10)

491  
	`to_uöt32
(
s
.
	`c_°r
(), 
i
, 
ba£
);

492 
	}
}

493 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_öt32
(
°d
::
°rög
 c⁄° & 
s
, 
öt32_t
 & 
i
)

495  
	`to_öt32
(
s
.
	`c_°r
(), 
i
);

496 
	}
}

497 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_size_t
(
°d
::
°rög
 c⁄° & 
s
, 
size_t
 & 
i
)

499  
	`to_size_t
(
s
.
	`c_°r
(), 
i
);

500 
	}
}

501 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_Êﬂt
(
°d
::
°rög
 c⁄° & 
s
, & 
f
)

503  
	`to_Êﬂt
(
s
.
	`c_°r
(), 
f
);

504 
	}
}

505 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_doubÀ
(
°d
::
°rög
 c⁄° & 
s
, & 
d
)

507  
	`to_doubÀ
(
s
.
	`c_°r
(), 
d
);

508 
	}
}

511 
«me•a˚
 
	gim∂


513 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
boﬁ
 
‰om_sv
(
°d
::
°rög_võw
 
sv
, 
T
 & 
t
)

515 autÿc⁄° 
	gªs
 = 
°d
::
‰om_ch¨s
(
sv
.
begö
(), sv.
íd
(), 
t
);

516  (
	gªs
.
	gec
 !
°d
::
îrc
::
övÆid_¨gumít
 && 
ªs
.
ec
 !°d::îrc::
ªsu…_out_of_ønge
 &&

517 
ªs
.
±r
 =
sv
.
íd
());

521 
	gãm∂©e
 <
˛ass
 
	gT
> 
ölöe
 
boﬁ
 
	$to_uöt
(
°d
::
°rög_võw
 
sv
, 
T
 & 
i
)

523 
	`°©ic_as£π
(
°d
::
is_unsig√d
<
T
>::
vÆue
, "");

524  
im∂
::
	`‰om_sv
(
sv
, 
i
);

525 
	}
}

527 
ölöe
 
boﬁ
 
	$to_doubÀ
(
°d
::
°rög_võw
 
sv
, & 
d
)

530  
	`to_doubÀ
(
°d
::
	`°rög
(
sv
), 
d
);

531 
	}
}

537 
ölöe
 
	g°d
::
°rög
 
	$to_°rög
(
°d
::
°rög
 c⁄° & 
s
Ë{  s; 
	}
}

538 
ölöe
 
	g°d
::
°rög
 
	$to_°rög
(c⁄° * 
s
Ë{  s; 
	}
}

539 
	gãm∂©e
 <
ty≥«me
 
	gT
>

540 
	g°d
::
°rög
 
	$to_°rög
(
T
 
t
)

542 
°d
::
o°rög°ªam
 
ss
;

543 
ss
 << 
t
;

544  
ss
.
	`°r
();

545 
	}
}

547 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 = 
°d
::
íabÀ_if_t
<°d::
is_öãgøl
<
T
>::
vÆue
>>

548 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_™y
(
°d
::
°rög
 c⁄° & 
s
, 
T
 & 
i
)

550  
öã∫Æ
::
	`ToI¡egî
(
s
.
	`c_°r
(), 
i
);

551 
	}
}

553 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_™y
(
°d
::
°rög
 c⁄° & 
s
, & 
f
Ë{  
	`to_Êﬂt
(s, f); 
	}
}

554 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_™y
(
°d
::
°rög
 c⁄° & 
s
, & 
d
Ë{  
	`to_doubÀ
(s, d); 
	}
}

555 [[
nodisˇrd
]] 
ölöe
 
boﬁ
 
	$to_™y
(
°d
::
°rög
 c⁄° & 
s
, std::°rög & 
ªsu…
)

557 
ªsu…
 = 
s
;

558  
åue
;

559 
	}
}

561 
ölöe
 
	g°d
::
°rög
 
	$to_°rög
(
öt32_t
 
i
Ë{  
°d
::
	`to_°rög
(i); 
	}
}

562 
ölöe
 
	g°d
::
°rög
 
	$to_°rög
(
öt64_t
 
i
Ë{  
°d
::
	`to_°rög
(i); 
	}
}

563 
ölöe
 
	g°d
::
°rög
 
	$to_°rög
(
uöt64_t
 
i
Ë{  
°d
::
	`to_°rög
(i); 
	}
}

566 
	g°d
::
°rög
 
to_°rög_dac
(
d
, 
dac
);

569 
	gãm∂©e
 <
ty≥«me
 
	gIãrT1
,Åy≥«mê
	gIãrT2
>

570 
boﬁ
 
	$SèπsWôh
(
IãrT1
 
beg
, IãrT1 
íd
, 
IãrT2
 
begPªfix
, IãrT2 
ídPªfix
)

572 
beg
 !
íd
 && 
begPªfix
 !
ídPªfix
 && *beg == *begPrefix)

574 ++
beg
;

575 ++
begPªfix
;

577  
begPªfix
 =
ídPªfix
;

578 
	}
}

580 
boﬁ
 
SèπsWôh
(
UniSåög
 c⁄° & 
s
, UniSåög c⁄° & 
p
);

581 
boﬁ
 
SèπsWôh
(
°d
::
°rög
 c⁄° & 
s1
, c⁄° * 
s2
);

582 
boﬁ
 
SèπsWôh
(
°d
::
°rög
 c⁄° & 
s1
, std::
°rög_võw
 
s2
);

583 
boﬁ
 
SèπsWôh
(
°d
::
°rög
 c⁄° & 
s
, std::°rög::
vÆue_ty≥
 
c
);

584 
boﬁ
 
SèπsWôh
(
°d
::
°rög
 c⁄° & 
s1
, std::°rög c⁄° & 
s2
);

586 
boﬁ
 
EndsWôh
(
UniSåög
 c⁄° & 
s1
, UniSåög c⁄° & 
s2
);

587 
boﬁ
 
EndsWôh
(
°d
::
°rög
 c⁄° & 
s1
, c⁄° * 
s2
);

588 
boﬁ
 
EndsWôh
(
°d
::
°rög
 c⁄° & 
s1
, std::
°rög_võw
 
s2
);

589 
boﬁ
 
EndsWôh
(
°d
::
°rög
 c⁄° & 
s
, std::°rög::
vÆue_ty≥
 
c
);

590 
boﬁ
 
EndsWôh
(
°d
::
°rög
 c⁄° & 
s1
, std::°rög c⁄° & 
s2
);

594 
boﬁ
 
E©Pªfix
(
°d
::
°rög
 & 
s
, std::°rög c⁄° & 
¥efix
);

597 
boﬁ
 
E©Suffix
(
°d
::
°rög
 & 
s
, std::°rög c⁄° & 
suffix
);

600 
boﬁ
 
IsHTML
(
°d
::
°rög
 c⁄° & 
utf8
);

603 
boﬁ
 
Almo°EquÆ
(
°d
::
°rög
 c⁄° & 
°r1
, std::°rög c⁄° & 
°r2
, 
size_t
 
mism©chedCou¡
);

605 
	gãm∂©e
 <
ty≥«me
 
	gIãøt‹
,Åy≥«mê
	gDñimôî
>

606 
ty≥«me
 
	g°d
::
ôî©‹_åaôs
<
Iãøt‹
>::
vÆue_ty≥


607 
	$JoöSåögs
(
Iãøt‹
 
begö
, Iãøt‹ 
íd
, 
Dñimôî
 c⁄° & 
dñimôî
)

609 i‡(
begö
 =
íd
)

612 autÿ
ªsu…
 = *
begö
++;

613 
Iãøt‹
 
ô
 = 
begö
; ià!
íd
; ++it)

615 
ªsu…
 +
dñimôî
;

616 
ªsu…
 +*
ô
;

619  
ªsu…
;

620 
	}
}

622 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
,Åy≥«mê
	gDñimôî
>

623 
ty≥«me
 
	gC⁄èöî
::
vÆue_ty≥
 
	$JoöSåögs
(
C⁄èöî
 c⁄° & 
c⁄èöî
, 
Dñimôî
 c⁄° & 
dñimôî
)

625  
	`JoöSåögs
(
	`begö
(
c⁄èöî
), 
	`íd
(c⁄èöî), 
dñimôî
);

626 
	}
}

628 
	gãm∂©e
 <
ty≥«me
 
	gFn
>

629 
	$F‹EachM©ched
(
°d
::
°rög
 c⁄° & 
s
, std::
ªgex
 c⁄° &Ñegex, 
Fn
 && 
‚
)

631 
°d
::
§egex_tokí_ôî©‹
 
	`cur
(
s
.
	`begö
(), s.
	`íd
(), 
ªgex
), 
íd
; 
cur
 !=Énd; ++cur)

632 
	`‚
(*
cur
);

633 
	}
}

644 
	gãm∂©e
 <
ty≥«me
 
	gIãr
>

645 
size_t
 
	$EdôDi°™˚
(
Iãr
 c⁄° & 
b1
, Iã∏c⁄° & 
e1
, Iã∏c⁄° & 
b2
, Iã∏c⁄° & 
e2
)

647 
size_t
 c⁄° 
n
 = 
°d
::
	`di°™˚
(
b1
, 
e1
);

648 
size_t
 c⁄° 
m
 = 
°d
::
	`di°™˚
(
b2
, 
e2
);

650 i‡(
m
 > 
n
)

651  
	`EdôDi°™˚
(
b2
, 
e2
, 
b1
, 
e1
);

655 
°d
::
ve˘‹
<
size_t
> 
	`¥ev
(
m
 + 1);

656 
°d
::
ve˘‹
<
size_t
> 
	`cuº
(
m
 + 1);

657 
size_t
 
j
 = 0; j <
m
; ++j)

658 
¥ev
[
j
] = j;

659 autÿ
ô1
 = 
b1
;

661 
size_t
 
i
 = 1; i <
n
; ++i, ++
ô1
)

663 
cuº
[0] = 
i
;

664 autÿc⁄° & 
c1
 = *
ô1
;

665 autÿ
ô2
 = 
b2
;

666 
size_t
 
j
 = 1; j <
m
; ++j, ++
ô2
)

668 autÿc⁄° & 
c2
 = *
ô2
;

670 
cuº
[
j
] = 
°d
::
	`mö
(cuº[j - 1], 
¥ev
[j]) + 1;

671 
cuº
[
j
] = 
°d
::
	`mö
(cuº[j], 
¥ev
[j - 1] + (
c1
 =
c2
 ? 0 : 1));

673 
¥ev
.
	`sw≠
(
cuº
);

675  
¥ev
[
m
];

676 
	}
}

	@geometry/point2d.hpp

1 #¥agm®
⁄˚


3 
	~"ba£/as£π.hµ
"

4 
	~"ba£/m©h.hµ
"

5 
	~"ba£/m©rix.hµ
"

7 
	~<¨øy
>

8 
	~<cm©h
>

9 
	~<limôs
>

10 
	~<s°ªam
>

11 
	~<ty≥öfo
>

13 
«me•a˚
 
	gm2


15 
	gãm∂©e
 <
ty≥«me
 
	gT
>

16 ˛as†
	cPoöt


18 
	gpublic
:

19 
usög
 
vÆue_ty≥
 = 
T
;

21 
T
 
	gx
, 
	gy
;

23 
Poöt
() = ;

24 
c⁄°ex¥
 
Poöt
(
T
 
x_
, T 
y_
Ë: 
x
(x_), 
y
(y_) {}

26 
	gãm∂©e
 <
ty≥«me
 
	gU
>

27 
ex∂icô
 
c⁄°ex¥
 
Poöt
(Poöt<
U
> c⁄° & 
u
Ë: 
x
(u.x), 
y
(u.y)

31 
	gPoöt
<
	gT
> 
Zîo
() {  Point<T>(0, 0); }

32 
	gPoöt
<
	gT
> 
Max
(Ë{  Poöt<T>(
	g°d
::
numîic_limôs
<
T
>::
max
(), std::numeric_limits<T>::max());}

34 
boﬁ
 
EquÆDxDy
(
Poöt
<
T
> c⁄° & 
p
, T 
ïs
) const

36  ((
Ábs
(
x
 - 
p
.xË< 
	gïs
Ë&& (Ábs(
y
 -Ö.y) <Éps));

39 
T
 
Squ¨edLígth
(
Poöt
<T> c⁄° & 
p
Ëc⁄° {  
	gba£
::
Pow2
(
x
 -Ö.xË+ 
ba£
::Pow2(
y
 -Ö.y); }

40 
Lígth
(
Poöt
<
T
> c⁄° & 
p
Ëc⁄° {  
	g°d
::
sqπ
(
Squ¨edLígth
(p)); }

42 
boﬁ
 
IsAlmo°Zîo
(Ëc⁄° {  
Almo°EquÆULPs
(*
this
, 
Poöt
<
T
>(0, 0)); }

44 
	gPoöt
<
	gT
> 
Move
(
T
 
Àn
, T 
™g
Ëc⁄° {  Poöt<T>(
	gx
 +Üí * 
cos
◊ng), 
	gy
 +Üí * 
sö
(ang)); }

46 
	gPoöt
<
	gT
> 
Move
(
T
 
Àn
, T 
™gSö
, T 
™gCos
) const

48  
	gm2
::
Poöt
<
T
>(
x
 + 
Àn
 * 
™gCos
, 
	gy
 +Üí * 
	g™gSö
);

51 
	gPoöt
<
	gT
> c⁄° & 
	g›î©‹
-=(
Poöt
<
T
> c⁄° & 
a
)

53 
x
 -
a
.x;

54 
	gy
 -
a
.
y
;

55  *
	gthis
;

58 
	gPoöt
<
	gT
> c⁄° & 
	g›î©‹
+=(
Poöt
<
T
> c⁄° & 
a
)

60 
x
 +
a
.x;

61 
	gy
 +
a
.
y
;

62  *
	gthis
;

65 
	gãm∂©e
 <
ty≥«me
 
	gU
>

66 
	gPoöt
<
	gT
> c⁄° & 
	g›î©‹
*=(
U
 c⁄° & 
k
)

68 
x
 = 
°©ic_ˇ°
<
T
>(x * 
k
);

69 
	gy
 = 
°©ic_ˇ°
<
T
>(
y
 * 
k
);

70  *
	gthis
;

73 
	gãm∂©e
 <
ty≥«me
 
	gU
>

74 
	gPoöt
<
	gT
> c⁄° & 
	g›î©‹
=(
Poöt
<
U
> c⁄° & 
a
)

76 
x
 = 
°©ic_ˇ°
<
T
>(
a
.x);

77 
	gy
 = 
°©ic_ˇ°
<
T
>(
a
.
y
);

78  *
	gthis
;

81 
boﬁ
 
	g›î©‹
==(
m2
::
Poöt
<
T
> c⁄° & 
p
Ëc⁄° {  
x
 =p.x && 
y
 ==Ö.y; }

83 
boﬁ
 
	g›î©‹
!=(
m2
::
Poöt
<
T
> c⁄° & 
p
Ëc⁄° {  !(*
this
 ==Ö); }

85 
	gm2
::
Poöt
<
T
> 
›î©‹
+(
m2
::Poöt<T> c⁄° & 
±
Ëc⁄° {  m2::Poöt<T>(
x
 +Öt.x, 
	gy
 + 
	g±
.y); }

87 
	gm2
::
Poöt
<
T
> 
›î©‹
-(
m2
::Poöt<T> c⁄° & 
±
Ëc⁄° {  m2::Poöt<T>(
x
 -Öt.x, 
	gy
 - 
	g±
.y); }

89 
	gm2
::
Poöt
<
T
> 
›î©‹
-(Ëc⁄° {  
m2
::Poöt<T>(-
x
, -
	gy
); }

91 
	gm2
::
Poöt
<
T
> 
›î©‹
*(T 
sˇÀ
Ëc⁄° {  
m2
::Poöt<T>(
x
 * sˇÀ, 
y
 * 
	gsˇÀ
); }

93 
	gm2
::
Poöt
<
T
> c⁄° 
›î©‹
*(
m©h
::
M©rix
<T, 3, 3> c⁄° & 
	gm
) const

95 
	gm2
::
Poöt
<
T
> 
ªs
;

96 
	gªs
.
	gx
 = 
x
 * 
m
(0, 0Ë+ 
y
 * m(1, 0) + m(2, 0);

97 
	gªs
.
	gy
 = 
x
 * 
m
(0, 1Ë+ 
y
 * m(1, 1) + m(2, 1);

98  
	gªs
;

101 
	gm2
::
Poöt
<
T
> 
›î©‹
/(T 
sˇÀ
Ëc⁄° {  
m2
::Poöt<T>(
x
 / sˇÀ, 
	gy
 / 
	gsˇÀ
); }

103 
	gm2
::
Poöt
<
T
> 
Mid
(
m2
::Poöt<T> c⁄° & 
p
) const

105  
m2
::
Poöt
<
T
>((
x
 + 
p
.xË* 0.5, (
	gy
 + 
	gp
.y) * 0.5);

110 
T
 
Squ¨edLígth
(Ëc⁄° {  
x
 * 
	gx
 + 
y
 * 
	gy
; }

111 
Lígth
(Ëc⁄° {  
	g°d
::
sqπ
(
Squ¨edLígth
()); }

113 
	gPoöt
<
	gT
> 
N‹mÆize
() const

115 i‡(
IsAlmo°Zîo
())

116  
Zîo
();

118 c⁄° 
	gÀngth
 = 
this
->
Lígth
();

119  
	gPoöt
<
	gT
>(
	gx
 / 
	gÀngth
, 
	gy
 /Üength);

122 
	g°d
::
∑ú
<
Poöt
<
T
>, 
	gPoöt
<
	gT
>> 
N‹mÆs
(T 
¥ﬁ⁄g©i⁄Fa˘‹
 = 1) const

124 
T
 c⁄° 
¥ﬁ⁄g©edX
 = 
¥ﬁ⁄g©i⁄Fa˘‹
 * 
x
;

125 
T
 c⁄° 
	g¥ﬁ⁄g©edY
 = 
¥ﬁ⁄g©i⁄Fa˘‹
 * 
y
;

126  
	g°d
::
∑ú
<
Poöt
<
T
>, 
	gPoöt
<
	gT
>>(

127 
	gPoöt
<
	gT
>(
	g°©ic_ˇ°
<T>(-
	g¥ﬁ⁄g©edY
), sètic_ˇ°<T>(
	g¥ﬁ⁄g©edX
)),

128 
	gPoöt
<
	gT
>(
	g°©ic_ˇ°
<T>(
	g¥ﬁ⁄g©edY
), sètic_ˇ°<T>(-
	g¥ﬁ⁄g©edX
)));

131 
	gm2
::
Poöt
<
T
> c⁄° & 
›î©‹
*=(
m©h
::
M©rix
<T, 3, 3> c⁄° & 
	gm
)

133 
T
 
	gãmpX
 = 
x
;

134 
	gx
 = 
ãmpX
 * 
m
(0, 0Ë+ 
y
 * m(1, 0) + m(2, 0);

135 
	gy
 = 
ãmpX
 * 
m
(0, 1Ë+ 
y
 * m(1, 1) + m(2, 1);

136  *
	gthis
;

139 
RŸ©e
(
™gÀ
)

141 
T
 
	gcosAngÀ
 = 
cos
(
™gÀ
);

142 
T
 
	gsöAngÀ
 = 
sö
(
™gÀ
);

143 
T
 
	gﬁdX
 = 
x
;

144 
	gx
 = 
cosAngÀ
 * 
ﬁdX
 - 
söAngÀ
 * 
y
;

145 
	gy
 = 
söAngÀ
 * 
ﬁdX
 + 
cosAngÀ
 * 
y
;

149 
Poöt
 
Oπ
(Ëc⁄° {  Poöt(-
y
, 
x
); }

151 
Tønsf‹m
(
m2
::
Poöt
<
T
> c⁄° & 
‹g
, m2::Poöt<T> c⁄° & 
dx
, m2::Poöt<T> c⁄° & 
dy
)

153 
T
 
ﬁdX
 = 
x
;

154 
	gx
 = 
‹g
.
x
 + 
ﬁdX
 * 
dx
.x + 
y
 * 
dy
.x;

155 
	gy
 = 
‹g
.
y
 + 
ﬁdX
 * 
dx
.y + y * 
dy
.y;

159 
	sHash


161 
size_t
 
›î©‹
()(
	gm2
::
Poöt
<
T
> c⁄° & 
p
Ëc⁄° {  
ba£
::
Hash
’.
x
,Ö.
y
); }

165 
usög
 
	gPoötF
 = 
Poöt
<>;

166 
usög
 
	gPoötD
 = 
Poöt
<>;

167 
usög
 
	gPoötU
 = 
Poöt
<
uöt32_t
>;

168 
usög
 
	gPoötU64
 = 
Poöt
<
uöt64_t
>;

169 
usög
 
	gPoötI
 = 
Poöt
<
öt32_t
>;

170 
usög
 
	gPoötI64
 = 
Poöt
<
öt64_t
>;

172 
	gãm∂©e
 <
ty≥«me
 
	gT
>

173 
	gPoöt
<
	gT
> c⁄° 
	g›î©‹
-(Poöt<T> c⁄° & 
	ga
, Poöt<T> c⁄° & 
	gb
)

175  
	gPoöt
<
	gT
>(
	ga
.
	gx
 - 
	gb
.x,á.
	gy
 - b.y);

178 
	gãm∂©e
 <
ty≥«me
 
	gT
>

179 
	gPoöt
<
	gT
> c⁄° 
	g›î©‹
+(Poöt<T> c⁄° & 
	ga
, Poöt<T> c⁄° & 
	gb
)

181  
	gPoöt
<
	gT
>(
	ga
.
	gx
 + 
	gb
.x,á.
	gy
 + b.y);

184 
	gãm∂©e
 <
ty≥«me
 
	gT
>

185 
T
 c⁄° 
DŸProdu˘
(
Poöt
<T> c⁄° & 
a
, Poöt<T> c⁄° & 
b
)

187  
	ga
.
x
 * 
	gb
.
	gx
 +á.
y
 * b.
	gy
;

190 
	gãm∂©e
 <
ty≥«me
 
	gT
>

191 
T
 c⁄° 
CrossProdu˘
(
Poöt
<T> c⁄° & 
a
, Poöt<T> c⁄° & 
b
)

193  
	ga
.
x
 * 
	gb
.
	gy
 -á.
y
 * b.
	gx
;

196 
	gãm∂©e
 <
ty≥«me
 
	gT
>

197 
	gPoöt
<
	gT
> c⁄° 
RŸ©e
(
Poöt
<
T
> c⁄° & 
±
, T 
a
)

199 
	gPoöt
<
	gT
> 
ªs
(
±
);

200 
	gªs
.
RŸ©e
(
a
);

201  
	gªs
;

204 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

205 
	gPoöt
<
	gT
> c⁄° 
Shi·
(
Poöt
<
T
> c⁄° & 
±
, 
U
 c⁄° & 
dx
, U c⁄° & 
dy
)

207  
	gPoöt
<
	gT
>(
	g±
.
	gx
 + 
	gdx
,Öt.
	gy
 + 
	gdy
);

210 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

211 
	gPoöt
<
	gT
> c⁄° 
Shi·
(
Poöt
<
T
> c⁄° & 
±
, Poöt<
U
> c⁄° & 
off£t
)

213  
Shi·
(
±
, 
off£t
.
x
, off£t.
y
);

216 
	gãm∂©e
 <
ty≥«me
 
	gT
>

217 
	gPoöt
<
	gT
> c⁄° 
Flo‹
(
Poöt
<
T
> c⁄° & 
±
)

219 
	gPoöt
<
	gT
> 
	gªs
;

220 
	gªs
.
	gx
 = 
Êo‹
(
±
.
x
);

221 
	gªs
.
	gy
 = 
Êo‹
(
±
.
y
);

222  
	gªs
;

225 
	gãm∂©e
 <
ty≥«me
 
	gT
>

226 
	g°d
::
°rög
 
DebugPröt
(
m2
::
Poöt
<
T
> c⁄° & 
p
)

228 
°d
::
o°rög°ªam
 
out
;

229 
	gout
.
¥ecisi⁄
(20);

230 
	gout
 << "m2::Poöt<" << 
ty≥id
(
T
).
«me
(Ë<< ">(" << 
	gp
.
	gx
 << ", " <<Ö.
	gy
 << ")";

231  
	gout
.
°r
();

234 
	gãm∂©e
 <
ty≥«me
 
	gT
>

235 
boﬁ
 
Almo°EquÆAbs
(
m2
::
Poöt
<
T
> c⁄° & 
a
, m2::Poöt<T> c⁄° & 
b
, 
ïs
)

237  
	gba£
::
Almo°EquÆAbs
(
a
.
x
, 
b
.x, 
ïs
Ë&& ba£::Almo°EquÆAbs◊.
y
, b.y,Éps);

240 
	gãm∂©e
 <
ty≥«me
 
	gT
>

241 
boﬁ
 
Almo°EquÆULPs
(
m2
::
Poöt
<
T
> c⁄° & 
a
, m2::Poöt<T> c⁄° & 
b
, 
maxULPs
 = 256)

243  
ba£
::
Almo°EquÆULPs
(
a
.
x
, 
b
.x, 
maxULPs
Ë&& ba£::Almo°EquÆULPs◊.
y
, b.y, maxULPs);

250 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gTT
,Åy≥«mê
	gPoötT
 = 
Poöt
<
T
>>

251 
GëAºowPoöts
(
PoötT
 c⁄° & 
b
, PoötT c⁄° & 
e
, 
T
 
w
, T 
l
, 
°d
::
¨øy
<
Poöt
<
TT
>, 3> & 
¨r
)

253 
ASSERT
(!
m2
::
Almo°EquÆULPs
(
b
, 
e
), ());

255 
PoötT
 c⁄° 
	gbeVec
 = 
e
 - 
b
;

256 
PoötT
 
	gbeN‹mÆizedVec
 = 
beVec
.
N‹mÆize
();

257 
	g°d
::
∑ú
<
PoötT
, 
	gPoötT
> 
	gbeN‹mVecs
 = 
beN‹mÆizedVec
.
N‹mÆs
(
w
);

259 
	g¨r
[0] = 
e
 + 
beN‹mVecs
.
fú°
;

260 
	g¨r
[1] = 
e
 + 
beN‹mÆizedVec
 * 
l
;

261 
	g¨r
[2] = 
e
 + 
beN‹mVecs
.
£c⁄d
;

267 
	gãm∂©e
 <
ty≥«me
 
	gT
>

268 
	gPoöt
<
	gT
> 
PoötAtSegmít
(
Poöt
<
T
> c⁄° & 
p1
, Poöt<T> c⁄° & 
p2
, T 
shi·FromP1
)

270 
	gPoöt
<
	gT
> 
	gp12
 = 
p2
 - 
p1
;

271 
	gshi·FromP1
 = 
ba£
::
Cœmp
(
shi·FromP1
, 
°©ic_ˇ°
<
T
>(0.0), sètic_ˇ°<T>(
p12
.
Lígth
()));

272  
	gp1
 + 
	gp12
.
N‹mÆize
(Ë* 
	gshi·FromP1
;

275 
	gãm∂©e
 <
˛ass
 
	gTArchive
, cœs†
	gPoötT
>

276 
	gTArchive
 & 
	g›î©‹
>>(TArchivê& 
	g¨
, 
	gm2
::
Poöt
<
PoötT
> & 
±
)

278 
¨
 >> 
±
.
x
;

279 
	g¨
 >> 
	g±
.
	gy
;

280  
	g¨
;

283 
	gãm∂©e
 <
˛ass
 
	gTArchive
, cœs†
	gPoötT
>

284 
	gTArchive
 & 
	g›î©‹
<<(TArchivê& 
	g¨
, 
	gm2
::
Poöt
<
PoötT
> c⁄° & 
±
)

286 
¨
 << 
±
.
x
;

287 
	g¨
 << 
	g±
.
	gy
;

288  
	g¨
;

291 
	gãm∂©e
 <
ty≥«me
 
	gT
>

292 
boﬁ
 
	g›î©‹
<(
	gPoöt
<
	gT
> c⁄° & 
	gl
, Poöt<T> c⁄° & 
	gr
)

294 i‡(
	gl
.
	gx
 !
r
.
x
)

295  
l
.
x
 < 
r
.x;

296  
	gl
.
	gy
 < 
	gr
.y;

300 
«me•a˚
 
	gba£


302 
	gãm∂©e
 <
ty≥«me
 
	gT
>

303 
boﬁ
 
Almo°EquÆULPs
(
m2
::
Poöt
<
T
> c⁄° & 
p1
, m2::Poöt<T> c⁄° & 
p2
, 
maxULPs
 = 256)

305  
m2
::
Almo°EquÆULPs
(
p1
, 
p2
, 
maxULPs
);

308 
	gãm∂©e
 <
ty≥«me
 
	gT
>

309 
boﬁ
 
Almo°EquÆAbs
(
m2
::
Poöt
<
T
> c⁄° & 
p1
, m2::Poöt<T> c⁄° & 
p2
, 
ïs
)

311  
	gm2
::
Almo°EquÆAbs
(
p1
, 
p2
, 
ïs
);

	@platform/platform.hpp

1 #¥agm®
⁄˚


3 
	~"∂©f‹m/b©ãry_åackî.hµ
"

4 
	~"∂©f‹m/cou¡ry_deföes.hµ
"

5 
	~"∂©f‹m/gui_thªad.hµ
"

6 
	~"∂©f‹m/£cuª_°‹age.hµ
"

8 
	~"codög/ªadî.hµ
"

10 
	~"ba£/as£π.hµ
"

11 
	~"ba£/ex˚±i⁄.hµ
"

12 
	~"ba£/èsk_lo›.hµ
"

13 
	~"ba£/thªad_poﬁ_dñayed.hµ
"

15 
	~<c°döt
>

16 
	~<mem‹y
>

17 
	~<°rög
>

18 
	~<utûôy
>

19 
	~<ve˘‹
>

21 
	~"deföes.hµ
"

23 
DECLARE_EXCEPTION
(
FûeAb£¡Ex˚±i⁄
, 
RoŸEx˚±i⁄
);

24 
DECLARE_EXCEPTION
(
FûeSy°emEx˚±i⁄
, 
RoŸEx˚±i⁄
);

26 
«me•a˚
 
	g∂©f‹m


28 
˛ass
 
	gLoˇlCou¡ryFûe
;

31 
˛ass
 
	gPœtf‹m
;

33 
Pœtf‹m
 & 
GëPœtf‹m
();

35 ˛as†
	cPœtf‹m


37 
	mpublic
:

38 
‰õnd
 
˛ass
 
ThªadRu¬î
;

41 ˛as†
	cThªadRu¬î


43 
	mpublic
:

44 
ThªadRu¬î
(Ë{ 
GëPœtf‹m
().
RunThªads
(); }

45 
	mvútuÆ
 ~
ThªadRu¬î
(Ë{ 
GëPœtf‹m
().
ShutdownThªads
(); }

48 
	eEEº‹


50 
	gERR_OK
 = 0,

51 
	gERR_FILE_DOES_NOT_EXIST
,

52 
	gERR_ACCESS_FAILED
,

53 
	gERR_DIRECTORY_NOT_EMPTY
,

54 
	gERR_FILE_ALREADY_EXISTS
,

55 
	gERR_NAME_TOO_LONG
,

56 
	gERR_NOT_A_DIRECTORY
,

57 
	gERR_SYMLINK_LOOP
,

58 
	gERR_IO_ERROR
,

59 
	gERR_UNKNOWN


62 
	eEFûeTy≥


64 
	gFILE_TYPE_UNKNOWN
 = 0x1,

65 
	gFILE_TYPE_REGULAR
 = 0x2,

66 
	gFILE_TYPE_DIRECTORY
 = 0x4

69 ˛as†
	cEC⁄√˘i⁄Ty≥
 : 
uöt8_t


71 
CONNECTION_NONE
,

72 
	gCONNECTION_WIFI
,

73 
	gCONNECTION_WWAN


76 ˛as†
	cCh¨gögSètus
 : 
uöt8_t


78 
Unknown
,

79 
	gPlugged
,

80 
	gU≈lugged


83 ˛as†
	cThªad
 : 
uöt8_t


85 
Fûe
,

86 
	gNëw‹k
,

87 
	gGui
,

88 
	gBackground
,

91 
usög
 
	gTFûesWôhTy≥
 = 
°d
::
ve˘‹
<°d::
∑ú
<°d::
°rög
, 
	gEFûeTy≥
>>;

93 
	g¥Ÿe˘ed
:

95 
°d
::
°rög
 
m_ªsour˚sDú
;

98 
	g°d
::
°rög
 
m_wrôabÀDú
;

100 
	g°d
::
°rög
 
m_tmpDú
;

102 
	g°d
::
°rög
 
m_£âögsDú
;

105 
boﬁ
 
	gm_isTabÀt
;

108 
EEº‹
 
EºnoToEº‹
();

111 
	g∂©f‹m
::
SecuªSt‹age
 
m_£cuªSt‹age
;

113 
	g°d
::
unique_±r
<
ba£
::
TaskLo›
> 
m_guiThªad
;

115 
	g°d
::
unique_±r
<
ba£
::
thªad_poﬁ
::
dñayed
::
ThªadPoﬁ
> 
m_√tw‹kThªad
;

116 
	g°d
::
unique_±r
<
ba£
::
thªad_poﬁ
::
dñayed
::
ThªadPoﬁ
> 
m_fûeThªad
;

117 
	g°d
::
unique_±r
<
ba£
::
thªad_poﬁ
::
dñayed
::
ThªadPoﬁ
> 
m_backgroundThªad
;

119 
	g∂©f‹m
::
B©ãryLevñTøckî
 
m_b©ãryTøckî
;

121 
	gpublic
:

122 
Pœtf‹m
();

123 
	gvútuÆ
 ~
Pœtf‹m
() = ;

125 
boﬁ
 
IsFûeExi°sByFuŒP©h
(
°d
::
°rög
 c⁄° & 
fûeP©h
);

126 
DißbÀBackupF‹Fûe
(
°d
::
°rög
 c⁄° & 
fûeP©h
);

127 
boﬁ
 
RemoveFûeIfExi°s
(
°d
::
°rög
 c⁄° & 
fûeP©h
);

131 
	g°d
::
°rög
 
	$GëCuºítW‹kögDúe˘‹y
(Ë
n€x˚±
;

133 
°d
::
°rög
 c⁄° & 
	$WrôabÀDú
() const

135 
	`ASSERT
(!
m_wrôabÀDú
.
	`em±y
(), ());

136  
m_wrôabÀDú
;

137 
	}
}

139 
SëWrôabÀDúF‹Te°s
(
°d
::
°rög
 c⁄° & 
∑th
);

141 
	g°d
::
°rög
 
	$WrôabÀP©hF‹Fûe
(
°d
::
°rög
 c⁄° & 
fûe
) const;

143 
°d
::
°rög
 
	`RódP©hF‹Fûe
(°d::°rög c⁄° & 
fûe
,

144 
°d
::
°rög
 
£¨chSc›e
 = std::
	$°rög
()) const;

147 
°d
::
°rög
 c⁄° & 
	$Resour˚sDú
() const

149 
	`ASSERT
(!
m_ªsour˚sDú
.
	`em±y
(), ());

150  
m_ªsour˚sDú
;

151 
	}
}

154 
SëResour˚Dú
(
°d
::
°rög
 c⁄° & 
∑th
);

157 [[
nodisˇrd
]] 
EEº‹
 
MkDú
(
°d
::
°rög
 c⁄° & 
dúName
);

161 [[
nodisˇrd
]] 
boﬁ
 
MkDúChecked
(
°d
::
°rög
 c⁄° & 
dúName
);

169 [[
nodisˇrd
]] 
boﬁ
 
MkDúRecursivñy
(
°d
::
°rög
 c⁄° & 
dúName
);

172 
EEº‹
 
RmDú
(
°d
::
°rög
 c⁄° & 
dúName
);

177 
boﬁ
 
RmDúRecursivñy
(
°d
::
°rög
 c⁄° & 
dúName
);

180 
	g°d
::
°rög
 c⁄° & 
	$TmpDú
(Ëc⁄° {  
m_tmpDú
; 
	}
}

182 
	g°d
::
°rög
 
	$TmpP©hF‹Fûe
(
°d
::
°rög
 c⁄° & 
fûe
Ëc⁄° {  
	`TmpDú
(Ë+ fûe; 
	}
}

184 
	g°d
::
°rög
 
	$TmpP©hF‹Fûe
() const;

186 
°d
::
°rög
 
	$TmpP©hF‹Fûe
(
°d
::
°rög
 c⁄° & 
¥efix
, std::°rög c⁄° & 
suffix
) const;

189 
°d
::
°rög
 
	$Te°sD©aP©hF‹Fûe
(
°d
::
°rög
 c⁄° & 
fûe
Ëc⁄° {  
	`RódP©hF‹Fûe
(fûe); 
	}
}

193 
	g°d
::
°rög
 c⁄° & 
	$SëtögsDú
(Ëc⁄° {  
m_£âögsDú
; 
	}
}

194 
SëSëtögsDú
(
°d
::
°rög
 c⁄° & 
∑th
);

196 
	g°d
::
°rög
 
	$SëtögsP©hF‹Fûe
(
°d
::
°rög
 c⁄° & 
fûe
) const;

203 
°d
::
unique_±r
<
ModñRódî
> 
	`GëRódî
(°d::
°rög
 c⁄° & 
fûe
,

204 
°d
::
°rög
 
£¨chSc›e
 = std::
	$°rög
()) const;

208 
usög
 
FûesLi°
 = 
°d
::
ve˘‹
<°d::
°rög
>;

213 
	`GëFûesByExt
(
°d
::
°rög
 c⁄° & 
dúe˘‹y
, std::°rög c⁄° & 
ext
,

214 
FûesLi°
 & 
outFûes
);

215 
	`GëFûesByRegExp
(
°d
::
°rög
 c⁄° & 
dúe˘‹y
, std::°rög c⁄° & 
ªgexp
,

216 
FûesLi°
 & 
outFûes
);

219 
	`GëFûesByTy≥
(
°d
::
°rög
 c⁄° & 
dúe˘‹y
, 
ty≥Mask
,

220 
TFûesWôhTy≥
 & 
outFûes
);

222 
	`GëFûesRecursivñy
(
°d
::
°rög
 c⁄° & 
dúe˘‹y
, 
FûesLi°
 & 
fûesLi°
);

224 
boﬁ
 
	`IsDúe˘‹yEm±y
(
°d
::
°rög
 c⁄° & 
dúe˘‹y
);

226 
boﬁ
 
	`IsDúe˘‹y
(
°d
::
°rög
 c⁄° & 
∑th
);

228 
EEº‹
 
	`GëFûeTy≥
(
°d
::
°rög
 c⁄° & 
∑th
, 
EFûeTy≥
 & 
ty≥
);

232 
boﬁ
 
	$GëFûeSizeByName
(
°d
::
°rög
 c⁄° & 
fûeName
, 
uöt64_t
 & 
size
) const;

235 
boﬁ
 
	`GëFûeSizeByFuŒP©h
(
°d
::
°rög
 c⁄° & 
fûeP©h
, 
uöt64_t
 & 
size
);

239 
time_t
 
	`GëFûeCª©i⁄Time
(
°d
::
°rög
 c⁄° & 
∑th
);

242 
	eTSt‹ageSètus


244 
STORAGE_OK
 = 0,

245 
STORAGE_DISCONNECTED
,

246 
NOT_ENOUGH_SPACE


247 
	}
};

248 
TSt‹ageSètus
 
	$GëWrôabÀSt‹ageSètus
(
uöt64_t
 
√ededSize
) const;

252 
	$CpuC‹es
() const;

254 
	$GëF⁄tNames
(
FûesLi°
 & 
ªs
) const;

257 
	$VideoMem‹yLimô
() const;

259 
	$PªCachögDïth
() const;

261 
°d
::
°rög
 
	$Devi˚Name
() const;

263 
°d
::
°rög
 
	$Devi˚Modñ
() const;

266 
°d
::
°rög
 
	$Vîsi⁄
() const;

269 
öt32_t
 
	$I¡Vîsi⁄
() const;

272 
°d
::
°rög
 
	$MëaSîvîUæ
() const;

275 
°d
::
°rög
 
	$DeÁu…UæsJSON
() const;

277 
boﬁ
 
	$IsTabÀt
(Ëc⁄° {  
m_isTabÀt
; 
	}
}

282 
	g°d
::
°rög
 
	$GëMem‹yInfo
() const;

284 
EC⁄√˘i⁄Ty≥
 
	`C⁄√˘i⁄Sètus
();

285 
boﬁ
 
	$IsC⁄√˘ed
(Ë{  
	`C⁄√˘i⁄Sètus
(Ë!
EC⁄√˘i⁄Ty≥
::
CONNECTION_NONE
; 
	}
}

287 
Ch¨gögSètus
 
GëCh¨gögSètus
();

291 
uöt8_t
 
GëB©ãryLevñ
();

293 
	$SëupMósuªmítSy°em
() const;

295 
∂©f‹m
::
SecuªSt‹age
 & 
	$GëSecuªSt‹age
(Ë{  
m_£cuªSt‹age
; 
	}
}

301 
	gãm∂©e
 <
ty≥«me
 
	gTask
>

302 
	gba£
::
TaskLo›
::
PushResu…
 
	$RunTask
(
Thªad
 
thªad
, 
Task
 && 
èsk
)

304 
	`ASSERT
(
m_√tw‹kThªad
 && 
m_fûeThªad
 && 
m_backgroundThªad
, ());

305 
thªad
)

307 
Thªad
::
Fûe
:  
m_fûeThªad
->
	`Push
(
°d
::
f‹w¨d
<
Task
>(
èsk
));

308 
Thªad
::
Nëw‹k
:  
m_√tw‹kThªad
->
	`Push
(
°d
::
f‹w¨d
<
Task
>(
èsk
));

309 
Thªad
::
Gui
:  
m_guiThªad
->
	`Push
(
°d
::
f‹w¨d
<
Task
>(
èsk
));

310 
Thªad
::
Background
:  
m_backgroundThªad
->
	`Push
(
°d
::
f‹w¨d
<
Task
>(
èsk
));

312 
	`UNREACHABLE
();

313 
	}
}

315 
	gãm∂©e
 <
ty≥«me
 
	gTask
>

316 
	gba£
::
TaskLo›
::
PushResu…
 
	$RunDñayedTask
(

317 
Thªad
 
thªad
, 
ba£
::
thªad_poﬁ
::
dñayed
::
ThªadPoﬁ
::
Duøti⁄
 c⁄° & 
dñay
, 
Task
 && 
èsk
)

319 
	`ASSERT
(
m_√tw‹kThªad
 && 
m_fûeThªad
 && 
m_backgroundThªad
, ());

320 
thªad
)

322 
Thªad
::
Fûe
:  
m_fûeThªad
->
	`PushDñayed
(
dñay
, 
°d
::
f‹w¨d
<
Task
>(
èsk
));

323 
Thªad
::
Nëw‹k
:  
m_√tw‹kThªad
->
	`PushDñayed
(
dñay
, 
°d
::
f‹w¨d
<
Task
>(
èsk
));

324 
Thªad
::
Gui
:

325 
	`CHECK
(
Ál£
, ("DelayedÅasks for guiÅhreadáreÇot supported yet"));

327 
Thªad
::
Background
:

328  
m_backgroundThªad
->
	`PushDñayed
(
dñay
, 
°d
::
f‹w¨d
<
Task
>(
èsk
));

330 
	`UNREACHABLE
();

331 
	}
}

333 
C™˚lTask
(
Thªad
 
thªad
, 
ba£
::
TaskLo›
::
TaskId
 
id
);

336 
SëGuiThªad
(
°d
::
unique_±r
<
ba£
::
TaskLo›
> 
guiThªad
);

338 
	g∂©f‹m
::
B©ãryLevñTøckî
 & 
	$GëB©ãryTøckî
(Ë{  
m_b©ãryTøckî
; 
	}
}

340 
	g¥iv©e
:

341 
RunThªads
();

342 
ShutdownThªads
();

344 
	$GëSy°emF⁄tNames
(
FûesLi°
 & 
ªs
) const;

345 
	}
};

347 
	g°d
::
°rög
 
DebugPröt
(
Pœtf‹m
::
EEº‹
 
îr
);

348 
	g°d
::
°rög
 
DebugPröt
(
Pœtf‹m
::
Ch¨gögSètus
 
°©us
);

	@testing/testing.hpp

1 #¥agm®
⁄˚


3 
	~"ã°ög/ã°ªgi°î.hµ
"

5 
	~"ba£/ex˚±i⁄.hµ
"

6 
	~"ba£/loggög.hµ
"

7 
	~"ba£/m©h.hµ
"

8 
	~"ba£/§c_poöt.hµ
"

10 
	~<°rög
>

15 
	#UNIT_TEST
(
«me
) \

16 
UnôTe°_
##
	`«me
(); \

17 
Te°Regi°î
 
g_ã°Regi°î_
##
	`«me
(#«me, 
__FILE__
, &
UnôTe°_
##
«me
); \

18 
UnôTe°_
##
	`«me
()

	)

20 
	#UNIT_CLASS_TEST
(
CLASS
, 
NAME
) \

21 
UnôCœss_
##
CLASS
##
_
##
NAME
 : 
public
 CLASS \

23 
public
: \

24 
	`NAME
(); \

26 
	`UNIT_TEST
(
CLASS
##
_
##
NAME
) \

28 
UnôCœss_
##
CLASS
##
_
##
NAME
 
ö°™˚
; \

29 
ö°™˚
.
	`NAME
(); \

31 
UnôCœss_
##
CLASS
##
_
##
NAME
::
	`NAME
()

	)

33 
DECLARE_EXCEPTION
(
Te°FaûuªEx˚±i⁄
, 
RoŸEx˚±i⁄
);

35 
«me•a˚
 
	gba£


37 [[
n‹ëu∫
]] 
ölöe
 
OnTe°Faûed
(
SrcPoöt
 c⁄° & 
§cPoöt
, 
°d
::
°rög
 c⁄° & 
msg
)

39 
LOG
(
LINFO
, ("FAILED"));

40 
LOG
(
LINFO
, (::
DebugPröt
(
§cPoöt
.
FûeName
()Ë+ ":" + ::DebugPröt(§cPoöt.
Löe
()), 
msg
));

41 
MYTHROW
(
Te°FaûuªEx˚±i⁄
, (
§cPoöt
.
FûeName
(), srcPoöt.
Löe
(), 
msg
));

45 
«me•a˚
 
	gã°ög


47 
RunEvítLo›
();

48 
St›EvítLo›
();

50 
Waô
();

51 
NŸify
();

55 
	sComm™dLöeO±i⁄s


57 
Comm™dLöeO±i⁄s
() = ;

59 c⁄° * 
	mm_fûãrRegExp
 = 
nuŒ±r
;

60 c⁄° * 
	mm_suµªssRegExp
 = 
nuŒ±r
;

61 c⁄° * 
	mm_d©aP©h
 = 
nuŒ±r
;

62 c⁄° * 
	mm_ªsour˚P©h
 = 
nuŒ±r
;

64 
boﬁ
 
	mm_hñp
 = 
Ál£
;

65 
boﬁ
 
	mm_li°Te°s
 = 
Ál£
;

67 
Comm™dLöeO±i⁄s
 c⁄° & 
GëTe°ögO±i⁄s
();

69 
	#TEST
(
X
, 
msg
) \

72 i‡(
X
) \

77 ::
ba£
::
	`OnTe°Faûed
(
	`SRC
(), ::ba£::
	`Mesßge
("TEST(" #X ")", ::ba£::
Mesßge
 
msg
)); \

79 } 0)

	)

81 
	#TEST_EQUAL
(
X
, 
Y
, 
msg
) \

84 i‡((
X
Ë=(
Y
)) \

89 ::
ba£
::
	`OnTe°Faûed
(
	`SRC
(), ::ba£::
	`Mesßge
("TEST(" #X " =" #Y ")", ::ba£::Mesßge(
X
, 
Y
), \

90 ::
ba£
::
Mesßge
 
msg
)); \

92 } 0)

	)

94 
	#TEST_NOT_EQUAL
(
X
, 
Y
, 
msg
) \

97 i‡((
X
Ë!(
Y
)) \

102 ::
ba£
::
	`OnTe°Faûed
(
	`SRC
(), ::ba£::
	`Mesßge
("TEST(" #X " !" #Y ")", ::ba£::Mesßge(
X
, 
Y
), \

103 ::
ba£
::
Mesßge
 
msg
)); \

105 } 0)

	)

107 
	#TEST_LESS
(
X
, 
Y
, 
msg
) \

110 i‡((
X
Ë< (
Y
)) \

115 ::
ba£
::
	`OnTe°Faûed
(
	`SRC
(), ::ba£::
	`Mesßge
("TEST(" #X " < " #Y ")", ::ba£::Mesßge(
X
, 
Y
), \

116 ::
ba£
::
Mesßge
 
msg
)); \

118 } 0)

	)

120 
	#TEST_LESS_OR_EQUAL
(
X
, 
Y
, 
msg
) \

123 i‡((
X
Ë<(
Y
)) \

128 ::
ba£
::
	`OnTe°Faûed
(
	`SRC
(), ::ba£::
	`Mesßge
("TEST(" #X " <" #Y ")", ::ba£::Mesßge(
X
, 
Y
), \

129 ::
ba£
::
Mesßge
 
msg
)); \

131 } 0)

	)

133 
	#TEST_GREATER
(
X
, 
Y
, 
msg
) \

136 i‡((
X
Ë> (
Y
)) \

141 ::
ba£
::
	`OnTe°Faûed
(
	`SRC
(), ::ba£::
	`Mesßge
("TEST(" #X " > " #Y ")", ::ba£::Mesßge(
X
, 
Y
), \

142 ::
ba£
::
Mesßge
 
msg
)); \

144 } 0)

	)

146 
	#TEST_GREATER_OR_EQUAL
(
X
, 
Y
, 
msg
) \

149 i‡((
X
Ë>(
Y
)) \

154 ::
ba£
::
	`OnTe°Faûed
(
	`SRC
(), ::ba£::
	`Mesßge
("TEST(" #X " >" #Y ")", ::ba£::Mesßge(
X
, 
Y
), \

155 ::
ba£
::
Mesßge
 
msg
)); \

157 } 0)

	)

159 
	#TEST_ALMOST_EQUAL_ULPS
(
X
, 
Y
, 
msg
) \

162 i‡(::
ba£
::
	`Almo°EquÆULPs
(
X
, 
Y
)) \

167 ::
ba£
::
	`OnTe°Faûed
(
	`SRC
(), ::ba£::
	`Mesßge
("TEST(base::AlmostEqualULPs(" #X ", " #Y ")", \

168 ::
ba£
::
	`Mesßge
(
X
, 
Y
), ::ba£::
Mesßge
 
msg
)); \

170 } 0)

	)

172 
	#TEST_NOT_ALMOST_EQUAL_ULPS
(
X
, 
Y
, 
msg
) \

175 i‡(!::
ba£
::
	`Almo°EquÆULPs
(
X
, 
Y
)) \

180 ::
ba£
::
	`OnTe°Faûed
(
	`SRC
(), ::ba£::
	`Mesßge
("TEST(!base::AlmostEqualULPs(" #X ", " #Y ")", \

181 ::
ba£
::
	`Mesßge
(
X
, 
Y
), ::ba£::
Mesßge
 
msg
)); \

183 } 0)

	)

185 
	#TEST_ALMOST_EQUAL_ABS
(
X
, 
Y
, 
ïs
, 
msg
) \

188 i‡(::
ba£
::
	`Almo°EquÆAbs
(
X
, 
Y
, 
ïs
)) \

193 ::
ba£
::
	`OnTe°Faûed
(
	`SRC
(), \

194 ::
ba£
::
	`Mesßge
("TEST(!base::AlmostEqualAbs(" #X ", " #Y ", " #eps ")", \

195 ::
ba£
::
	`Mesßge
(
X
, 
Y
, 
ïs
), ::ba£::
Mesßge
 
msg
)); \

197 } 0)

	)

200 
	#TEST_THROW
(
X
, 
ex˚±i⁄
, 
msg
) \

203 
boﬁ
 
ex≥˘ed_ex˚±i⁄
 = 
Ál£
; \

204 
åy
 \

206 
X
; \

208 
	`ˇtch
 (
°d
::
ex˚±i⁄
 const &) \

210 
ex≥˘ed_ex˚±i⁄
 = 
åue
; \

212 
	`ˇtch
 (...) \

214 ::
ba£
::
	`OnTe°Faûed
( \

215 
	`SRC
(), ::
ba£
::
	`Mesßge
("U√x≥˘edÉx˚±i⁄áàTEST(" #X ")", ::ba£::
Mesßge
 
msg
)); \

217 i‡(!
ex≥˘ed_ex˚±i⁄
) \

218 ::
ba£
::
	`OnTe°Faûed
(
	`SRC
(), ::ba£::
	`Mesßge
("ExpectedÉxception " #exception \

220 ::
ba£
::
Mesßge
 
msg
)); \

221 } 0)

	)

223 
	#TEST_NO_THROW
(
X
, 
msg
) \

226 
åy
 \

228 
X
; \

230 
	`ˇtch
 (
RoŸEx˚±i⁄
 c⁄° & 
ex
) \

232 ::
ba£
::
	`OnTe°Faûed
(
	`SRC
(), \

233 ::
ba£
::
	`Mesßge
("UnexpectedÉxceptionát TEST(" #X ")", \

234 ::
ba£
::
	`Mesßge
(
ex
.
	`Msg
()), ::ba£::
Mesßge
 
msg
)); \

236 
	`ˇtch
 (...) \

238 ::
ba£
::
	`OnTe°Faûed
( \

239 
	`SRC
(), ::
ba£
::
	`Mesßge
("U√x≥˘edÉx˚±i⁄áàTEST(" #X ")", ::ba£::
Mesßge
 
msg
)); \

241 } 0)

	)

243 
	#TEST_ANY_THROW
(
X
, 
msg
) \

246 
boﬁ
 
was_ex˚±i⁄
 = 
Ál£
; \

247 
åy
 \

249 
X
; \

251 
	`ˇtch
 (...) \

253 
was_ex˚±i⁄
 = 
åue
; \

255 i‡(!
was_ex˚±i⁄
) \

256 ::
ba£
::
	`OnTe°Faûed
(
	`SRC
(), ::ba£::
	`Mesßge
("NoÉxceptions wereÅhrown in TEST(" #X ")", \

257 ::
ba£
::
Mesßge
 
msg
)); \

258 } 0)

	)

	@3party/utfcpp/source/utf8/unchecked.h

28 #i‚de‡
UTF8_FOR_CPP_UNCHECKED_H_2675DCD0_9480_4c0c_B92A_CC14C027B731


29 
	#UTF8_FOR_CPP_UNCHECKED_H_2675DCD0_9480_4c0c_B92A_CC14C027B731


	)

31 
	~"c‹e.h
"

33 
«me•a˚
 
	gutf8


35 
«me•a˚
 
	gunchecked


37 
	gãm∂©e
 <
ty≥«me
 
	go˘ë_ôî©‹
>

38 
o˘ë_ôî©‹
 
≠≥nd
(
uöt32_t
 
˝
, o˘ë_ôî©‹ 
ªsu…
)

40 i‡(
	g˝
 < 0x80)

41 *(
	gªsu…
++Ë
°©ic_ˇ°
<
uöt8_t
>(
˝
);

42 i‡(
	g˝
 < 0x800) {

43 *(
	gªsu…
++Ë
°©ic_ˇ°
<
uöt8_t
>((
˝
 >> 6) | 0xc0);

44 *(
	gªsu…
++Ë
°©ic_ˇ°
<
uöt8_t
>((
˝
 & 0x3f) | 0x80);

46 i‡(
	g˝
 < 0x10000) {

47 *(
	gªsu…
++Ë
°©ic_ˇ°
<
uöt8_t
>((
˝
 >> 12) | 0xe0);

48 *(
	gªsu…
++Ë
°©ic_ˇ°
<
uöt8_t
>(((
˝
 >> 6) & 0x3f) | 0x80);

49 *(
	gªsu…
++Ë
°©ic_ˇ°
<
uöt8_t
>((
˝
 & 0x3f) | 0x80);

52 *(
	gªsu…
++Ë
°©ic_ˇ°
<
uöt8_t
>((
˝
 >> 18) | 0xf0);

53 *(
	gªsu…
++Ë
°©ic_ˇ°
<
uöt8_t
>(((
˝
 >> 12) & 0x3f)| 0x80);

54 *(
	gªsu…
++Ë
°©ic_ˇ°
<
uöt8_t
>(((
˝
 >> 6) & 0x3f) | 0x80);

55 *(
	gªsu…
++Ë
°©ic_ˇ°
<
uöt8_t
>((
˝
 & 0x3f) | 0x80);

57  
	gªsu…
;

60 
	gãm∂©e
 <
ty≥«me
 
	go˘ë_ôî©‹
,Åy≥«mê
	gouçut_ôî©‹
>

61 
ouçut_ôî©‹
 
ª∂a˚_övÆid
(
o˘ë_ôî©‹
 
°¨t
, o˘ë_ôî©‹ 
íd
, ouçut_ôî©‹ 
out
, 
uöt32_t
 
ª∂a˚mít
)

63 
	g°¨t
 !
íd
) {

64 
o˘ë_ôî©‹
 
£quí˚_°¨t
 = 
°¨t
;

65 
	göã∫Æ
::
utf_îr‹
 
îr_code
 = 
utf8
::
öã∫Æ
::
vÆid©e_√xt
(
°¨t
, 
íd
);

66 
	gîr_code
) {

67 
	göã∫Æ
::
UTF8_OK
 :

68 
o˘ë_ôî©‹
 
ô
 = 
£quí˚_°¨t
; 
	gô
 !
°¨t
; ++it)

69 *
	gout
++ = *
ô
;

71 
	göã∫Æ
::
NOT_ENOUGH_ROOM
:

72 
out
 = 
utf8
::
unchecked
::
≠≥nd
 (
ª∂a˚mít
, out);

73 
	g°¨t
 = 
íd
;

75 
	göã∫Æ
::
INVALID_LEAD
:

76 
out
 = 
utf8
::
unchecked
::
≠≥nd
 (
ª∂a˚mít
, out);

77 ++
	g°¨t
;

79 
	göã∫Æ
::
INCOMPLETE_SEQUENCE
:

80 
öã∫Æ
::
OVERLONG_SEQUENCE
:

81 
öã∫Æ
::
INVALID_CODE_POINT
:

82 
out
 = 
utf8
::
unchecked
::
≠≥nd
 (
ª∂a˚mít
, out);

83 ++
	g°¨t
;

85 
	g°¨t
 !
íd
 && 
utf8
::
öã∫Æ
::
is_åaû
(*
°¨t
))

86 ++
°¨t
;

90  
	gout
;

93 
	gãm∂©e
 <
ty≥«me
 
	go˘ë_ôî©‹
,Åy≥«mê
	gouçut_ôî©‹
>

94 
ölöe
 
ouçut_ôî©‹
 
ª∂a˚_övÆid
(
o˘ë_ôî©‹
 
°¨t
, o˘ë_ôî©‹ 
íd
, ouçut_ôî©‹ 
out
)

96 c⁄° 
uöt32_t
 
	gª∂a˚mít_m¨kî
 = 
utf8
::
öã∫Æ
::
mask16
(0xfffd);

97  
	gutf8
::
unchecked
::
ª∂a˚_övÆid
(
°¨t
, 
íd
, 
out
, 
ª∂a˚mít_m¨kî
);

100 
	gãm∂©e
 <
ty≥«me
 
	go˘ë_ôî©‹
>

101 
uöt32_t
 
√xt
(
o˘ë_ôî©‹
& 
ô
)

103 
uöt32_t
 
	g˝
 = 
utf8
::
öã∫Æ
::
mask8
(*
ô
);

104 
ty≥«me
 
	g°d
::
ôî©‹_åaôs
<
o˘ë_ôî©‹
>::
dif„ªn˚_ty≥
 
Àngth
 = 
utf8
::
öã∫Æ
::
£quí˚_Àngth
(
ô
);

105 
	gÀngth
) {

109 
ô
++;

110 
	g˝
 = ((
˝
 << 6Ë& 0x7ffË+ ((*
ô
) & 0x3f);

113 ++
ô
;

114 
	g˝
 = ((
˝
 << 12Ë& 0xffffË+ ((
utf8
::
öã∫Æ
::
mask8
(*
ô
) << 6) & 0xfff);

115 ++
	gô
;

116 
	g˝
 +(*
ô
) & 0x3f;

119 ++
ô
;

120 
	g˝
 = ((
˝
 << 18Ë& 0x1fffffË+ ((
utf8
::
öã∫Æ
::
mask8
(*
ô
) << 12) & 0x3ffff);

121 ++
	gô
;

122 
	g˝
 +(
utf8
::
öã∫Æ
::
mask8
(*
ô
) << 6) & 0xfff;

123 ++
	gô
;

124 
	g˝
 +(*
ô
) & 0x3f;

127 ++
	gô
;

128  
	g˝
;

131 
	gãm∂©e
 <
ty≥«me
 
	go˘ë_ôî©‹
>

132 
uöt32_t
 
≥ek_√xt
(
o˘ë_ôî©‹
 
ô
)

134  
	gutf8
::
unchecked
::
√xt
(
ô
);

137 
	gãm∂©e
 <
ty≥«me
 
	go˘ë_ôî©‹
>

138 
uöt32_t
 
¥i‹
(
o˘ë_ôî©‹
& 
ô
)

140 
	gutf8
::
öã∫Æ
::
is_åaû
(*(--
ô
))) ;

141 
o˘ë_ôî©‹
 
	gãmp
 = 
ô
;

142  
	gutf8
::
unchecked
::
√xt
(
ãmp
);

145 
	gãm∂©e
 <
ty≥«me
 
	go˘ë_ôî©‹
,Åy≥«mê
	gdi°™˚_ty≥
>

146 
adv™˚
 (
o˘ë_ôî©‹
& 
ô
, 
di°™˚_ty≥
 
n
)

148 c⁄° 
di°™˚_ty≥
 
zîo
(0);

149 i‡(
	gn
 < 
	gzîo
) {

151 
di°™˚_ty≥
 
	gi
 = 
n
; i < 
	gzîo
; ++i)

152 
	gutf8
::
unchecked
::
¥i‹
(
ô
);

155 
di°™˚_ty≥
 
	gi
 = 
zîo
; i < 
	gn
; ++i)

156 
	gutf8
::
unchecked
::
√xt
(
ô
);

160 
	gãm∂©e
 <
ty≥«me
 
	go˘ë_ôî©‹
>

161 
ty≥«me
 
	g°d
::
ôî©‹_åaôs
<
o˘ë_ôî©‹
>::
dif„ªn˚_ty≥


162 
di°™˚
 (
o˘ë_ôî©‹
 
fú°
, o˘ë_ôî©‹ 
œ°
)

164 
ty≥«me
 
	g°d
::
ôî©‹_åaôs
<
o˘ë_ôî©‹
>::
dif„ªn˚_ty≥
 
di°
;

165 
	gdi°
 = 0; 
	gfú°
 < 
	gœ°
; ++dist)

166 
	gutf8
::
unchecked
::
√xt
(
fú°
);

167  
	gdi°
;

170 
	gãm∂©e
 <
ty≥«me
 
	gu16bô_ôî©‹
,Åy≥«mê
	go˘ë_ôî©‹
>

171 
o˘ë_ôî©‹
 
utf16to8
 (
u16bô_ôî©‹
 
°¨t
, u16bô_ôî©‹ 
íd
, o˘ë_ôî©‹ 
ªsu…
)

173 
	g°¨t
 !
íd
) {

174 
uöt32_t
 
˝
 = 
utf8
::
öã∫Æ
::
mask16
(*
°¨t
++);

176 i‡(
	gutf8
::
öã∫Æ
::
is_Àad_suºog©e
(
˝
)) {

177 
uöt32_t
 
åaû_suºog©e
 = 
utf8
::
öã∫Æ
::
mask16
(*
°¨t
++);

178 
	g˝
 = (
˝
 << 10Ë+ 
åaû_suºog©e
 + 
öã∫Æ
::
SURROGATE_OFFSET
;

180 
	gªsu…
 = 
utf8
::
unchecked
::
≠≥nd
(
˝
, 
ªsu…
);

182  
	gªsu…
;

185 
	gãm∂©e
 <
ty≥«me
 
	gu16bô_ôî©‹
,Åy≥«mê
	go˘ë_ôî©‹
>

186 
u16bô_ôî©‹
 
utf8to16
 (
o˘ë_ôî©‹
 
°¨t
, o˘ë_ôî©‹ 
íd
, u16bô_ôî©‹ 
ªsu…
)

188 
	g°¨t
 < 
	gíd
) {

189 
uöt32_t
 
	g˝
 = 
utf8
::
unchecked
::
√xt
(
°¨t
);

190 i‡(
	g˝
 > 0xffff) {

191 *
	gªsu…
++ = 
°©ic_ˇ°
<
uöt16_t
>((
˝
 >> 10Ë+ 
öã∫Æ
::
LEAD_OFFSET
);

192 *
	gªsu…
++ = 
°©ic_ˇ°
<
uöt16_t
>((
˝
 & 0x3ffË+ 
öã∫Æ
::
TRAIL_SURROGATE_MIN
);

195 *
	gªsu…
++ = 
°©ic_ˇ°
<
uöt16_t
>(
˝
);

197  
	gªsu…
;

200 
	gãm∂©e
 <
ty≥«me
 
	go˘ë_ôî©‹
,Åy≥«mê
	gu32bô_ôî©‹
>

201 
o˘ë_ôî©‹
 
utf32to8
 (
u32bô_ôî©‹
 
°¨t
, u32bô_ôî©‹ 
íd
, o˘ë_ôî©‹ 
ªsu…
)

203 
	g°¨t
 !
íd
)

204 
ªsu…
 = 
utf8
::
unchecked
::
≠≥nd
(*(
°¨t
++),Ñesult);

206  
	gªsu…
;

209 
	gãm∂©e
 <
ty≥«me
 
	go˘ë_ôî©‹
,Åy≥«mê
	gu32bô_ôî©‹
>

210 
u32bô_ôî©‹
 
utf8to32
 (
o˘ë_ôî©‹
 
°¨t
, o˘ë_ôî©‹ 
íd
, u32bô_ôî©‹ 
ªsu…
)

212 
	g°¨t
 < 
	gíd
)

213 (*
	gªsu…
++Ë
utf8
::
unchecked
::
√xt
(
°¨t
);

215  
	gªsu…
;

219 
	gãm∂©e
 <
ty≥«me
 
	go˘ë_ôî©‹
>

220 ˛as†
	côî©‹
 {

221 
o˘ë_ôî©‹
 
	gô
;

222 
	gpublic
:

223 
uöt32_t
 
	tvÆue_ty≥
;

224 
uöt32_t
* 
	tpoöãr
;

225 
	guöt32_t
& 
	tª„ªn˚
;

226 
	g°d
::
	t±rdiff_t
 
	tdif„ªn˚_ty≥
;

227 
	g°d
::
	tbidúe˘i⁄Æ_ôî©‹_èg
 
	tôî©‹_ˇãg‹y
;

228 
ôî©‹
 () {}

229 
ex∂icô
 
ôî©‹
 (c⁄° 
o˘ë_ôî©‹
& 
o˘ë_ô
): 
ô
(octet_it) {}

231 
o˘ë_ôî©‹
 
ba£
 (Ëc⁄° {  
ô
; }

232 
uöt32_t
 
	g›î©‹
 * () const

234 
o˘ë_ôî©‹
 
	gãmp
 = 
ô
;

235  
	gutf8
::
unchecked
::
√xt
(
ãmp
);

237 
boﬁ
 
	g›î©‹
 =(c⁄° 
ôî©‹
& 
rhs
) const

239  (
ô
 =
rhs
.it);

241 
boﬁ
 
	g›î©‹
 !(c⁄° 
ôî©‹
& 
rhs
) const

243  !(
›î©‹
 =(
rhs
));

245 
	gôî©‹
& 
	g›î©‹
 ++ ()

247 ::
°d
::
adv™˚
(
ô
, 
utf8
::
öã∫Æ
::
£quí˚_Àngth
(it));

248  *
	gthis
;

250 
ôî©‹
 
	g›î©‹
 ++ ()

252 
ôî©‹
 
	gãmp
 = *
this
;

253 ::
°d
::
adv™˚
(
ô
, 
utf8
::
öã∫Æ
::
£quí˚_Àngth
(it));

254  
	gãmp
;

256 
	gôî©‹
& 
	g›î©‹
 -- ()

258 
	gutf8
::
unchecked
::
¥i‹
(
ô
);

259  *
	gthis
;

261 
ôî©‹
 
	g›î©‹
 -- ()

263 
ôî©‹
 
	gãmp
 = *
this
;

264 
	gutf8
::
unchecked
::
¥i‹
(
ô
);

265  
	gãmp
;

	@base/base.hpp

1 #¥agm®
⁄˚


3 
	~<c°döt
>

5 #i‡
deföed
(
DEBUG
Ë|| deföed(
_DEBUG
Ë|| deföed(
NRELEASE
)

6 
	#MY_DEBUG_DEFINED
 1

	)

8 
	#MY_DEBUG_DEFINED
 0

	)

11 #i‡
deföed
(
RELEASE
Ë|| deföed(
_RELEASE
Ë|| deföed(
NDEBUG
Ë|| deföed(
_NDEBUG
)

12 
	#MY_RELEASE_DEFINED
 1

	)

14 
	#MY_RELEASE_DEFINED
 0

	)

17 
°©ic_as£π
(
MY_DEBUG_DEFINED
 ^ 
MY_RELEASE_DEFINED
, "Either Debug or Release should be defined, butÇot both.");

20 #i‡!
MY_RELEASE_DEFINED


21 #i‚de‡
DEBUG


22 
	#DEBUG
 1

	)

26 #ifde‡
DEBUG


29 
	#IF_DEBUG_ELSE
(
a
, 
b
Ë◊)

	)

31 
	#IF_DEBUG_ELSE
(
a
, 
b
Ë(b)

	)

35 
	~"°d/èrgë_os.hµ
"

	@base/buffer_vector.hpp

1 #¥agm®
⁄˚


2 
	~"ba£/as£π.hµ
"

3 
	~"ba£/checked_ˇ°.hµ
"

5 
	~<Æg‹ôhm
>

6 
	~<ôî©‹
>

7 
	~<ve˘‹
>

11 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
	$Sw≠
(
T
 & 
a
, T & 
b
)

13 
usög
 
°d
::
sw≠
;

14 
	`sw≠
(
a
, 
b
);

15 
	}
}

18 
	gãm∂©e
 <
˛ass
 
	gT
, 
size_t
 
	gN
> cœs†
	cbuf„r_ve˘‹


20 
	m¥iv©e
:

21 íum { 
USE_DYNAMIC
 = 
N
 + 1 };

23 
T
 
	gm_°©ic
[
N
];

24 
size_t
 
	gm_size
;

25 
	g°d
::
ve˘‹
<
T
> 
m_dy«mic
;

27 
ölöe
 
boﬁ
 
	$IsDy«mic
(Ëc⁄° {  
m_size
 =
USE_DYNAMIC
; 
	}
}

29 
MoveSètic
(
buf„r_ve˘‹
<
T
, 
N
> & 
rhs
)

31 
	g°d
::
move
(
rhs
.
m_°©ic
,Ñhs.m_°©i¯+Ñhs.
m_size
, m_static);

34 
	$SëSèticSize
(
size_t
 
√wSize
)

36 
	`c⁄°ex¥
 (
°d
::
is_de°ru˘ibÀ
<
T
>::
vÆue
)

39 
size_t
 
i
 = 
√wSize
; i < 
m_size
; ++i)

40 
m_°©ic
[
i
] = 
	`T
();

42 
m_size
 = 
√wSize
;

43 
	}
}

45 
c⁄°ex¥
 
size_t
 
	$SwôchC≠acôy
(Ë{  3*
N
/2 + 1; 
	}
}

47 
	gpublic
:

48 
T
 
	tvÆue_ty≥
;

49 
T
 c⁄° & 
	tc⁄°_ª„ªn˚
;

50 
	gT
 & 
	tª„ªn˚
;

51 
size_t
 
	tsize_ty≥
;

52 
T
 c⁄° * 
	tc⁄°_ôî©‹
;

53 
T
 * 
	tôî©‹
;

55 
	$buf„r_ve˘‹
(Ë: 
	$m_size
(0Ë{
	}
}

56 
ex∂icô
 
	$buf„r_ve˘‹
(
size_t
 
n
Ë: 
	$m_size
(0)

58 
	`ªsize
(
n
);

59 
	}
}

61 
buf„r_ve˘‹
(
°d
::
öôülizî_li°
<
T
> 
öô
Ë: 
	$m_size
(0)

63 
	`assign
(
°d
::
	`make_move_ôî©‹
(
öô
.
	`begö
()), std::make_move_ôî©‹(öô.
	`íd
()));

64 
	}
}

66 
	gãm∂©e
 <
ty≥«me
 
	gTIt
>

67 
	$buf„r_ve˘‹
(
TIt
 
beg
, TIà
íd
Ë: 
	$m_size
(0)

69 
	`assign
(
beg
, 
íd
);

70 
	}
}

72 
buf„r_ve˘‹
(buffer_vector const &) = ;

74 
	$buf„r_ve˘‹
(
buf„r_ve˘‹
 && 
rhs
Ë: 
	`m_size
‘hs.
m_size
), 
	`m_dy«mic
(
°d
::
	$move
(
rhs
.
m_dy«mic
))

76 i‡(!
	`IsDy«mic
())

77 
	`MoveSètic
(
rhs
);

79 
rhs
.
m_size
 = 0;

80 
	}
}

82 
	gbuf„r_ve˘‹
 & 
	g›î©‹
=(
buf„r_ve˘‹
 c⁄° & 
rhs
) = ;

84 
	gbuf„r_ve˘‹
 & 
	g›î©‹
=(
buf„r_ve˘‹
 && 
rhs
)

86 i‡(
this
 !&
rhs
)

88 
m_size
 = 
rhs
.m_size;

89 
	gm_dy«mic
 = 
°d
::
move
(
rhs
.
m_dy«mic
);

91 i‡(!
IsDy«mic
())

92 
MoveSètic
(
rhs
);

94 
	grhs
.
	gm_size
 = 0;

96  *
	gthis
;

99 
	gãm∂©e
 <
size_t
 
	gM
>

100 
≠≥nd
(
buf„r_ve˘‹
<
vÆue_ty≥
, 
M
> c⁄° & 
v
)

102 
≠≥nd
(
v
.
begö
(), v.
íd
());

105 
	gãm∂©e
 <
ty≥«me
 
	gTIt
>

106 
	$≠≥nd
(
TIt
 
beg
, TIà
íd
)

108 i‡(!
	`IsDy«mic
())

110 
size_t
 c⁄° 
√wSize
 = 
°d
::
	`di°™˚
(
beg
, 
íd
Ë+ 
m_size
;

111 i‡(
√wSize
 <
N
)

113 
°d
::
	`c›y
(
beg
, 
íd
, &
m_°©ic
[
m_size
]);

114 
m_size
 = 
√wSize
;

118 
	`SwôchToDy«mic
(
√wSize
);

121 
m_dy«mic
.
	`ö£π
(m_dy«mic.
	`íd
(), 
beg
, 
íd
);

122 
	}
}

124 
	$≠≥nd
(
size_t
 
cou¡
, 
T
 c⁄° & 
c
)

126 i‡(!
	`IsDy«mic
())

128 
size_t
 c⁄° 
√wSize
 = 
cou¡
 + 
m_size
;

129 i‡(
√wSize
 <
N
)

131 
°d
::
	`fûl_n
(&
m_°©ic
[
m_size
], 
cou¡
, 
c
);

132 
m_size
 = 
√wSize
;

136 
	`SwôchToDy«mic
(
√wSize
);

139 
m_dy«mic
.
	`ö£π
(m_dy«mic.
	`íd
(), 
cou¡
, 
c
);

140 
	}
}

142 
	gãm∂©e
 <
ty≥«me
 
	gTIt
>

143 
	$assign
(
TIt
 
beg
, TIà
íd
)

145 i‡(
	`IsDy«mic
())

147 
m_dy«mic
.
	`assign
(
beg
, 
íd
);

151 
m_size
 = 0;

152 
	`≠≥nd
(
beg
, 
íd
);

153 
	}
}

155 
	$ª£rve
(
size_t
 
n
)

157 i‡(
	`IsDy«mic
(Ë|| 
n
 > 
N
)

158 
m_dy«mic
.
	`ª£rve
(
n
);

159 
	}
}

161 
	$ªsize
(
size_t
 
n
)

163 i‡(
	`IsDy«mic
())

165 
m_dy«mic
.
	`ªsize
(
n
);

169 i‡(
n
 <
N
)

171 
	`SëSèticSize
(
n
);

175 
	`SwôchToDy«mic
(
n
);

176 
m_dy«mic
.
	`ªsize
(
n
);

177 
	`ASSERT_EQUAL
(
m_dy«mic
.
	`size
(), 
n
, ());

179 
	}
}

181 
	$ªsize
(
size_t
 
n
, 
T
 
c
)

183 i‡(
	`IsDy«mic
())

185 
m_dy«mic
.
	`ªsize
(
n
, 
c
);

189 i‡(
n
 <
N
)

191 i‡(
n
 > 
m_size
)

192 
°d
::
	`fûl_n
(&
m_°©ic
[
m_size
], 
n
 - m_size, 
c
);

194 
	`SëSèticSize
(
n
);

198 
size_t
 c⁄° 
ﬁdSize
 = 
m_size
;

199 
	`SwôchToDy«mic
(
n
);

200 
m_dy«mic
.
	`ö£π
(m_dy«mic.
	`íd
(), 
n
 - 
ﬁdSize
, 
c
);

201 
	`ASSERT_EQUAL
(
m_dy«mic
.
	`size
(), 
n
, ());

203 
	}
}

205 
	$˛ór
()

207 i‡(
	`IsDy«mic
())

209 
m_dy«mic
.
	`˛ór
();

213 
	`SëSèticSize
(0);

214 
	}
}

222 
T
 c⁄° * 
	$d©a
() const

224 i‡(
	`IsDy«mic
())

225  
m_dy«mic
.
	`d©a
();

227  &
m_°©ic
[0];

228 
	}
}

230 
T
 * 
	$d©a
()

232 i‡(
	`IsDy«mic
())

233  
m_dy«mic
.
	`d©a
();

235  &
m_°©ic
[0];

236 
	}
}

239 
T
 c⁄° * 
	$begö
(Ëc⁄° {  
	`d©a
(); 
	}
}

240 
T
 c⁄° * 
	$cbegö
(Ëc⁄° {  
	`d©a
(); 
	}
}

241 
T
 * 
	$begö
(Ë{  
	`d©a
(); 
	}
}

242 
T
 c⁄° * 
	$íd
(Ëc⁄° {  
	`d©a
(Ë+ 
	`size
(); 
	}
}

243 
T
 c⁄° * 
	$˚nd
(Ëc⁄° {  
	`d©a
(Ë+ 
	`size
(); 
	}
}

244 
T
 * 
	$íd
(Ë{  
	`d©a
(Ë+ 
	`size
(); 
	}
}

247 
boﬁ
 
	$em±y
(Ëc⁄° {  (
	`IsDy«mic
(Ë? 
m_dy«mic
.
	`em±y
(Ë: 
m_size
 =0); 
	}
}

248 
size_t
 
	$size
(Ëc⁄° {  (
	`IsDy«mic
(Ë? 
m_dy«mic
.
	`size
(Ë: 
m_size
); 
	}
}

250 
T
 c⁄° & 
	$‰⁄t
() const

252 
	`ASSERT
(!
	`em±y
(), ());

253  *
	`begö
();

254 
	}
}

255 
	gT
 & 
	$‰⁄t
()

257 
	`ASSERT
(!
	`em±y
(), ());

258  *
	`begö
();

259 
	}
}

260 
T
 c⁄° & 
	$back
() const

262 
	`ASSERT
(!
	`em±y
(), ());

263  *(
	`íd
() - 1);

264 
	}
}

265 
	gT
 & 
	$back
()

267 
	`ASSERT
(!
	`em±y
(), ());

268  *(
	`íd
() - 1);

269 
	}
}

271 
T
 c⁄° & 
	g›î©‹
[](
size_t
 
	gi
) const

273 
ASSERT_LESS
(
i
, 
size
(), ());

274  *(
begö
(Ë+ 
	gi
);

276 
	gT
 & 
	g›î©‹
[](
size_t
 
	gi
)

278 
ASSERT_LESS
(
i
, 
size
(), ());

279  *(
begö
(Ë+ 
	gi
);

282 
	$sw≠
(
buf„r_ve˘‹
 & 
rhs
)

284 
m_dy«mic
.
	`sw≠
(
rhs
.m_dynamic);

285 
	`Sw≠
(
m_size
, 
rhs
.m_size);

286 
size_t
 
i
 = 0; i < 
N
; ++i)

287 
	`Sw≠
(
m_°©ic
[
i
], 
rhs
.m_static[i]);

288 
	}
}

291 
	$push_back
(
T
 
t
)

293 i‡(!
	`IsDy«mic
())

295 i‡(
m_size
 < 
N
)

297 
m_°©ic
[
m_size
] = 
°d
::
	`move
(
t
);

298 ++
m_size
;

302 
	`SwôchToDy«mic
(
	`SwôchC≠acôy
());

305 
m_dy«mic
.
	`push_back
(
°d
::
	`move
(
t
));

306 
	}
}

308 
	$p›_back
()

310 i‡(
	`IsDy«mic
())

312 
m_dy«mic
.
	`p›_back
();

316 
	`ASSERT_GREATER
(
m_size
, 0, ());

317 --
m_size
;

318 
	}
}

320 
	gãm∂©e
 <
	g˛ass
... 
	gArgs
>

321 
	$em∂a˚_back
(
Args
 &&... 
¨gs
)

323 i‡(
	`IsDy«mic
())

325 
m_dy«mic
.
	`em∂a˚_back
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

329 i‡(
m_size
 < 
N
)

331 
m_°©ic
[
m_size
] = 
	`vÆue_ty≥
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

332 ++
m_size
;

337 
vÆue_ty≥
 
	`vÆue
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

338 
	`SwôchToDy«mic
(
	`SwôchC≠acôy
());

339 
m_dy«mic
.
	`push_back
(
°d
::
	`move
(
vÆue
));

342 
	}
}

344 
	gãm∂©e
 <
ty≥«me
 
	gTIt
> 
	$ö£π
(
c⁄°_ôî©‹
 
whîe
, 
TIt
 
beg
, TIà
íd
)

346 
size_t
 c⁄° 
pos
 = 
ba£
::
as£πed_ˇ°
<size_t>(
whîe
 - 
	`d©a
());

347 
	`ASSERT_LESS_OR_EQUAL
(
pos
, 
	`size
(), ());

349 i‡(
	`IsDy«mic
())

351 
m_dy«mic
.
	`ö£π
(m_dy«mic.
	`begö
(Ë+ 
pos
, 
beg
, 
íd
);

355 
size_t
 c⁄° 
n
 = 
íd
 - 
beg
;

356 i‡(
m_size
 + 
n
 <
N
)

358 i‡(
pos
 !
m_size
)

360 
size_t
 
i
 = 
m_size
 - 1; i >
pos
 && i < m_size; --i)

361 
	`Sw≠
(
m_°©ic
[
i
], m_°©ic[ò+ 
n
]);

364 
m_size
 +
n
;

365 
T
 * 
wrôabÀWhîe
 = &
m_°©ic
[0] + 
pos
;

366 
	`ASSERT_EQUAL
(
whîe
, 
wrôabÀWhîe
, ());

367 
beg
 !
íd
)

368 *(
wrôabÀWhîe
++Ë*(
beg
++);

372 
	`SwôchToDy«mic
(
m_size
 + 
n
);

373 
m_dy«mic
.
	`ö£π
(m_dy«mic.
	`begö
(Ë+ 
pos
, 
beg
, 
íd
);

375 
	}
}

377 
ölöe
 
	$ö£π
(
c⁄°_ôî©‹
 
whîe
, 
vÆue_ty≥
 c⁄° & 
vÆue
)

379 
	`ö£π
(
whîe
, &
vÆue
, &value + 1);

380 
	}
}

382 
	gãm∂©e
 <
˛ass
 
	gFn
>

383 
	$îa£_if
(
Fn
 && 
‚
)

385 
ôî©‹
 
b
 = 
	`begö
();

386 
ôî©‹
 
e
 = 
	`íd
();

387 
ôî©‹
 
i
 = 
°d
::
	`ªmove_if
(
b
, 
e
, std::
f‹w¨d
<
Fn
>(
‚
));

388 i‡(
i
 !
e
)

389 
	`ªsize
(
°d
::
	`di°™˚
(
b
, 
i
));

390 
	}
}

392 
	$îa£
(
ôî©‹
 
fú°
, iãøt‹ 
œ°
)

394 i‡(
fú°
 =
œ°
)

397 autÿc⁄° 
numToEø£
 = 
°d
::
	`di°™˚
(
fú°
, 
œ°
);

398 ; 
fú°
 !
	`íd
(Ë- 
numToEø£
; ++first)

400 
	`Sw≠
(*
fú°
, *(fú° + 
numToEø£
));

402 
	`ªsize
(
°d
::
	`di°™˚
(
	`begö
(), 
fú°
));

403 
	}
}

404 
	$îa£
(
ôî©‹
 
ô
Ë{ 
	`îa£
(ô, ià+ 1); 
	}
}

406 
	g¥iv©e
:

407 
	$SwôchToDy«mic
(
size_t
 
toRe£rve
)

409 
	`ASSERT_NOT_EQUAL
(
m_size
, 
°©ic_ˇ°
<
size_t
>(
USE_DYNAMIC
), ());

410 
	`ASSERT_EQUAL
(
m_dy«mic
.
	`size
(), 0, ());

412 
m_dy«mic
.
	`ª£rve
(
toRe£rve
);

413 
m_dy«mic
.
	`ªsize
(
m_size
);

414 
°d
::
	`move
(
m_°©ic
, m_°©i¯+ 
m_size
, 
m_dy«mic
.
	`begö
());

416 
m_size
 = 
USE_DYNAMIC
;

417 
	}
}

420 
	gãm∂©e
 <
˛ass
 
	gT
, 
size_t
 
	gN
>

421 
sw≠
(
buf„r_ve˘‹
<
T
, 
N
> & 
r1
, buf„r_ve˘‹<T, N> & 
r2
)

423 
	gr1
.
sw≠
(
r2
);

426 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
>

427 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
buf„r_ve˘‹
<
T
, 
N
> c⁄° & 
v
)

429  
DebugPrötSequí˚
(
v
.
d©a
(), v.d©a(Ë+ v.
size
());

432 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN1
, size_à
	gN2
>

433 
ölöe
 
boﬁ
 
	g›î©‹
==(
buf„r_ve˘‹
<
T
, 
	gN1
> c⁄° & 
	gv1
, 
	gbuf„r_ve˘‹
<
	gT
, 
	gN2
> c⁄° & 
	gv2
)

435  (
	gv1
.
size
(Ë=
v2
.size(Ë&& 
°d
::
equÆ
(
v1
.
begö
(), v1.
íd
(), v2.begin()));

438 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN1
, size_à
	gN2
>

439 
ölöe
 
boﬁ
 
	g›î©‹
!=(
buf„r_ve˘‹
<
T
, 
	gN1
> c⁄° & 
	gv1
, 
	gbuf„r_ve˘‹
<
	gT
, 
	gN2
> c⁄° & 
	gv2
)

441  !(
	gv1
 =
v2
);

444 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN1
, size_à
	gN2
>

445 
ölöe
 
boﬁ
 
	g›î©‹
<(
	gbuf„r_ve˘‹
<
	gT
, 
	gN1
> c⁄° & 
	gv1
, buf„r_ve˘‹<T, 
	gN2
> c⁄° & 
	gv2
)

447  
	g°d
::
Àxicogøphiˇl_com∑ª
(
v1
.
begö
(), v1.
íd
(), 
v2
.begin(), v2.end());

450 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN1
, size_à
	gN2
>

451 
ölöe
 
boﬁ
 
	g›î©‹
>(
	gbuf„r_ve˘‹
<
	gT
, 
	gN1
> c⁄° & 
	gv1
, buf„r_ve˘‹<T, 
	gN2
> c⁄° & 
	gv2
)

453  
	gv2
 < 
	gv1
;

456 
«me•a˚
 
	g°d


458 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
>

459 
ty≥«me
 
	gbuf„r_ve˘‹
<
	gT
, 
	gN
>::
ôî©‹
 
begö
(
buf„r_ve˘‹
<
T
, 
N
> & 
v
)

461  
	gv
.
begö
();

464 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
>

465 
ty≥«me
 
	gbuf„r_ve˘‹
<
	gT
, 
	gN
>::
c⁄°_ôî©‹
 
begö
(
buf„r_ve˘‹
<
T
, 
N
> c⁄° & 
v
)

467  
	gv
.
begö
();

470 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
>

471 
ty≥«me
 
	gbuf„r_ve˘‹
<
	gT
, 
	gN
>::
c⁄°_ôî©‹
 
íd
(
buf„r_ve˘‹
<
T
, 
N
> c⁄° & 
v
)

473  
	gv
.
íd
();

477 
	gãm∂©e
 <
˛ass
 
	gDe°
, cœs†
	gSrc
> 
	$assign_ønge
(
De°
 & 
de°
, 
Src
 c⁄° & 
§c
)

479 
de°
.
	`assign
(
°d
::
	`begö
(
§c
), std::
	`íd
(src));

480 
	}
}

	@base/checked_cast.hpp

1 #¥agm®
⁄˚


3 
	~"ba£/as£π.hµ
"

5 
	~<limôs
>

6 
	~<ty≥_åaôs
>

8 
«me•a˚
 
	gba£


10 
	gãm∂©e
 <
ty≥«me
 
	gRëu∫Ty≥
,Åy≥«mê
	gP¨amëîTy≥
>

11 
Rëu∫Ty≥
 
checked_ˇ°
(
P¨amëîTy≥
 
v
)

13 
°©ic_as£π
(
°d
::
is_öãgøl
<
P¨amëîTy≥
>::
vÆue
, "ParameterType should be integral");

14 
°©ic_as£π
(
°d
::
is_öãgøl
<
Rëu∫Ty≥
>::
vÆue
, "ReturnType should be integral");

16 
Rëu∫Ty≥
 c⁄° 
	gªsu…
 = 
°©ic_ˇ°
<Rëu∫Ty≥>(
v
);

17 
CHECK_EQUAL
(
°©ic_ˇ°
<
P¨amëîTy≥
>(
ªsu…
), 
v
, ());

18 
CHECK
((
ªsu…
 > 0Ë=(
v
 > 0), ("checked_cast failed, value =", v, ",Ñesult =",Ñesult));

19  
	gªsu…
;

22 
	gãm∂©e
 <
ty≥«me
 
	gRëu∫Ty≥
,Åy≥«mê
	gP¨amëîTy≥
>

23 
Rëu∫Ty≥
 
as£πed_ˇ°
(
P¨amëîTy≥
 
v
)

25 
°©ic_as£π
(
°d
::
is_öãgøl
<
P¨amëîTy≥
>::
vÆue
, "ParameterType should be integral");

26 
°©ic_as£π
(
°d
::
is_öãgøl
<
Rëu∫Ty≥
>::
vÆue
, "ReturnType should be integral");

28 
Rëu∫Ty≥
 c⁄° 
	gªsu…
 = 
°©ic_ˇ°
<Rëu∫Ty≥>(
v
);

29 
ASSERT_EQUAL
(
°©ic_ˇ°
<
P¨amëîTy≥
>(
ªsu…
), 
v
, ());

30 
ASSERT
((
ªsu…
 > 0Ë=(
v
 > 0), ("asserted_cast failed, value =", v, ",Ñesult =",Ñesult));

31  
	gªsu…
;

34 
	gãm∂©e
 <
ty≥«me
 
	gResu…Ty≥
,Åy≥«mê
	gP¨amëîTy≥
>

35 
boﬁ
 
IsCa°VÆid
(
P¨amëîTy≥
 
v
)

37 
°©ic_as£π
(
°d
::
is_öãgøl
<
P¨amëîTy≥
>::
vÆue
, "ParameterType should be integral");

38 
°©ic_as£π
(
°d
::
is_öãgøl
<
Resu…Ty≥
>::
vÆue
, "ReturnType should be integral");

40 autÿc⁄° 
	gªsu…
 = 
°©ic_ˇ°
<
Resu…Ty≥
>(
v
);

41  
	g°©ic_ˇ°
<
	gP¨amëîTy≥
>(
	gªsu…
Ë=
v
 && ((
ªsu…
 > 0) == (v > 0));

	@base/exception.hpp

1 #¥agm®
⁄˚


3 
	~"ba£/öã∫Æ/mesßge.hµ
"

4 
	~"ba£/loggög.hµ
"

5 
	~"ba£/ma¸os.hµ
"

7 
	~<ex˚±i⁄
>

8 
	~<°rög
>

10 ˛as†
	cRoŸEx˚±i⁄
 : 
public
 
°d
::
ex˚±i⁄


12 
public
:

13 
RoŸEx˚±i⁄
(c⁄° * 
wh©
, 
°d
::
°rög
 c⁄° & 
msg
);

15 
	mvútuÆ
 ~
	$RoŸEx˚±i⁄
(Ë
n€x˚±
 = ;

17 
°d
::
°rög
 c⁄° & 
	$Msg
(Ëc⁄° {  
m_msg
; }

20 c⁄° * 
	$wh©
(Ëc⁄° 
n€x˚±
 
ovîride
 {  
m_wh©WôhAscii
.
	`c_°r
(); 
	}
}

22 
	g¥iv©e
:

23 
°d
::
°rög
 
m_wh©WôhAscii
;

24 
	g°d
::
°rög
 
m_msg
;

27 
	gãm∂©e
 <
ty≥«me
 
	gFn
, 
	gty≥«me
... 
	gArgs
>

28 
	g°d
::
ªsu…_of_t
<
Fn
 && (
Args
 && ...)> 
	$Ex˚±i⁄C©chî
(
°d
::
°rög
 c⁄° & 
commít
,

29 
boﬁ
 & 
ex˚±i⁄WasThrown
, 
Fn
 && 
‚
,

30 
Args
 &&... 
¨gs
Ë
n€x˚±


32 
åy


34 
ex˚±i⁄WasThrown
 = 
Ál£
;

35  
°d
::
f‹w¨d
<
Fn
>(
‚
)(°d::f‹w¨d<
Args
>(
¨gs
)...);

37 
	`ˇtch
 (
RoŸEx˚±i⁄
 c⁄° & 
ex
)

39 
	`LOG
(
LWARNING
, ("RoŸEx˚±i⁄.", 
commít
, 
ex
.
	`Msg
(),Éx.
	`wh©
()));

41 
	`ˇtch
 (
°d
::
ex˚±i⁄
 c⁄° & 
ex
)

43 
	`LOG
(
LWARNING
, ("°d::ex˚±i⁄.", 
commít
, 
ex
.
	`wh©
()));

45 
	`ˇtch
 (...)

47 
	`LOG
(
LWARNING
, ("Unknow¿ex˚±i⁄.", 
commít
));

50 
ex˚±i⁄WasThrown
 = 
åue
;

51 
usög
 
Rëu∫Ty≥
 = 
°d
::
deˇy_t
<°d::
ªsu…_of_t
<
Fn
 && (
Args
 && ...)>>;

52 
	`c⁄°ex¥
 (!
°d
::
is_ßme_v
<, 
Rëu∫Ty≥
>)

54 c⁄° 
Rëu∫Ty≥
 
deÁu…Resu…
 = {};

55  
deÁu…Resu…
;

57 
	}
}

59 
	#DECLARE_EXCEPTION
(
ex˚±i⁄_«me
, 
ba£_ex˚±i⁄
) \

60 
˛ass
 
ex˚±i⁄_«me
 : 
public
 
ba£_ex˚±i⁄
 \

62 
public
: \

63 
	`ex˚±i⁄_«me
(c⁄° * 
wh©
, 
°d
::
°rög
 c⁄° & 
msg
Ë: 
	`ba£_ex˚±i⁄
(what, msg) {} \

64 }

	)

67 
	#MYTHROW
(
ex˚±i⁄_«me
, 
msg
Ë
throw
 
	`ex˚±i⁄_«me
( \

68 #ex˚±i⁄_«mê" " 
__FILE__
 ":" 
	`TO_STRING
(
__LINE__
), ::
ba£
::
Mesßge
 
msg
)

	)

70 
	#MYTHROW1
(
ex˚±i⁄_«me
, 
∑øm1
, 
msg
Ë
throw
 
	`ex˚±i⁄_«me
(param1, \

71 #ex˚±i⁄_«mê" " 
__FILE__
 ":" 
	`TO_STRING
(
__LINE__
), ::
ba£
::
Mesßge
 
msg
)

	)

	@base/internal/message.hpp

1 #¥agm®
⁄˚


3 
	~<Æg‹ôhm
>

4 
	~<¨øy
>

5 
	~<chr⁄o
>

6 
	~<˘ime
>

7 
	~<deque
>

8 
	~<fun˘i⁄Æ
>

9 
	~<öôülizî_li°
>

10 
	~<ôî©‹
>

11 
	~<li°
>

12 
	~<m≠
>

13 
	~<mem‹y
>

14 
	~<£t
>

15 
	~<s°ªam
>

16 
	~<°rög
>

17 
	~<un‹dîed_m≠
>

18 
	~<un‹dîed_£t
>

19 
	~<utûôy
>

20 
	~<ve˘‹
>

24 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
T
 c⁄° & 
t
);

26 
	g°d
::
°rög
 
DebugPröt
(
°d
::°rög c⁄° & 
t
);

27 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(c⁄° * 
t
);

28 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
t
);

30 
	gãm∂©e
 <
ty≥«me
 
	gU
,Åy≥«mê
	gV
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
∑ú
<
U
, 
V
> c⁄° & 
p
);

31 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
li°
<
T
> c⁄° & 
v
);

32 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
ve˘‹
<
T
> c⁄° & 
v
);

33 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gC
 = 
°d
::
Àss
<
T
>> 
ölöe
 std::
°rög
 
DebugPröt
(°d::
£t
<T, 
C
> c⁄° & 
v
);

34 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gC
 = 
°d
::
Àss
<
T
>> 
ölöe
 std::
°rög
 
DebugPröt
(°d::
mu…i£t
<T, 
C
> c⁄° & 
v
);

35 
	gãm∂©e
 <
ty≥«me
 
	gU
,Åy≥«mê
	gV
,Åy≥«mê
	gC
 = 
°d
::
Àss
<
U
>> 
ölöe
 std::
°rög
 
DebugPröt
(°d::
m≠
<U, 
V
, 
C
> c⁄° & 
v
);

36 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
öôülizî_li°
<
T
> c⁄° & 
v
);

37 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
unique_±r
<
T
> c⁄° & 
v
);

39 
	gãm∂©e
 <
˛ass
 
	gKey
, cœs†
	gHash
 = 
°d
::
hash
<
Key
>, cœs†
	gPªd
 = std::
equÆ_to
<Key>>

40 
ölöe
 
°d
::
°rög
 
DebugPröt
(°d::
un‹dîed_£t
<
Key
, 
Hash
, 
Pªd
> c⁄° & 
v
);

41 
	gãm∂©e
 <
˛ass
 
	gKey
, cœs†
	gT
, cœs†
	gHash
 = 
°d
::
hash
<
Key
>, cœs†
	gPªd
 = std::
equÆ_to
<Key>>

42 
ölöe
 
°d
::
°rög
 
DebugPröt
(°d::
un‹dîed_m≠
<
Key
, 
T
, 
Hash
, 
Pªd
> c⁄° & 
v
);

45 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
	g°d
::
°rög
 
	$DebugPröt
(
T
 c⁄° & 
t
)

47 
°d
::
o°rög°ªam
 
out
;

48 
out
 << 
t
;

49  
out
.
	`°r
();

50 
	}
}

52 
ölöe
 
	g°d
::
°rög
 
	$DebugPröt
(c⁄° * 
t
)

54 i‡(
t
)

55  
	`DebugPröt
(
°d
::
	`°rög
(
t
));

57  
°d
::
	`°rög
("NULL stringÖointer");

58 
	}
}

60 
ölöe
 
	g°d
::
°rög
 
	$DebugPröt
(
t
)

62  
	`DebugPröt
(
°d
::
	`°rög
(1, 
t
));

63 
	}
}

65 
ölöe
 
	g°d
::
°rög
 
	$DebugPröt
(sig√d 
t
)

67  
	`DebugPröt
(
°©ic_ˇ°
<>(
t
));

68 
	}
}

70 
ölöe
 
	g°d
::
°rög
 
	$DebugPröt
(
t
)

72  
	`DebugPröt
(
°©ic_ˇ°
<>(
t
));

73 
	}
}

75 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
chr⁄o
::
time_poöt
<°d::chr⁄o::
sy°em_˛ock
> c⁄° & 
ts
)

77 autÿ
t
 = 
°d
::
chr⁄o
::
sy°em_˛ock
::
to_time_t
(
ts
);

78 
	g°d
::
°rög
 
°r
 = 
°d
::
˘ime
(&
t
);

79 
	g°r
.
îa£
(
°d
::
ªmove
(
°r
.
begö
(), så.
íd
(), '\n'), str.end());

80  
	g°r
;

83 
	gãm∂©e
 <
ty≥«me
 
	gU
,Åy≥«mê
	gV
>

84 
	g°d
::
°rög
 
DebugPröt
(
°d
::
∑ú
<
U
, 
V
> c⁄° & 
p
)

86 
	g°d
::
o°rög°ªam
 
out
;

87 
	gout
 << "(" << 
DebugPröt
(
p
.
fú°
Ë<< ", " << DebugPröt’.
£c⁄d
) << ")";

88  
	gout
.
°r
();

91 
	gãm∂©e
 <
ty≥«me
 
	gIãrT
>

92 
	g°d
::
°rög
 
	$DebugPrötSequí˚
(
IãrT
 
beg
, IãrT 
íd
)

94 
°d
::
o°rög°ªam
 
out
;

95 
out
 << "[" << 
°d
::
	`di°™˚
(
beg
, 
íd
) << ":";

96 ; 
beg
 !
íd
; ++beg)

97 
out
 << " " << 
	`DebugPröt
(*
beg
);

98 
out
 << " ]";

99  
out
.
	`°r
();

100 
	}
}

102 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
T
 (&
¨r
Ë[
N
])

104  
DebugPrötSequí˚
(
¨r
,áº + 
N
);

107 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
¨øy
<
T
, 
N
> c⁄° & 
v
)

109  
DebugPrötSequí˚
(
v
.
begö
(), v.
íd
());

112 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
ve˘‹
<
T
> c⁄° & 
v
)

114  
DebugPrötSequí˚
(
v
.
begö
(), v.
íd
());

117 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
deque
<
T
> c⁄° & 
d
)

119  
DebugPrötSequí˚
(
d
.
begö
(), d.
íd
());

122 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
li°
<
T
> c⁄° & 
v
)

124  
DebugPrötSequí˚
(
v
.
begö
(), v.
íd
());

127 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gC
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
£t
<
T
, 
C
> c⁄° & 
v
)

129  
DebugPrötSequí˚
(
v
.
begö
(), v.
íd
());

132 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gC
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
mu…i£t
<
T
, 
C
> c⁄° & 
v
)

134  
DebugPrötSequí˚
(
v
.
begö
(), v.
íd
());

137 
	gãm∂©e
 <
ty≥«me
 
	gU
,Åy≥«mê
	gV
,Åy≥«mê
	gC
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
m≠
<
U
, 
V
, 
C
> c⁄° & 
v
)

139  
DebugPrötSequí˚
(
v
.
begö
(), v.
íd
());

142 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
öôülizî_li°
<
T
> c⁄° & 
v
)

144  
DebugPrötSequí˚
(
v
.
begö
(), v.
íd
());

147 
	gãm∂©e
 <
˛ass
 
	gKey
, cœs†
	gHash
, cœs†
	gPªd
>

148 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
un‹dîed_£t
<
Key
, 
Hash
, 
Pªd
> c⁄° & 
v
)

150  
DebugPrötSequí˚
(
v
.
begö
(), v.
íd
());

153 
	gãm∂©e
 <
˛ass
 
	gKey
, cœs†
	gT
, cœs†
	gHash
, cœs†
	gPªd
>

154 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
un‹dîed_m≠
<
Key
, 
T
, 
Hash
, 
Pªd
> c⁄° & 
v
)

156  
DebugPrötSequí˚
(
v
.
begö
(), v.
íd
());

159 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
	g°d
::
°rög
 
DebugPröt
(
°d
::
unique_±r
<
T
> c⁄° & 
v
)

161 
°d
::
o°rög°ªam
 
out
;

162 i‡(
	gv
.
gë
(Ë!
nuŒ±r
)

163 
out
 << 
DebugPröt
(*
v
);

165 
	gout
 << 
DebugPröt
("null");

166  
	gout
.
°r
();

169 
«me•a˚
 
	gba£


171 
ölöe
 
	g°d
::
°rög
 
Mesßge
(Ë{  
°d
::string(); }

173 
	gãm∂©e
 <
ty≥«me
 
	gT
>

174 
	g°d
::
°rög
 
Mesßge
(
T
 c⁄° & 
t
)

176 
usög
 ::
DebugPröt
;

177  
DebugPröt
(
t
);

180 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
... 
	gArgs
>

181 
	g°d
::
°rög
 
Mesßge
(
T
 c⁄° & 
t
, 
Args
 c⁄° &... 
Ÿhîs
)

183 
	gusög
 ::
DebugPröt
;

184  
DebugPröt
(
t
Ë+ " " + 
Mesßge
(
Ÿhîs
...);

	@base/math.hpp

1 #¥agm®
⁄˚


3 
	~"ba£/as£π.hµ
"

5 
	~<Æg‹ôhm
>

6 
	~<cm©h
>

7 
	~<fun˘i⁄Æ
>

8 
	~<ty≥_åaôs
>

10 
«me•a˚
 
	gm©h


12 
c⁄°ex¥
 
	gpi
 = 3.14159265358979323846;

13 
c⁄°ex¥
 
	gpi2
 = 
pi
 / 2.0;

14 
c⁄°ex¥
 
	gpi4
 = 
pi
 / 4.0;

17 
«me•a˚
 
	gba£


19 
	gãm∂©e
 <
ty≥«me
 
	gT
>

20 
T
 
Abs
(T 
x
)

22 
°©ic_as£π
(
°d
::
is_sig√d
<
T
>::
vÆue
, "");

23  (
	gx
 < 0 ? -x : 
x
);

26 
	gãm∂©e
 <
ty≥«me
 
	gNumbî
,

27 
ty≥«me
 
	gE«bÀIf
 =Åy≥«mê
°d
::
íabÀ_if_t
<

28 
°d
::
is_öãgøl
<
Numbî
>::
vÆue
 || std::
is_Êﬂtög_poöt
<Number>::value, >>

29 
c⁄°ex¥
 
Sign
(
Numbî
 c⁄° 
numbî
Ë
	gn€x˚±


31  
	gnumbî
 =0 ? 0 : 
numbî
 > 0 ? 1 : -1;

42 
	gãm∂©e
 <
ty≥«me
 
	gFlﬂt
>

43 
boﬁ
 
Almo°EquÆULPs
(
Flﬂt
 
x
, Flﬂà
y
, 
uöt32_t
 
maxULPs
 = 256);

50 
	gãm∂©e
 <
ty≥«me
 
	gFlﬂt
>

51 
boﬁ
 
Almo°EquÆAbs
(
Flﬂt
 
x
, Flﬂà
y
, Flﬂà
ïs
)

53  
Ábs
(
x
 - 
y
Ë< 
	gïs
;

59 
	gãm∂©e
 <
ty≥«me
 
	gFlﬂt
>

60 
boﬁ
 
Almo°EquÆRñ
(
Flﬂt
 
x
, Flﬂà
y
, Flﬂà
ïs
)

62  
Ábs
(
x
 - 
y
Ë< 
ïs
 * 
	g°d
::
max
(fabs(x), fabs(y));

66 
	gãm∂©e
 <
ty≥«me
 
	gFlﬂt
>

67 
boﬁ
 
Almo°EquÆAbsOrRñ
(
Flﬂt
 
x
, Flﬂà
y
, Flﬂà
ïs
)

69  
Almo°EquÆAbs
(
x
, 
y
, 
ïs
Ë|| 
Almo°EquÆRñ
(x, y,Éps);

72 
	gãm∂©e
 <
ty≥«me
 
	gFlﬂt
>

73 
Flﬂt
 
c⁄°ex¥
 
DegToRad
(Flﬂà
deg
)

75  
deg
 * 
Flﬂt
(
m©h
::
pi
) / Float(180);

78 
	gãm∂©e
 <
ty≥«me
 
	gFlﬂt
>

79 
Flﬂt
 
c⁄°ex¥
 
RadToDeg
(Flﬂà
ød
)

81  
ød
 * 
Flﬂt
(180Ë/ Flﬂt(
m©h
::
pi
);

84 
	gãm∂©e
 <
ty≥«me
 
	gT
>

85 
T
 
Cœmp
(T c⁄° 
x
, T c⁄° 
xmö
, T c⁄° 
xmax
)

87 i‡(
	gx
 > 
	gxmax
)

88  
	gxmax
;

89 i‡(
	gx
 < 
	gxmö
)

90  
	gxmö
;

91  
	gx
;

94 
	gãm∂©e
 <
ty≥«me
 
	gT
>

95 
boﬁ
 
Bëwìn
(
T
 c⁄° 
a
, T c⁄° 
b
, T c⁄° 
x
)

97  
	ga
 <
x
 && x <
b
;

101 
ölöe
 
Sig√dRound
(
x
)

103  
	gx
 > 0.0 ? 
	g°©ic_ˇ°
<>(x + 0.5Ë: 
°©ic_ˇ°
<>(
x
 - 0.5);

107 
	gãm∂©e
 <
ty≥«me
 
	gT
>

108 
T
 
PowUöt
(T 
x
, 
uöt64_t
 
n
)

110 
T
 
	gªs
 = 1;

111 
T
 
	gt
 = 
x
; 
	gn
 > 0;Ç >>1,Å *
t
)

113 i‡(
n
 & 1)

114 
ªs
 *
t
;

116  
	gªs
;

119 
	gãm∂©e
 <
ty≥«me
 
	gT
>

120 
T
 
Pow2
(T 
x
)

122  
x
 * 
	gx
;

125 
	gãm∂©e
 <
ty≥«me
 
	gT
>

126 
T
 
NextModN
(T 
x
, T 
n
)

128 
ASSERT_GREATER
(
n
, 0, ());

129  
	gx
 + 1 =
n
 ? 0 : 
x
 + 1;

132 
	gãm∂©e
 <
ty≥«me
 
	gT
>

133 
T
 
PªvModN
(T 
x
, T 
n
)

135 
ASSERT_GREATER
(
n
, 0, ());

136  
	gx
 =0 ? 
n
 - 1 : 
x
 - 1;

139 
ölöe
 
uöt32_t
 
NextPowOf2
(uöt32_à
v
)

141 
	gv
 = 
v
 - 1;

142 
	gv
 |(
v
 >> 1);

143 
	gv
 |(
v
 >> 2);

144 
	gv
 |(
v
 >> 4);

145 
	gv
 |(
v
 >> 8);

146 
	gv
 |(
v
 >> 16);

148  
	gv
 + 1;

152 
	gãm∂©e
 <
ty≥«me
 
	gNumbî
,

153 
ty≥«me
 
	gE«bÀIf
 =Åy≥«mê
°d
::
íabÀ_if_t
<°d::
is_öãgøl
<
Numbî
>::
vÆue
, >>

154 
Numbî
 
c⁄°ex¥
 
GCD
(Numbî c⁄° 
a
, Numbî c⁄° 
b
)

156  
	gb
 =0 ? 
a
 : 
GCD
(
b
,á % b);

160 
	gãm∂©e
 <
ty≥«me
 
	gNumbî
,

161 
ty≥«me
 
	gE«bÀIf
 =Åy≥«mê
°d
::
íabÀ_if_t
<°d::
is_öãgøl
<
Numbî
>::
vÆue
, >>

162 
Numbî
 
c⁄°ex¥
 
LCM
(Numbî c⁄° 
a
, Numbî c⁄° 
b
)

164  
	ga
 / 
GCD
(
a
, 
b
Ë* 
	gb
;

168 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

169 
size_t
 
Hash
(
T1
 c⁄° & 
t1
, 
T2
 c⁄° & 
t2
)

172  (
	g°d
::
hash
<
T1
>()(
t1
Ë^ (
°d
::hash<
T2
>()(
t2
) << 1));

	@base/matrix.hpp

1 #¥agm®
⁄˚


3 
	~"ba£/m©h.hµ
"

5 
	~<öôülizî_li°
>

6 
	~<iom™ù
>

8 
«me•a˚
 
	gm©h


10 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gRows
, 
	gCﬁs
>

11 
	sM©rix


13 
T
 
	gm_d©a
[
Rows
 * 
Cﬁs
];

15 
M©rix
() {}

17 
	gãm∂©e
 <
ty≥«me
 
	gU
>

18 
M©rix
(M©rix<
U
, 
Rows
, 
Cﬁs
> c⁄° & 
§c
)

20 
size_t
 
	gi
 = 0; i < 
Rows
 * 
	gCﬁs
; ++i)

21 
	gm_d©a
[
i
] = 
§c
.
m_d©a
[i];

24 
M©rix
(
T
 * 
d©a
)

26 
c›y
(
d©a
, d©®+ 
Rows
 * 
Cﬁs
, 
m_d©a
);

29 
M©rix
(
°d
::
öôülizî_li°
<
T
> c⁄° & 
öôLi°
)

31 
ASSERT
(
öôLi°
.
size
(Ë=
Rows
 * 
Cﬁs
, ());

32 
	g°d
::
c›y
(
öôLi°
.
begö
(), inôLi°.
íd
(), 
m_d©a
);

35 
	gãm∂©e
 <
ty≥«me
 
	gU
>

36 
	gM©rix
<
	gT
, 
	gRows
, 
	gCﬁs
> c⁄° & 
	g›î©‹
=(
M©rix
<
U
, Rows, Cﬁs> c⁄° & 
	g§c
)

38 i‡((*)
	gthis
 !(*)&
§c
)

40 
size_t
 
i
 = 0; 
	gi
 < 
Rows
 * 
	gCﬁs
; ++i)

41 
	gm_d©a
[
i
] = 
§c
.
m_d©a
[i];

43  *
	gthis
;

46 
T
 c⁄° & 
›î©‹
()(
size_t
 
	grow
, size_à
	gcﬁ
) const

48  
	gm_d©a
[
row
 * 
Cﬁs
 + 
cﬁ
];

51 
	gT
 & 
›î©‹
()(
size_t
 
	grow
, size_à
	gcﬁ
)

53  
	gm_d©a
[
row
 * 
Cﬁs
 + 
cﬁ
];

56 
	gãm∂©e
 <
ty≥«me
 
	gU
>

57 
boﬁ
 
	g›î©‹
 =(
M©rix
<
U
, 
	gRows
, 
	gCﬁs
> c⁄° & 
	gm
) const

59 
size_t
 
	gi
 = 0; i < 
	gRows
; ++i)

60 
size_t
 
	gj
 = 0; j < 
	gCﬁs
; ++j)

61 i‡(
	gm_d©a
[
i
 * 
Cﬁs
 + 
j
] !
m
(i, j))

62  
	gÁl£
;

63  
	gåue
;

66 
	gãm∂©e
 <
ty≥«me
 
	gU
>

67 
boﬁ
 
EquÆ
(
M©rix
<
U
, 
Rows
, 
Cﬁs
> c⁄° & 
m
, 
T
 
ïs
 = 0.0001) const

69 
size_t
 
i
 = 0; 
	gi
 < 
	gRows
; ++i)

70 
size_t
 
	gj
 = 0; j < 
	gCﬁs
; ++j)

71 i‡(
	gba£
::
Abs
(
m_d©a
[
i
 * 
Cﬁs
 + 
j
] - 
m
(i, j)Ë> 
	gïs
)

72  
	gÁl£
;

74  
	gåue
;

77 
	gãm∂©e
 <
ty≥«me
 
	gU
>

78 
boﬁ
 
	g›î©‹
 !(
M©rix
<
U
, 
	gRows
, 
	gCﬁs
> c⁄° & 
	gm
) const

80  !(*
	gthis
 =
m
);

83 
	gãm∂©e
 <
ty≥«me
 
	gU
>

84 
boﬁ
 
	g›î©‹
<(
	gM©rix
<
	gU
, 
	gRows
, 
	gCﬁs
> c⁄° & 
	gm
) const

86 
size_t
 
	gi
 = 0; i < 
	gRows
; ++i)

87 
size_t
 
	gj
 = 0; j < 
	gCﬁs
; ++j)

89 i‡(
	gm_d©a
[
i
 * 
Cﬁs
 + 
j
] > 
m
(i, j))

90  
	gÁl£
;

91 i‡(
	gm_d©a
[
i
 * 
Cﬁs
 + 
j
] < 
m
(i, j))

92  
	gåue
;

96  
	gÁl£
;

100 
	gãm∂©e
 <
ty≥«me
 
	gT
>

101 
T
 
Dëîmö™t
(
M©rix
<T, 1, 1> c⁄° & 
m
)

103  
m
(0, 0);

106 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gM
>

107 
T
 
Dëîmö™t
(
M©rix
<T, 
M
, M> c⁄° & 
m
)

109 
T
 
	gsign
 = 1;

110 
T
 
	gªs
 = 0;

111 
size_t
 
	gi
 = 0; i < 
	gM
; ++i, 
	gsign
 *= -1)

112 
ªs
 +
sign
 * 
m
(0, 
i
Ë* 
Dëîmö™t
(
S∂i˚
(m, 0, i));

113  
	gªs
;

116 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gRows
, 
	gCﬁs
>

117 
	gM©rix
<
	gT
, 
	gRows
 - 1, 
	gCﬁs
 - 1> c⁄° 
S∂i˚
(
M©rix
<
T
, 
Rows
, 
Cﬁs
> c⁄° & 
m
, 
size_t
 
Row
, size_à
Cﬁ
)

119 
	gM©rix
<
	gT
, 
	gRows
 - 1, 
	gCﬁs
 - 1> 
	gªs
;

121 
size_t
 
	gi
 = 0; i < 
	gRow
; ++i)

123 
size_t
 
	gj
 = 0; j < 
	gCﬁ
; ++j)

124 
ªs
(
i
, 
j
Ë
m
(i, j);

125 
size_t
 
	gj
 = 
Cﬁ
 + 1; j < 
	gCﬁs
; ++j)

126 
ªs
(
i
, 
j
 - 1Ë
m
(i, j);

129 
size_t
 
	gi
 = 
Row
 + 1; i < 
	gRows
; ++i)

131 
size_t
 
	gj
 = 0; j < 
	gCﬁ
; ++j)

132 
ªs
(
i
 - 1, 
j
Ë
m
(i, j);

133 
size_t
 
	gj
 = 
Cﬁ
 + 1; j < 
	gCﬁs
; ++j)

134 
ªs
(
i
 - 1, 
j
 - 1Ë
m
(i, j);

137  
	gªs
;

140 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gM
>

141 
	gM©rix
<
	gT
, 
	gM
, M> c⁄° 
Invî£
(
M©rix
<
T
, 
M
, M> c⁄° & 
m
)

143 
T
 
	gdë
 = 
Dëîmö™t
(
m
);

144 
	gM©rix
<
	gT
, 
	gM
, M> 
	gªs
;

146 
size_t
 
	gi
 = 0; i < 
	gM
; ++i)

147 
size_t
 
	gj
 = 0; j < 
	gM
; ++j)

149 
T
 
	gsign
 = 1.0 - 2.0 * ((
i
 + 
j
) % 2);

150 
ªs
(
j
, 
i
Ë
sign
 * 
Dëîmö™t
(
S∂i˚
(
m
, i, j)Ë/ 
	gdë
;

153  
	gªs
;

156 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gM
>

157 
	gM©rix
<
	gT
, 
	gM
, M> c⁄° 
Idítôy
()

159 
	gM©rix
<
	gT
, 
	gM
, M> 
	gªs
;

161 
size_t
 
	gi
 = 0; i < 
	gM
; ++i)

162 
size_t
 
	gj
 = 0; j < 
	gM
; ++j)

163 
ªs
(
i
, 
j
) = 0;

165 
size_t
 
	gi
 = 0; i < 
	gM
; ++i)

166 
ªs
(
i
, i) = 1;

168  
	gªs
;

171 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gM
>

172 
	gM©rix
<
	gT
, 
	gM
, M> c⁄° 
Zîo
()

174 
	gM©rix
<
	gT
, 
	gM
, M> 
	gªs
;

176 
size_t
 
	gi
 = 0; i < 
	gM
; ++i)

177 
size_t
 
	gj
 = 0; j < 
	gM
; ++j)

178 
ªs
(
i
, 
j
) = 0;

180  
	gªs
;

183 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gM
, 
	gN
, 
	gK
>

184 
	gM©rix
<
	gT
, 
	gM
, 
	gK
> c⁄° 
	g›î©‹
*(M©rix<T, M, 
	gN
> c⁄° & 
	gl
, M©rix<T, N, K> c⁄° & 
	gr
)

186 
	gM©rix
<
	gT
, 
	gM
, 
	gK
> 
	gªs
;

187 
size_t
 
	gm
 = 0; m < 
	gM
; ++m)

188 
size_t
 
	gk
 = 0; k < 
	gK
; ++k)

190 
T
 
	gsum
 = 0;

191 
size_t
 
	gn
 = 0;Ç < 
	gN
; ++n)

192 
	gsum
 +
l
(
m
, 
n
Ë* 
r
“, 
k
);

193 
ªs
(
m
, 
k
Ë
sum
;

195  
	gªs
;

198 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gM
, 
	gN
> 
	g°d
::
°rög
 
DebugPröt
(
M©rix
<
T
, 
M
, 
N
> c⁄° & 
m
)

200 
	g°d
::
o°rög°ªam
 
ss
;

202 
	gss
 << ":" << 
	g°d
::
ídl
;

204 
	gi
 = 0; i < 
	gM
; ++i)

206 
	gj
 = 0; j < 
	gN
; ++j)

207 
	gss
 << 
	g°d
::
£tfûl
(' 'Ë<< 
°d
::
£tw
(10Ë<< 
m
(
i
, 
j
) << " ";

208 
	gss
 << 
	g°d
::
ídl
;

211  
	gss
.
°r
();

	@base/src_point.hpp

1 #¥agm®
⁄˚


3 
	~<°rög
>

5 #i‚de‡
SRC_LOGGING


6 
	#SRC_LOGGING
 1

	)

9 #i‡
SRC_LOGGING


10 #i‚de‡
__OBJC__


11 
	#SRC
(Ë
ba£
::
	`SrcPoöt
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, "()")

	)

13 
	#SRC
(Ë
ba£
::
	`SrcPoöt
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
)

	)

16 
	#SRC
(Ë
ba£
::
	`SrcPoöt
()

	)

19 
«me•a˚
 
	gba£


21 ˛as†
	cSrcPoöt


23 
	gpublic
:

24 
SrcPoöt
(Ë: 
m_fûeName
(""), 
m_löe
(-1), 
m_fun˘i⁄
(""), 
m_po°fix
(""Ë{ 
TrunˇãFûeName
(); }

26 
SrcPoöt
(c⁄° * 
fûeName
, 
löe
, c⁄° * 
fun˘i⁄
, c⁄° * 
po°fix
 = "")

27 : 
m_fûeName
(
fûeName
), 
m_löe
(
löe
), 
m_fun˘i⁄
(
fun˘i⁄
), 
m_po°fix
(
po°fix
)

29 
TrunˇãFûeName
();

32 c⁄° * 
FûeName
(Ëc⁄° {  
	gm_fûeName
; }

33 
Löe
(Ëc⁄° {  
	gm_löe
; }

34 c⁄° * 
Fun˘i⁄
(Ëc⁄° {  
	gm_fun˘i⁄
; }

35 c⁄° * 
Po°fix
(Ëc⁄° {  
	gm_po°fix
; }

37 
	g¥iv©e
:

38 
TrunˇãFûeName
();

40 c⁄° * 
	gm_fûeName
;

41 
	gm_löe
;

42 c⁄° * 
	gm_fun˘i⁄
;

43 c⁄° * 
	gm_po°fix
;

46 
	g°d
::
°rög
 
DebugPröt
(
SrcPoöt
 c⁄° & 
§cPoöt
);

	@base/task_loop.hpp

1 #¥agm®
⁄˚


3 
	~<c°döt
>

4 
	~<fun˘i⁄Æ
>

6 
«me•a˚
 
	gba£


8 ˛as†
	cTaskLo›


10 
	gpublic
:

11 
usög
 
Task
 = 
°d
::
fun˘i⁄
<()>;

12 
usög
 
	gTaskId
 = 
uöt64_t
;

14 
TaskId
 
c⁄°ex¥
 
	gkNoId
 = 0;

16 
	sPushResu…


19 
boﬁ
 
	gm_isSuc˚ss
 = 
Ál£
;

22 
TaskId
 
	gm_id
 = 
kNoId
;

25 
	gvútuÆ
 ~
TaskLo›
() = ;

27 
vútuÆ
 
PushResu…
 
Push
(
Task
 && 
èsk
) = 0;

28 
vútuÆ
 
PushResu…
 
Push
(
Task
 c⁄° & 
èsk
) = 0;

	@base/thread.hpp

1 #¥agm®
⁄˚


3 
	~"ba£/as£π.hµ
"

4 
	~"ba£/ˇn˚ŒabÀ.hµ
"

5 
	~"ba£/ma¸os.hµ
"

7 
	~<fun˘i⁄Æ
>

8 
	~<mem‹y
>

9 
	~<thªad
>

11 
«me•a˚
 
	gthªads


13 ˛as†
	cIRoutöe
 : 
public
 
ba£
::
C™˚ŒabÀ


15 
public
:

17 
vútuÆ
 
Do
() = 0;

27 ˛as†
	cThªad


29 
	g°d
::
thªad
 
m_thªad
;

30 
	g°d
::
sh¨ed_±r
<
IRoutöe
> 
m_routöe
;

32 
DISALLOW_COPY
(
Thªad
);

34 
	gpublic
:

35 
Thªad
();

36 ~
Thªad
();

44 
boﬁ
 
Cª©e
(
°d
::
unique_±r
<
IRoutöe
> && 
routöe
);

48 
C™˚l
();

51 
Joö
();

54 
IRoutöe
 * 
GëRoutöe
();

59 
	gãm∂©e
 <
ty≥«me
 
	gT
>

60 
T
 * 
GëRoutöeAs
()

62 
ASSERT
(
m_routöe
.
gë
(), ("Routine isÇot set"));

63 
T
 * 
	g±r
 = 
dy«mic_ˇ°
<T *>(
m_routöe
.
gë
());

64 
ASSERT
(
±r
, ("C™'àc⁄vîàIRoutöe*Åo", 
TO_STRING
(
T
) "*"));

65  
	g±r
;

71 
SÀï
(
size_t
 
ms
);

73 
usög
 
	gThªadID
 = 
°d
::
thªad
::
id
;

75 
ThªadID
 
GëCuºítThªadID
();

79 ˛as†
	cSim∂eThªad


81 
	gpublic
:

82 
usög
 
id
 = 
°d
::
thªad
::id;

83 
usög
 
	g«tive_h™dÀ_ty≥
 = 
°d
::
thªad
::
«tive_h™dÀ_ty≥
;

85 
Sim∂eThªad
(Ë
	gn€x˚±
 {}

86 
Sim∂eThªad
(Sim∂eThªad && 
x
Ë
	gn€x˚±


87 : 
m_thªad
(
°d
::
move
(
x
.m_thread))

90 
ãm∂©e
 <
˛ass
 
Fn
, 
	g˛ass
... 
	gArgs
>

91 
ex∂icô
 
Sim∂eThªad
(
Fn
 && 
‚
, 
Args
 &&... 
¨gs
)

92 : 
m_thªad
(&
Sim∂eThªad
::
ThªadFunc
, 
°d
::
böd
(°d::
f‹w¨d
<
Fn
>(
‚
), std::f‹w¨d<
Args
>(
¨gs
)...))

95 
Sim∂eThªad
 & 
›î©‹
(Sim∂eThªad && 
x
Ë
n€x˚±


97 
m_thªad
 = 
°d
::
move
(
x
.m_thread);

98  *
	gthis
;

101 
dëach
(Ë{ 
	gm_thªad
.detach(); }

102 
id
 
gë_id
(Ëc⁄° 
	gn€x˚±
 {  
	gm_thªad
.get_id(); }

103 
joö
(Ë{ 
	gm_thªad
.join(); }

104 
boﬁ
 
joöabÀ
(Ëc⁄° 
	gn€x˚±
 {  
	gm_thªad
.joinable(); }

105 
«tive_h™dÀ_ty≥
 
«tive_h™dÀ
(Ë{  
	gm_thªad
.native_handle(); }

106 
sw≠
(
Sim∂eThªad
 & 
x
Ë
	gn€x˚±
 { 
	gm_thªad
.sw≠(x.
m_thªad
); }

108 
	g¥iv©e
:

109 
ThªadFunc
(
°d
::
fun˘i⁄
<()> && 
‚
);

111 
DISALLOW_COPY
(
Sim∂eThªad
);

113 
	g°d
::
thªad
 
m_thªad
;

	@base/thread_pool_delayed.hpp

1 #¥agm®
⁄˚


3 
	~"ba£/as£π.hµ
"

4 
	~"ba£/bidúe˘i⁄Æ_m≠.hµ
"

5 
	~"ba£/löked_m≠.hµ
"

6 
	~"ba£/èsk_lo›.hµ
"

7 
	~"ba£/thªad.hµ
"

8 
	~"ba£/thªad_checkî.hµ
"

10 
	~<chr⁄o
>

11 
	~<c⁄dôi⁄_v¨übÀ
>

12 
	~<c°döt
>

13 
	~<m≠
>

14 
	~<mem‹y
>

15 
	~<muãx
>

16 
	~<un‹dîed_m≠
>

17 
	~<utûôy
>

18 
	~<ve˘‹
>

20 
«me•a˚
 
	gba£


22 
«me•a˚
 
	gthªad_poﬁ


24 
«me•a˚
 
	gdñayed


30 ˛as†
	cThªadPoﬁ
 : 
public
 
TaskLo›


32 
public
:

33 
usög
 
Clock
 = 
°d
::
chr⁄o
::
°ódy_˛ock
;

34 
usög
 
	gDuøti⁄
 = 
Clock
::
duøti⁄
;

35 
usög
 
	gTimePoöt
 = 
Clock
::
time_poöt
;

38 
c⁄°ex¥
 
TaskId
 
	gkImmedüãMöId
 = 1;

39 
c⁄°ex¥
 
TaskId
 
	gkImmedüãMaxId
 = 
°d
::
numîic_limôs
<TaskId>::
max
() / 2;

40 
c⁄°ex¥
 
TaskId
 
	gkDñayedMöId
 = 
kImmedüãMaxId
 + 1;

41 
c⁄°ex¥
 
TaskId
 
	gkDñayedMaxId
 = 
°d
::
numîic_limôs
<TaskId>::
max
();

43 ˛as†
	cExô


45 
	gExecPídög
,

46 
	gSkùPídög


49 
ex∂icô
 
ThªadPoﬁ
(
size_t
 
thªadsCou¡
 = 1, 
Exô
 
e
 = Exô::
SkùPídög
);

50 ~
ThªadPoﬁ
(Ë
	govîride
;

56 
PushResu…
 
Push
(
Task
 && 
t
Ë
	govîride
;

57 
PushResu…
 
Push
(
Task
 c⁄° & 
t
Ë
	govîride
;

72 
PushResu…
 
PushDñayed
(
Duøti⁄
 c⁄° & 
dñay
, 
Task
 && 
t
);

73 
PushResu…
 
PushDñayed
(
Duøti⁄
 c⁄° & 
dñay
, 
Task
 c⁄° & 
t
);

78 
boﬁ
 
C™˚l
(
TaskId
 
id
);

82 
boﬁ
 
Shutdown
(
Exô
 
e
);

85 
ShutdownAndJoö
();

86 
boﬁ
 
IsShutDown
();

88 
TimePoöt
 
Now
(Ë{  
	gClock
::
now
(); }

90 
	g¥iv©e
:

91 
	eQueueTy≥


93 
QUEUE_TYPE_IMMEDIATE
,

94 
	gQUEUE_TYPE_DELAYED
,

95 
	gQUEUE_TYPE_COUNT


98 
	sDñayedTask


100 
	gãm∂©e
 <
ty≥«me
 
	gT
>

101 
DñayedTask
(
TaskId
 
id
, 
TimePoöt
 c⁄° & 
whí
, 
T
 && 
èsk
)

102 : 
m_id
(
id
)

103 , 
m_whí
(
whí
)

104 , 
m_èsk
(
°d
::
f‹w¨d
<
T
>(
èsk
))

108 
boﬁ
 
›î©‹
<(
DñayedTask
 c⁄° & 
rhs
) const

110 i‡(
m_whí
 =
rhs
.m_when)

111  
m_id
 < 
rhs
.m_id;

113  
	gm_whí
 < 
	grhs
.m_when;

115 
boﬁ
 
	g›î©‹
>(
DñayedTask
 c⁄° & 
	grhs
Ëc⁄° { Ñh†< *
	gthis
; }

117 
TaskId
 
	gm_id
 = 
kNoId
;

118 
TimePoöt
 
	gm_whí
 = {};

119 
Task
 
	gm_èsk
 = {};

122 
	gãm∂©e
 <
ty≥«me
 
	gT
>

123 
	sDeRef


125 
boﬁ
 
›î©‹
()(
T
 c⁄° & 
	glhs
, T c⁄° & 
	grhs
) const {  *lhs < *rhs; }

128 
usög
 
	gImmedüãQueue
 = 
ba£
::
LökedM≠
<
TaskId
, 
	gTask
>;

130 
usög
 
	gDñayedVÆue
 = 
°d
::
sh¨ed_±r
<
DñayedTask
>;

131 
˛ass
 
	gDñayedQueue
 : 
public
 
Bidúe˘i⁄ÆM≠
<
TaskId
, 
	gDñayedVÆue
,

132 
	g°d
::
un‹dîed_m≠
, std::
hash
<
TaskId
>,

133 
	g°d
::
mu…im≠
, 
	gDeRef
<
	gDñayedVÆue
>>

135 
	gpublic
:

136 
VÆue
 c⁄° & 
GëFú°VÆue
() const

138 autÿc⁄° & 
vTok
 = 
GëVÆuesToKeys
();

139 
CHECK
(!
vTok
.
em±y
(), ());

140  
	gvTok
.
begö
()->
	gfú°
;

144 
	gãm∂©e
 <
ty≥«me
 
	gT
>

145 
PushResu…
 
AddImmedüã
(
T
 && 
èsk
);

146 
	gãm∂©e
 <
ty≥«me
 
	gT
>

147 
PushResu…
 
AddDñayed
(
Duøti⁄
 c⁄° & 
dñay
, 
T
 && 
èsk
);

148 
	gãm∂©e
 <
ty≥«me
 
	gAdd
>

149 
PushResu…
 
AddTask
(
Add
 && 
add
);

151 
Pro˚ssTasks
();

153 
	g°d
::
ve˘‹
<::
thªads
::
Sim∂eThªad
> 
m_thªads
;

154 
	g°d
::
muãx
 
m_mu
;

155 
	g°d
::
c⁄dôi⁄_v¨übÀ
 
m_cv
;

157 
boﬁ
 
	gm_shutdown
 = 
Ál£
;

158 
Exô
 
	gm_exô
 = Exô::
SkùPídög
;

160 
ImmedüãQueue
 
	gm_immedüã
;

161 
DñayedQueue
 
	gm_dñayed
;

163 
TaskId
 
	gm_immedüãLa°Id
;

164 
TaskId
 
	gm_dñayedLa°Id
;

166 
ThªadCheckî
 
	gm_checkî
;

	@base/timer.hpp

1 #¥agm®
⁄˚


3 
	~<chr⁄o
>

4 
	~<c°döt
>

5 
	~<˘ime
>

6 
	~<°rög
>

8 
«me•a˚
 
	gba£


10 
«me•a˚
 
	gim∂


12 
	gãm∂©e
 <
˛ass
 
	gClockT
> cœs†
	cStdTimî


14 
ty≥«me
 
	gClockT
::
time_poöt
 
m_°¨tTime
;

16 
	gpublic
:

17 
ex∂icô
 
StdTimî
(
boﬁ
 
°¨t
 = 
åue
)

19 i‡(
°¨t
)

20 
Re£t
();

23 
usög
 
	gDuøti⁄T
 = 
ty≥«me
 
ClockT
::
duøti⁄
;

25 
ölöe
 
Duøti⁄T
 
TimeEœp£d
(Ëc⁄° {  
	gClockT
::
now
(Ë- 
m_°¨tTime
; }

27 
	gãm∂©e
 <
ty≥«me
 
	gDuøti⁄
>

28 
ölöe
 
Duøti⁄
 
TimeEœp£dAs
() const

30  
	g°d
::
chr⁄o
::
duøti⁄_ˇ°
<
Duøti⁄
>(
TimeEœp£d
());

33 
ölöe
 
Eœp£dSec⁄ds
(Ëc⁄° {  
	gTimeEœp£dAs
<
	g°d
::
chr⁄o
::
duøti⁄
<>>().
cou¡
(); }

34 
ölöe
 
uöt64_t
 
Eœp£dMûli£c⁄ds
(Ëc⁄° {  
	gTimeEœp£dAs
<
	g°d
::
chr⁄o
::
mûli£c⁄ds
>().
cou¡
(); }

35 
ölöe
 
uöt64_t
 
Eœp£dN™o£c⁄ds
(Ëc⁄° {  
	gTimeEœp£dAs
<
	g°d
::
chr⁄o
::
«no£c⁄ds
>().
cou¡
(); }

37 
ölöe
 
Re£t
(Ë{ 
	gm_°¨tTime
 = 
ClockT
::
now
(); }

43 
˛ass
 
	gTimî
 : 
public
 
im∂
::
StdTimî
<
°d
::
chr⁄o
::
°ódy_˛ock
>

45 
usög
 
Ba£T
 = 
im∂
::
StdTimî
<
°d
::
chr⁄o
::
°ódy_˛ock
>;

47 
	gpublic
:

48 
usög
 
Ba£T
::BaseT;

51 
LoˇlTime
();

54 
	g°d
::
°rög
 
F‹m©CuºítTime
();

61 
uöt32_t
 
Gíî©eYYMMDD
(
yór
, 
m⁄th
, 
day
);

62 
uöt32_t
 
Gíî©eYYMMDD
(
uöt64_t
 
£c⁄dsSö˚Epoch
);

63 
uöt64_t
 
YYMMDDToSec⁄dsSö˚Epoch
(
uöt32_t
 
yymmdd
);

65 
uöt64_t
 
Sec⁄dsSö˚Epoch
();

69 
	g°d
::
°rög
 
Time°ampToSåög
(
time_t
 
time
);

71 
	g°d
::
°rög
 
Sec⁄dsSö˚EpochToSåög
(
uöt64_t
 
£c⁄dsSö˚Epoch
);

73 
time_t
 c⁄° 
	gINVALID_TIME_STAMP
 = -1;

78 
time_t
 
SåögToTime°amp
(
°d
::
°rög
 c⁄° & 
s
);

82 
usög
 
	gHighResTimî
 = 
im∂
::
StdTimî
<
°d
::
chr⁄o
::
high_ªsﬁuti⁄_˛ock
>;

84 ˛as†
	cSc›edTimîWôhLog


86 
	gpublic
:

87 ˛as†
	cMósuª


89 
MûliSec⁄ds
,

90 
	gSec⁄ds
,

93 
ex∂icô
 
Sc›edTimîWôhLog
(
°d
::
°rög
 c⁄° & 
timîName
,

94 
Mósuª
 
mósuª
 = Mósuª::
MûliSec⁄ds
);

95 ~
Sc›edTimîWôhLog
();

97 
	g¥iv©e
:

98 
°d
::
°rög
 
m_«me
;

99 
Mósuª
 
	gm_mósuª
;

100 
HighResTimî
 
	gm_timî
;

103 
time_t
 
Sec⁄dsSö˚EpochToTimeT
(
uöt64_t
 
£c⁄dsSö˚Epoch
);

104 
uöt64_t
 
TimeTToSec⁄dsSö˚Epoch
(
time_t
 
time
);

	@coding/reader.hpp

1 #¥agm®
⁄˚


3 
	~"codög/ídü¬ess.hµ
"

5 
	~"ba£/as£π.hµ
"

6 
	~"ba£/ex˚±i⁄.hµ
"

8 
	~<c°ddef
>

9 
	~<c°döt
>

10 
	~<c°rög
>

11 
	~<mem‹y
>

12 
	~<°rög
>

13 
	~<ty≥_åaôs
>

14 
	~<ve˘‹
>

17 ˛as†
	cRódî


19 
	mpublic
:

20 
DECLARE_EXCEPTION
(
Ex˚±i⁄
, 
RoŸEx˚±i⁄
);

21 
DECLARE_EXCEPTION
(
O≥nEx˚±i⁄
, 
Ex˚±i⁄
);

22 
DECLARE_EXCEPTION
(
SizeEx˚±i⁄
, 
Ex˚±i⁄
);

23 
DECLARE_EXCEPTION
(
RódEx˚±i⁄
, 
Ex˚±i⁄
);

24 
DECLARE_EXCEPTION
(
TooM™yFûesEx˚±i⁄
, 
Ex˚±i⁄
);

26 
	mvútuÆ
 ~
Ródî
() = ;

27 
vútuÆ
 
uöt64_t
 
	$Size
() const = 0;

28 
vútuÆ
 
	$Ród
(
uöt64_t
 
pos
, * 
p
, 
size_t
 
size
) const = 0;

29 
vútuÆ
 
°d
::
unique_±r
<
Ródî
> 
	$Cª©eSubRódî
(
uöt64_t
 
pos
, uöt64_à
size
) const = 0;

31 
	$RódAsSåög
(
°d
::
°rög
 & 
s
) const;

35 
ãm∂©e
 <
boﬁ
 
WôhEx˚±i⁄s
>

36 ˛as†
	cMemRódîTem∂©e
 : 
public
 
Ródî


38 
public
:

40 
	$MemRódîTem∂©e
(c⁄° * 
pD©a
, 
size_t
 
size
)

41 : 
	`m_pD©a
(
°©ic_ˇ°
<c⁄° *>(
pD©a
)), 
	$m_size
(
size
)

45 
uöt64_t
 
	$Size
(Ëc⁄° 
ovîride
 {  
m_size
; 
	}
}

47 
	$Ród
(
uöt64_t
 
pos
, * 
p
, 
size_t
 
size
Ëc⁄° 
ovîride


49 
	`As£πPosAndSize
(
pos
, 
size
);

50 
	`mem˝y
(
p
, 
m_pD©a
 + 
pos
, 
size
);

51 
	}
}

53 
MemRódîTem∂©e
 
	$SubRódî
(
uöt64_t
 
pos
, uöt64_à
size
) const

55 
	`As£πPosAndSize
(
pos
, 
size
);

56  
	`MemRódîTem∂©e
(
m_pD©a
 + 
pos
, 
°©ic_ˇ°
<
size_t
>(
size
));

57 
	}
}

59 
	g°d
::
unique_±r
<
Ródî
> 
	$Cª©eSubRódî
(
uöt64_t
 
pos
, uöt64_à
size
Ëc⁄° 
ovîride


61 
	`As£πPosAndSize
(
pos
, 
size
);

62  
°d
::
make_unique
<
MemRódîTem∂©e
>(
m_pD©a
 + 
pos
, 
°©ic_ˇ°
<
size_t
>(
size
));

63 
	}
}

65 
	g¥iv©e
:

66 
boﬁ
 
	$GoodPosAndSize
(
uöt64_t
 
pos
, uöt64_à
size
) const

69  (
pos
 + 
size
 <
	`Size
(Ë&& sizê<
°d
::
numîic_limôs
<
size_t
>::
	`max
());

70 
	}
}

72 
	$As£πPosAndSize
(
uöt64_t
 
pos
, uöt64_à
size
) const

74 
	`c⁄°ex¥
 (
WôhEx˚±i⁄s
)

76 i‡(!
	`GoodPosAndSize
(
pos
, 
size
))

77 
	`MYTHROW
(
Ródî
::
SizeEx˚±i⁄
, (
pos
, 
size
, 
	`Size
()));

81 
	`ASSERT
(
	`GoodPosAndSize
(
pos
, 
size
), (pos, size, 
	`Size
()));

83 
	}
}

85 c⁄° * 
	gm_pD©a
;

86 
size_t
 
	gm_size
;

89 
usög
 
	gMemRódî
 = 
MemRódîTem∂©e
<
Ál£
>;

90 
usög
 
	gMemRódîWôhEx˚±i⁄s
 = 
MemRódîTem∂©e
<
åue
>;

95 
	gãm∂©e
 <
˛ass
 
	gTRódî
>

96 ˛as†
	cRódîPå


98 
	m¥Ÿe˘ed
:

99 
°d
::
sh¨ed_±r
<
TRódî
> 
m_p
;

101 
	mpublic
:

102 
ãm∂©e
 <
ty≥«me
 
TRódîDîived
>

103 
RódîPå
(
°d
::
unique_±r
<
TRódîDîived
> 
p
Ë: 
m_p
(°d::
	$move
(
p
))

107 
uöt64_t
 
	$Size
() const

109  
m_p
->
	`Size
();

110 
	}
}

112 
	$Ród
(
uöt64_t
 
pos
, * 
p
, 
size_t
 
size
) const

114 
m_p
->
	`Ród
(
pos
, 
p
, 
size
);

115 
	}
}

117 
	$RódAsSåög
(
°d
::
°rög
 & 
s
Ëc⁄° { 
m_p
->
	`RódAsSåög
(s); 
	}
}

119 
	gRódîPå
<
	gRódî
> 
	$SubRódî
(
uöt64_t
 
pos
, uöt64_à
size
) const

121  {
m_p
->
	`Cª©eSubRódî
(
pos
, 
size
)};

122 
	}
}

124 
TRódî
 * 
	$GëPå
(Ëc⁄° {  
m_p
.
	`gë
(); 
	}
}

128 ˛as†
	cModñRódî
 : 
public
 
Ródî


130 
°d
::
°rög
 
m_«me
;

132 
	mpublic
:

133 
ex∂icô
 
	$ModñRódî
(
°d
::
°rög
 c⁄° & 
«me
Ë: 
	$m_«me
(
«me
) {}

135 
°d
::
°rög
 c⁄° & 
	$GëName
(Ëc⁄° {  
m_«me
; 
	}
}

139 
˛ass
 
	gModñRódîPå
 : 
public
 
RódîPå
<
ModñRódî
>

141 
usög
 
TBa£
 = 
RódîPå
<
ModñRódî
>;

143 
	gpublic
:

144 
ãm∂©e
 <
ty≥«me
 
TRódîDîived
>

145 
ModñRódîPå
(
°d
::
unique_±r
<
TRódîDîived
> 
p
Ë: 
TBa£
(°d::
move
(p))

149 
ModñRódîPå
 
SubRódî
(
uöt64_t
 
pos
, uöt64_à
size
) const

151  
	g°d
::
unique_±r
<
ModñRódî
>(

152 
°©ic_ˇ°
<
ModñRódî
 *>(
m_p
->
Cª©eSubRódî
(
pos
, 
size
).
ªÀa£
()));

155 
	g°d
::
°rög
 c⁄° & 
GëName
(Ëc⁄° {  
m_p
->GetName(); }

160 ˛as†
	cN⁄OwnögRódîSour˚


162 
	mpublic
:

164 
ex∂icô
 
	$N⁄OwnögRódîSour˚
(
Ródî
 c⁄° & 
ªadî
)

165 : 
	`m_ªadî
(
ªadî
), 
	`m_pos
(0), 
	`m_íd
‘ódî.
	$Size
())

168 
	$N⁄OwnögRódîSour˚
(
Ródî
 c⁄° & 
ªadî
, 
uöt64_t
 
pos
, uöt64_à
íd
)

169 : 
	`m_ªadî
(
ªadî
), 
	`m_pos
(
pos
), 
	$m_íd
(
íd
)

170 {
	}
}

172 
	$Ród
(* 
p
, 
size_t
 
size
)

174 
m_ªadî
.
	`Ród
(
m_pos
, 
p
, 
size
);

175 
m_pos
 +
size
;

176 
	`CheckPosôi⁄
();

177 
	}
}

179 
	$Skù
(
uöt64_t
 
size
)

181 
m_pos
 +
size
;

182 
	`CheckPosôi⁄
();

183 
	}
}

185 
uöt64_t
 
	$Pos
(Ëc⁄° {  
m_pos
; 
	}
}

187 
uöt64_t
 
	$Size
() const

189 
	`CheckPosôi⁄
();

190  
m_íd
 - 
m_pos
;

191 
	}
}

193 
	$SëPosôi⁄
(
uöt64_t
 
pos
)

195 
m_pos
 = 
pos
;

196 
	`CheckPosôi⁄
();

197 
	}
}

199 
	g¥iv©e
:

200 
	$CheckPosôi⁄
() const

202 
	`ASSERT_LESS_OR_EQUAL
(
m_pos
, 
m_íd
, ());

203 
	}
}

205 
Ródî
 c⁄° & 
	gm_ªadî
;

206 
uöt64_t
 
	gm_pos
, 
	gm_íd
;

210 
	gãm∂©e
 <
ty≥«me
 
	gTRódî
>

211 ˛as†
	cRódîSour˚


213 
	mpublic
:

214 
usög
 
RódîTy≥
 = 
TRódî
;

216 
	$RódîSour˚
(
TRódî
 c⁄° & 
ªadî
Ë: 
	`m_ªadî
‘ódî), 
	$m_pos
(0) {}

218 
	$Ród
(* 
p
, 
size_t
 
size
)

220 
m_ªadî
.
	`Ród
(
m_pos
, 
p
, 
size
);

221 
m_pos
 +
size
;

222 
	}
}

224 
	$Skù
(
uöt64_t
 
size
)

226 
m_pos
 +
size
;

227 
	`ASSERT
 ( 
	`As£πPosôi⁄
(), () );

228 
	}
}

230 
uöt64_t
 
	$Pos
() const

232  
m_pos
;

233 
	}
}

235 
uöt64_t
 
	$Size
() const

237 
	`ASSERT
 ( 
	`As£πPosôi⁄
(), () );

238  (
m_ªadî
.
	`Size
(Ë- 
m_pos
);

239 
	}
}

245 
TRódî
 
	$SubRódî
(
uöt64_t
 
size
)

247 
uöt64_t
 c⁄° 
pos
 = 
m_pos
;

248 
	`Skù
(
size
);

249  
m_ªadî
.
	`SubRódî
(
pos
, 
size
);

250 
	}
}

252 
TRódî
 
	$SubRódî
(Ë{  
	`SubRódî
(
	`Size
()); 
	}
}

254 
	g°d
::
unique_±r
<
Ródî
> 
	$Cª©eSubRódî
(
uöt64_t
 
size
)

256 
uöt64_t
 c⁄° 
pos
 = 
m_pos
;

257 
	`Skù
(
size
);

258  
m_ªadî
.
	`Cª©eSubRódî
(
pos
, 
size
);

259 
	}
}

261 
	g°d
::
unique_±r
<
Ródî
> 
	$Cª©eSubRódî
(Ë{  
	`Cª©eSubRódî
(
	`Size
()); 
	}
}

264 
	g¥iv©e
:

265 
boﬁ
 
	$As£πPosôi⁄
() const

267 
boﬁ
 c⁄° 
ªt
 = (
m_pos
 <
m_ªadî
.
	`Size
());

268 
	`ASSERT
 ( 
ªt
, (
m_pos
, 
m_ªadî
.
	`Size
()) );

269  
ªt
;

270 
	}
}

272 
TRódî
 
	gm_ªadî
;

273 
uöt64_t
 
	gm_pos
;

276 
	gãm∂©e
 <
˛ass
 
	gTRódî
>

277 
ölöe
 
	$RódFromPos
(
TRódî
 c⁄° & 
ªadî
, 
uöt64_t
 
pos
, * 
p
, 
size_t
 
size
)

279 
ªadî
.
	`Ród
(
pos
, 
p
, 
size
);

280 
	}
}

282 
	gãm∂©e
 <
ty≥«me
 
	gTPrimôive
, 
˛ass
 
	gTRódî
>

283 
ölöe
 
TPrimôive
 
	$RódPrimôiveFromPos
(
TRódî
 c⁄° & 
ªadî
, 
uöt64_t
 
pos
)

285 #i‚de‡
OMIM_OS_LINUX


286 
	`°©ic_as£π
(
°d
::
is_åivüŒy_c›yabÀ
<
TPrimôive
>::
vÆue
);

288 
TPrimôive
 
¥imôive
;

289 
	`RódFromPos
(
ªadî
, 
pos
, &
¥imôive
, (primitive));

290  
	`Sw≠IfBigEndünMa¸oBa£d
(
¥imôive
);

291 
	}
}

293 
	gãm∂©e
 <
ty≥«me
 
	gTPrimôive
, 
˛ass
 
	gTSour˚
>

294 
TPrimôive
 
	$RódPrimôiveFromSour˚
(
TSour˚
 & 
sour˚
)

296 #i‚de‡
OMIM_OS_LINUX


297 
	`°©ic_as£π
(
°d
::
is_åivüŒy_c›yabÀ
<
TPrimôive
>::
vÆue
);

299 
TPrimôive
 
¥imôive
;

300 
sour˚
.
	`Ród
(&
¥imôive
, (primitive));

301  
	`Sw≠IfBigEndünMa¸oBa£d
(
¥imôive
);

302 
	}
}

304 
	gãm∂©e
 <
ty≥«me
 
	gTPrimôive
,Åy≥«mê
	gTSour˚
>

305 
	$RódPrimôiveFromSour˚
(
TSour˚
 & 
sour˚
, 
TPrimôive
 & 
¥imôive
)

307 
¥imôive
 = 
RódPrimôiveFromSour˚
<
TPrimôive
, 
TSour˚
>(
sour˚
);

308 
	}
}

	@platform/battery_tracker.hpp

1 #¥agm®
⁄˚


3 
	~<chr⁄o
>

4 
	~<c°döt
>

5 
	~<ve˘‹
>

7 
«me•a˚
 
	g∂©f‹m


10 ˛as†
	cB©ãryLevñTøckî


12 
	gpublic
:

13 ˛as†
	cSubs¸ibî


15 
public
:

16 
vútuÆ
 
OnB©ãryLevñRe˚ived
(
uöt8_t
 
Àvñ
) = 0;

17 
	g¥Ÿe˘ed
:

18 
vútuÆ
 ~
Subs¸ibî
() = ;

21 
Subs¸ibe
(
Subs¸ibî
 * 
subs¸ibî
);

22 
Unsubs¸ibe
(
Subs¸ibî
 * 
subs¸ibî
);

23 
Unsubs¸ibeAŒ
();

25 
	g¥iv©e
:

26 
Reque°B©ãryLevñ
();

28 
	g°d
::
ve˘‹
<
Subs¸ibî
 *> 
m_subs¸ibîs
;

29 
	g°d
::
chr⁄o
::
sy°em_˛ock
::
time_poöt
 
m_œ°Reque°Time
;

30 
uöt8_t
 
	gm_œ°Re˚ivedLevñ
 = 0;

31 
boﬁ
 
	gm_isTøckögInProgªss
 = 
Ál£
;

	@platform/country_defines.hpp

1 #¥agm®
⁄˚


3 
	~<c°döt
>

4 
	~<°rög
>

5 
	~<utûôy
>

8 ˛as†
	cM≠FûeTy≥
 : 
uöt8_t


10 
M≠
,

11 
	mDiff
,

13 
	mCou¡


16 
usög
 
	gMwmCou¡î
 = 
uöt32_t
;

17 
usög
 
	gMwmSize
 = 
uöt64_t
;

18 
usög
 
	gLoˇlAndRemŸeSize
 = 
°d
::
∑ú
<
MwmSize
, 
	gMwmSize
>;

20 
	g°d
::
°rög
 
DebugPröt
(
M≠FûeTy≥
 
ty≥
);

	@platform/gui_thread.hpp

1 #¥agm®
⁄˚


3 
	~"ba£/èsk_lo›.hµ
"

5 
«me•a˚
 
	g∂©f‹m


7 ˛as†
	cGuiThªad
 : 
public
 
ba£
::
TaskLo›


9 
public
:

10 
PushResu…
 
Push
(
Task
 && 
èsk
Ë
ovîride
;

11 
PushResu…
 
Push
(
Task
 c⁄° & 
èsk
Ë
	govîride
;

	@platform/secure_storage.hpp

1 #¥agm®
⁄˚


3 
	~<°rög
>

5 
«me•a˚
 
	g∂©f‹m


7 ˛as†
	cSecuªSt‹age


9 
	gpublic
:

10 
Save
(
°d
::
°rög
 c⁄° & 
key
, std::°rög c⁄° & 
vÆue
);

11 
boﬁ
 
Lﬂd
(
°d
::
°rög
 c⁄° & 
key
, std::°rög & 
vÆue
);

12 
Remove
(
°d
::
°rög
 c⁄° & 
key
);

	@testing/testregister.hpp

1 #¥agm®
⁄˚


3 
	~<fun˘i⁄Æ
>

4 
	~<utûôy
>

6 ˛as†
	cTe°Regi°î


8 
	mpublic
:

9 
Te°Regi°î
(c⁄° * 
ã°«me
, c⁄° * 
fûíame
, 
°d
::
fun˘i⁄
<()> && 
‚Te°
)

10 : 
m_ã°«me
(
ã°«me
), 
m_fûíame
(
fûíame
), 
m_‚
(
°d
::
move
(
‚Te°
)), 
	$m_√xt
(
nuŒ±r
)

12 i‡(
	`Fú°Regi°î
(Ë=
nuŒ±r
)

14 
	`Fú°Regi°î
(Ë
this
;

18 
Te°Regi°î
 * 
œ°
 = 
	`Fú°Regi°î
();

19 
œ°
->
m_√xt
 !
nuŒ±r
)

20 
œ°
 =Üa°->
m_√xt
;

21 
œ°
->
m_√xt
 = 
this
;

25 
Te°Regi°î
 *& 
	$Fú°Regi°î
()

27 
Te°Regi°î
 * 
ã°
 = 
nuŒ±r
;

28  
ã°
;

29 
	}
}

32 c⁄° * 
	gm_ã°«me
;

35 c⁄° * 
	gm_fûíame
;

38 
	g°d
::
fun˘i⁄
<()> 
m_‚
;

41 
Te°Regi°î
 * 
	gm_√xt
;

	@base/bidirectional_map.hpp

1 #¥agm®
⁄˚


3 
	~<c°ddef
>

4 
	~<un‹dîed_m≠
>

6 
«me•a˚
 
	gba£


10 
	gãm∂©e
 <
ty≥«me
 
	gK
,Åy≥«mê
	gV
,

11 
	gãm∂©e
 <
	gty≥«me
 ...> 
ty≥«me
 
	gKToVM≠
 = 
°d
::
un‹dîed_m≠
,

12 
ty≥«me
 
	gKToVHashOrCom∑øt‹
 = 
°d
::
hash
<
K
>,

13 
	gãm∂©e
 <
	gty≥«me
 ...> 
ty≥«me
 
	gVToKM≠
 = 
°d
::
un‹dîed_m≠
,

14 
ty≥«me
 
	gVToKHashOrCom∑øt‹
 = 
°d
::
hash
<
V
>>

15 ˛as†
	cBidúe˘i⁄ÆM≠


17 
public
:

18 
Bidúe˘i⁄ÆM≠
() = ;

20 
size_t
 
Size
(Ëc⁄° {  
	gm_kToV
.
size
(); }

22 
boﬁ
 
IsEm±y
(Ëc⁄° {  
	gm_kToV
.
em±y
(); }

24 
CÀ¨
()

26 
	gm_kToV
.
˛ór
();

27 
	gm_vToK
.
˛ór
();

30 
boﬁ
 
Add
(
K
 c⁄° & 
k
, 
V
 c⁄° & 
v
)

32 i‡(
	gm_kToV
.
föd
(
k
Ë!
m_kToV
.
˚nd
(Ë|| 
m_vToK
.föd(
v
) != m_vToK.cend())

33  
Ál£
;

35 
	gm_kToV
.
em∂a˚
(
k
, 
v
);

36 
	gm_vToK
.
em∂a˚
(
v
, 
k
);

37  
	gåue
;

40 
boﬁ
 
RemoveKey
(
K
 c⁄° & 
k
Ë{  
Remove
(k, 
m_kToV
, 
m_vToK
); }

42 
boﬁ
 
RemoveVÆue
(
V
 c⁄° & 
v
Ë{  
Remove
(v, 
m_vToK
, 
m_kToV
); }

44 
Sw≠
(
Bidúe˘i⁄ÆM≠
 & 
Ÿhî
)

46 
	gm_kToV
.
sw≠
(
Ÿhî
.
m_kToV
);

47 
	gm_vToK
.
sw≠
(
Ÿhî
.
m_vToK
);

50 
	gãm∂©e
 <
ty≥«me
 
	gFn
>

51 
F‹EachE¡ry
(
Fn
 && 
‚
) const

53 autÿc⁄° & 
	ge
 : 
m_kToV
)

54 
‚
(
e
.
fú°
,É.
£c⁄d
);

57 
boﬁ
 
GëVÆue
(
K
 c⁄° & 
key
, 
V
 & 
vÆue
) const

59 autÿc⁄° 
	gô
 = 
m_kToV
.
föd
(
key
);

60 i‡(
	gô
 =
m_kToV
.
˚nd
())

61  
Ál£
;

62 
	gvÆue
 = 
ô
->
£c⁄d
;

63  
	gåue
;

66 
boﬁ
 
GëKey
(
V
 c⁄° & 
vÆue
, 
K
 & 
key
) const

68 autÿc⁄° 
	gô
 = 
m_vToK
.
föd
(
vÆue
);

69 i‡(
	gô
 =
m_vToK
.
˚nd
())

70  
Ál£
;

71 
	gkey
 = 
ô
->
£c⁄d
;

72  
	gåue
;

75 
	g¥Ÿe˘ed
:

76 
usög
 
Key
 = 
K
;

77 
usög
 
	gVÆue
 = 
V
;

78 
usög
 
	gKeysToVÆues
 = 
KToVM≠
<
K
, 
	gV
, 
	gKToVHashOrCom∑øt‹
>;

79 
usög
 
	gVÆuesToKeys
 = 
VToKM≠
<
V
, 
	gK
, 
	gVToKHashOrCom∑øt‹
>;

81 
KeysToVÆues
 c⁄° & 
GëKeysToVÆues
(Ëc⁄° {  
	gm_kToV
; }

83 
VÆuesToKeys
 c⁄° & 
GëVÆuesToKeys
(Ëc⁄° {  
	gm_vToK
; }

85 
	g¥iv©e
:

86 
ãm∂©e
 <
ty≥«me
 
T
,Åy≥«mê
	gFú°M≠
,Åy≥«mê
	gSec⁄dM≠
>

87 
boﬁ
 
Remove
(
T
 c⁄° & 
t
, 
Fú°M≠
 & 
fú°M≠
, 
Sec⁄dM≠
 & 
£c⁄dM≠
)

89 autÿc⁄° 
	gfú°It
 = 
fú°M≠
.
föd
(
t
);

90 i‡(
	gfú°It
 =
fú°M≠
.
˚nd
())

91  
Ál£
;

93 
	g£c⁄dM≠
.
îa£
(
fú°It
->
£c⁄d
);

94 
	gfú°M≠
.
îa£
(
fú°It
);

95  
	gåue
;

98 
KeysToVÆues
 
	gm_kToV
;

99 
VÆuesToKeys
 
	gm_vToK
;

	@base/cancellable.hpp

1 #¥agm®
⁄˚


3 
	~<chr⁄o
>

4 
	~<muãx
>

5 
	~<›ti⁄Æ
>

6 
	~<°rög
>

8 
«me•a˚
 
	gba£


12 ˛as†
	cC™˚ŒabÀ


14 
	gpublic
:

15 ˛as†
	cSètus


17 
A˘ive
,

18 
	gC™˚lCÆÀd
,

19 
	gDódlöeEx˚eded
,

22 
C™˚ŒabÀ
() = ;

24 
	gvútuÆ
 ~
C™˚ŒabÀ
() {}

28 
vútuÆ
 
Re£t
();

31 
vútuÆ
 
C™˚l
();

34 
vútuÆ
 
SëDódlöe
(
°d
::
chr⁄o
::
°ódy_˛ock
::
time_poöt
 c⁄° & 
t
);

39 
vútuÆ
 
boﬁ
 
IsC™˚Œed
() const;

42 
vútuÆ
 
Sètus
 
C™˚Œ©i⁄Sètus
() const;

44 
	g¥iv©e
:

46 
CheckDódlöe
() const;

48 
muèbÀ
 
	g°d
::
muãx
 
m_muãx
;

50 
muèbÀ
 
Sètus
 
	gm_°©us
 = Sètus::
A˘ive
;

52 
	g°d
::
›ti⁄Æ
<
°d
::
chr⁄o
::
°ódy_˛ock
::
time_poöt
> 
m_dódlöe
;

55 
	g°d
::
°rög
 
DebugPröt
(
C™˚ŒabÀ
::
Sètus
 
°©us
);

	@base/linked_map.hpp

1 #¥agm®
⁄˚


3 
	~"ba£/as£π.hµ
"

5 
	~<li°
>

6 
	~<un‹dîed_m≠
>

8 
«me•a˚
 
	gba£


10 
	gãm∂©e
 <
ty≥«me
 
	gKey
,Åy≥«mê
	gVÆue
,Åem∂©ê<
	gty≥«me
...>Åy≥«mê
	gM≠
 = 
°d
::
un‹dîed_m≠
>

11 ˛as†
	cLökedM≠


13 
public
:

14 
usög
 
KeyTy≥
 = 
Key
;

15 
usög
 
	gVÆueTy≥
 = 
VÆue
;

16 
usög
 
	gLi°Ty≥
 = 
°d
::
li°
<°d::
∑ú
<
KeyTy≥
, 
	gVÆueTy≥
>>;

17 
usög
 
	gM≠Ty≥
 = 
M≠
<
Key
, 
ty≥«me
 
	gLi°Ty≥
::
ôî©‹
>;

19 
	gãm∂©e
 <
ty≥«me
 
	gT
>

20 
boﬁ
 
Em∂a˚
(
KeyTy≥
 c⁄° & 
key
, 
T
 && 
vÆue
)

22 i‡(
	gm_m≠
.
föd
(
key
Ë!
m_m≠
.
˚nd
())

23  
Ál£
;

25 
	gm_li°
.
em∂a˚_back
(
key
, 
°d
::
f‹w¨d
<
T
>(
vÆue
));

26 
	gm_m≠
.
em∂a˚
(
key
, 
°d
::
¥ev
(
m_li°
.
íd
()));

27  
	gåue
;

30 
P›Fr⁄t
()

32 
CHECK
(!
m_m≠
.
em±y
(), ());

33 
	gm_m≠
.
îa£
(
m_li°
.
‰⁄t
().
fú°
);

34 
	gm_li°
.
p›_‰⁄t
();

37 
boﬁ
 
Eø£
(
KeyTy≥
 c⁄° & 
key
)

39 autÿc⁄° 
	gô
 = 
m_m≠
.
föd
(
key
);

40 i‡(
	gô
 =
m_m≠
.
˚nd
())

41  
Ál£
;

43 
	gm_li°
.
îa£
(
ô
->
£c⁄d
);

44 
	gm_m≠
.
îa£
(
ô
);

45  
	gåue
;

48 
boﬁ
 
C⁄èös
(
KeyTy≥
 c⁄° & 
key
) const

50  
	gm_m≠
.
föd
(
key
Ë!
m_m≠
.
˚nd
();

53 
VÆueTy≥
 c⁄° & 
Gë
(
KeyTy≥
 c⁄° & 
key
) const

55 autÿc⁄° 
	gô
 = 
m_m≠
.
föd
(
key
);

56 
CHECK
(
ô
 !
m_m≠
.
˚nd
(), ());

58  
	gô
->
	g£c⁄d
->second;

61 
	gVÆueTy≥
 & 
Fr⁄t
()

63  
	gm_li°
.
‰⁄t
().
	g£c⁄d
;

66 
VÆueTy≥
 c⁄° & 
Fr⁄t
() const

68  
	gm_li°
.
‰⁄t
().
	g£c⁄d
;

71 
Sw≠
(
LökedM≠
 & 
lökedM≠
)

73 
	gm_m≠
.
sw≠
(
lökedM≠
.
m_m≠
);

74 
	gm_li°
.
sw≠
(
lökedM≠
.
m_li°
);

77 
size_t
 
Size
() const

79  
	gm_li°
.
size
();

82 
boﬁ
 
IsEm±y
() const

84  
	gm_li°
.
em±y
();

87 
	g¥iv©e
:

88 
Li°Ty≥
 
m_li°
;

89 
M≠Ty≥
 
	gm_m≠
;

	@base/thread_checker.hpp

1 #¥agm®
⁄˚


3 
	~"ba£/as£π.hµ
"

4 
	~"ba£/ma¸os.hµ
"

6 
	~<thªad
>

11 ˛as†
	cThªadCheckî


13 
	mpublic
:

14 
ThªadCheckî
();

18 
boﬁ
 
	$CÆÀdOnOrigöÆThªad
() const;

20 
¥iv©e
:

21 
°d
::
thªad
::
id
 c⁄° 
m_id
;

23 
	`DISALLOW_COPY_AND_MOVE
(
ThªadCheckî
);

26 
	#DECLARE_THREAD_CHECKER
(
thªadCheckîName
Ë
ThªadCheckî
 
	)
threadCheckerName

27 
	#CHECK_THREAD_CHECKER
(
thªadCheckîName
, 
msg
Ë
	`CHECK
—hªadCheckîName.
	`CÆÀdOnOrigöÆThªad
(), msg)

	)

28 
	#DECLARE_AND_CHECK_THREAD_CHECKER
(
msg
) \

30 c⁄° 
ThªadCheckî
 
thªadCheckî
; \

31 
	`CHECK
(
thªadCheckî
.
	`CÆÀdOnOrigöÆThªad
(), (
msg
)); \

32 
	}

	)
}

	@coding/endianness.hpp

1 #¥agm®
⁄˚


3 
	~"ba£/ba£.hµ
"

5 
	~<c°ddef
>

6 
	~<ty≥_åaôs
>

17 
ölöe
 
boﬁ
 
	$IsBigEndünMa¸oBa£d
()

19 #ifde‡
ENDIAN_IS_BIG


20  
åue
;

22  
Ál£
;

24 
	}
}

26 
	gãm∂©e
 <
ty≥«me
 
	gT
>

27 
T
 
	$Revî£ByãOrdî
(
T
 
t
)

29 
	`°©ic_as£π
(
°d
::
is_öãgøl
<
T
>::
vÆue
, "Only integralÅypesáre supported.");

31 
T
 
ªs
;

32 c⁄° * 
a
 = 
ªöãΩªt_ˇ°
<c⁄° *>(&
t
);

33 * 
b
 = 
ªöãΩªt_ˇ°
<*>(&
ªs
);

34 
size_t
 
i
 = 0; i < (
T
); ++i)

35 
b
[
i
] = 
a
[(
T
) - 1 - i];

36  
ªs
;

37 
	}
}

39 
	gãm∂©e
 <
ty≥«me
 
	gT
>

40 
T
 
	$Sw≠IfBigEndünMa¸oBa£d
(
T
 
t
)

42 #ifde‡
ENDIAN_IS_BIG


43  
	`Revî£ByãOrdî
(
t
);

45  
t
;

47 
	}
}

49 
ölöe
 
boﬁ
 
	$IsLôéeEndün
()

51 
uöt16_t
 c⁄° 
w‹d
 = 0x0001;

52 
uöt8_t
 c⁄° * 
b
 = 
ªöãΩªt_ˇ°
<uöt8_àc⁄° *>(&
w‹d
);

53  
b
[0] != 0x0;

54 
	}
}

	@std/target_os.hpp

1 #¥agm®
⁄˚


3 #i‡
deföed
(
ANDROID
Ë|| deföed(
__ANDROID__
)

4 
	#OMIM_OS_ANDROID


	)

5 
	#OMIM_OS_NAME
 "™droid"

	)

6 
	#OMIM_OS_MOBILE


	)

8 #ñi‡
deföed
(
__APPLE__
)

9 
	~<T¨gëC⁄dôi⁄Æs.h
>

10 #i‡(
TARGET_OS_IPHONE
 > 0)

11 
	#OMIM_OS_IPHONE


	)

12 
	#OMIM_OS_NAME
 "ios"

	)

13 #i‡(
TARGET_IPHONE_SIMULATOR
 > 0)

14 
	#OMIM_OS_IPHONE_SIMULATOR


	)

16 
	#OMIM_OS_IPHONE_DEVICE


	)

18 
	#OMIM_OS_MOBILE


	)

21 
	#OMIM_OS_MAC


	)

22 
	#OMIM_OS_NAME
 "mac"

	)

23 
	#OMIM_OS_DESKTOP


	)

26 #ñi‡
deföed
(
_WIN32
)

27 
	#OMIM_OS_WINDOWS


	)

28 
	#OMIM_OS_NAME
 "wö"

	)

29 
	#OMIM_OS_DESKTOP


	)

31 #ifde‡
__MINGW32__


32 
	#OMIM_OS_WINDOWS_MINGW


	)

34 
	#OMIM_OS_WINDOWS_NATIVE


	)

38 
	#OMIM_OS_LINUX


	)

39 
	#OMIM_OS_NAME
 "löux"

	)

40 
	#OMIM_OS_DESKTOP


	)

	@
1
.
0
38
788
defines.hpp
omim_config.h
precompiled_headers.hpp
private.h
private_default.h
base/assert.hpp
base/logging.hpp
base/macros.hpp
base/stl_helpers.hpp
base/string_utils.hpp
geometry/point2d.hpp
platform/platform.hpp
testing/testing.hpp
3party/utfcpp/source/utf8/unchecked.h
base/base.hpp
base/buffer_vector.hpp
base/checked_cast.hpp
base/exception.hpp
base/internal/message.hpp
base/math.hpp
base/matrix.hpp
base/src_point.hpp
base/task_loop.hpp
base/thread.hpp
base/thread_pool_delayed.hpp
base/timer.hpp
coding/reader.hpp
platform/battery_tracker.hpp
platform/country_defines.hpp
platform/gui_thread.hpp
platform/secure_storage.hpp
testing/testregister.hpp
base/bidirectional_map.hpp
base/cancellable.hpp
base/linked_map.hpp
base/thread_checker.hpp
coding/endianness.hpp
std/target_os.hpp
